!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=193)}([function(e,t,n){e.exports=n(181)()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(78);t.assert=r.assert,t.assertionError=r.assertionError;var o=n(77);t.base64=o.base64,t.base64Decode=o.base64Decode,t.base64Encode=o.base64Encode;var i=n(40);t.CONSTANTS=i.CONSTANTS;var a=n(167);t.deepCopy=a.deepCopy,t.deepExtend=a.deepExtend,t.patchProperty=a.patchProperty;var s=n(166);t.Deferred=s.Deferred;var u=n(165);t.getUA=u.getUA,t.isMobileCordova=u.isMobileCordova,t.isNodeSdk=u.isNodeSdk,t.isReactNative=u.isReactNative;var c=n(164);t.ErrorFactory=c.ErrorFactory,t.FirebaseError=c.FirebaseError,t.patchCapture=c.patchCapture;var l=n(76);t.jsonEval=l.jsonEval,t.stringify=l.stringify;var h=n(163);t.decode=h.decode,t.isAdmin=h.isAdmin,t.issuedAtTime=h.issuedAtTime,t.isValidFormat=h.isValidFormat,t.isValidTimestamp=h.isValidTimestamp;var f=n(75);t.clone=f.clone,t.contains=f.contains,t.every=f.every,t.extend=f.extend,t.findKey=f.findKey,t.findValue=f.findValue,t.forEach=f.forEach,t.getAnyKey=f.getAnyKey,t.getCount=f.getCount,t.getValues=f.getValues,t.isEmpty=f.isEmpty,t.isNonNullObject=f.isNonNullObject,t.map=f.map,t.safeGet=f.safeGet;var p=n(162);t.querystring=p.querystring,t.querystringDecode=p.querystringDecode;var d=n(161);t.Sha1=d.Sha1;var v=n(159);t.async=v.async,t.createSubscribe=v.createSubscribe;var y=n(158);t.errorPrefix=y.errorPrefix,t.validateArgCount=y.validateArgCount,t.validateCallback=y.validateCallback,t.validateContextObject=y.validateContextObject,t.validateNamespace=y.validateNamespace;var m=n(157);t.stringLength=m.stringLength,t.stringToByteArray=m.stringToByteArray},function(e,t,n){"use strict";e.exports=n(190)},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(1),a=n(1),s=n(1),u=n(1),c=n(1),l=n(29),h=n(1),f=n(90),p=new f.Logger("@firebase/database");t.LUIDGenerator=(r=1,function(){return r++}),t.sha1=function(e){var t=u.stringToByteArray(e),n=new s.Sha1;n.update(t);var r=n.digest();return a.base64.encodeByteArray(r)};var d=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n="",r=0;r<e.length;r++)Array.isArray(e[r])||e[r]&&"object"==typeof e[r]&&"number"==typeof e[r].length?n+=d.apply(null,e[r]):"object"==typeof e[r]?n+=c.stringify(e[r]):n+=e[r],n+=" ";return n};t.logger=null;var v=!0;t.enableLogging=function(e,n){o.assert(!n||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(p.logLevel=f.LogLevel.VERBOSE,t.logger=p.log.bind(p),n&&l.SessionStorage.set("logging_enabled",!0)):"function"==typeof e?t.logger=e:(t.logger=null,l.SessionStorage.remove("logging_enabled"))},t.log=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];if(!0===v&&(v=!1,null===t.logger&&!0===l.SessionStorage.get("logging_enabled")&&t.enableLogging(!0)),t.logger){var r=d.apply(null,e);t.logger(r)}},t.logWrapper=function(e){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];t.log.apply(void 0,[e].concat(n))}},t.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE INTERNAL ERROR: "+d.apply(void 0,e);p.error(n)},t.fatal=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE FATAL ERROR: "+d.apply(void 0,e);throw p.error(n),new Error(n)},t.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE WARNING: "+d.apply(void 0,e);p.warn(n)},t.warnIfPageIsSecure=function(){"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&t.warn("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().")},t.warnAboutUnsupportedMethod=function(e){t.warn(e+" is unsupported and will likely change soon.  Please do not use.")},t.isInvalidJSONNumber=function(e){return"number"==typeof e&&(e!=e||e==Number.POSITIVE_INFINITY||e==Number.NEGATIVE_INFINITY)},t.executeWhenDOMReady=function(e){if(h.isNodeSdk()||"complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&n()}),window.attachEvent("onload",n))}},t.MIN_NAME="[MIN_NAME]",t.MAX_NAME="[MAX_NAME]",t.nameCompare=function(e,n){if(e===n)return 0;if(e===t.MIN_NAME||n===t.MAX_NAME)return-1;if(n===t.MIN_NAME||e===t.MAX_NAME)return 1;var r=t.tryParseInt(e),o=t.tryParseInt(n);return null!==r?null!==o?r-o==0?e.length-n.length:r-o:-1:null!==o?1:e<n?-1:1},t.stringCompare=function(e,t){return e===t?0:e<t?-1:1},t.requireKey=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+c.stringify(t))},t.ObjectToUniqueKey=function(e){if("object"!=typeof e||null===e)return c.stringify(e);var n=[];for(var r in e)n.push(r);n.sort();for(var o="{",i=0;i<n.length;i++)0!==i&&(o+=","),o+=c.stringify(n[i]),o+=":",o+=t.ObjectToUniqueKey(e[n[i]]);return o+="}"},t.splitStringBySize=function(e,t){var n=e.length;if(n<=t)return[e];for(var r=[],o=0;o<n;o+=t)o+t>n?r.push(e.substring(o,n)):r.push(e.substring(o,o+t));return r},t.each=function(e,t){if(Array.isArray(e))for(var n=0;n<e.length;++n)t(n,e[n]);else i.forEach(e,function(e,n){return t(n,e)})},t.bindCallback=function(e,t){return t?e.bind(t):e},t.doubleToIEEE754String=function(e){o.assert(!t.isInvalidJSONNumber(e),"Invalid JSON number");var n,r,i,a,s,u,c;for(0===e?(r=0,i=0,n=1/e==-1/0?1:0):(n=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(r=(a=Math.min(Math.floor(Math.log(e)/Math.LN2),1023))+1023,i=Math.round(e*Math.pow(2,52-a)-Math.pow(2,52))):(r=0,i=Math.round(e/Math.pow(2,-1074)))),u=[],s=52;s;s-=1)u.push(i%2?1:0),i=Math.floor(i/2);for(s=11;s;s-=1)u.push(r%2?1:0),r=Math.floor(r/2);u.push(n?1:0),u.reverse(),c=u.join("");var l="";for(s=0;s<64;s+=8){var h=parseInt(c.substr(s,8),2).toString(16);1===h.length&&(h="0"+h),l+=h}return l.toLowerCase()},t.isChromeExtensionContentScript=function(){return!("object"!=typeof window||!window.chrome||!window.chrome.extension||/^chrome/.test(window.location.href))},t.isWindowsStoreApp=function(){return"object"==typeof Windows&&"object"==typeof Windows.UI},t.errorForServerCode=function(e,t){var n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==e?n="Client doesn't have permission to access the desired data.":"unavailable"==e&&(n="The service is unavailable");var r=new Error(e+" at "+t.path.toString()+": "+n);return r.code=e.toUpperCase(),r},t.INTEGER_REGEXP_=new RegExp("^-?\\d{1,10}$"),t.tryParseInt=function(e){if(t.INTEGER_REGEXP_.test(e)){var n=Number(e);if(n>=-2147483648&&n<=2147483647)return n}return null},t.exceptionGuard=function(e){try{e()}catch(e){setTimeout(function(){var n=e.stack||"";throw t.warn("Exception was thrown by user callback.",n),e},Math.floor(0))}},t.callUserCallback=function(e){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];"function"==typeof e&&t.exceptionGuard(function(){e.apply(void 0,n)})},t.beingCrawled=function(){return("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0},t.exportPropGetter=function(e,t,n){Object.defineProperty(e,t,{get:n})},t.setTimeoutNonBlocking=function(e,t){var n=setTimeout(e,t);return"object"==typeof n&&n.unref&&n.unref(),n}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",function(){return o}),n.d(t,"__assign",function(){return i}),n.d(t,"__rest",function(){return a}),n.d(t,"__decorate",function(){return s}),n.d(t,"__param",function(){return u}),n.d(t,"__metadata",function(){return c}),n.d(t,"__awaiter",function(){return l}),n.d(t,"__generator",function(){return h}),n.d(t,"__exportStar",function(){return f}),n.d(t,"__values",function(){return p}),n.d(t,"__read",function(){return d}),n.d(t,"__spread",function(){return v}),n.d(t,"__await",function(){return y}),n.d(t,"__asyncGenerator",function(){return m}),n.d(t,"__asyncDelegator",function(){return g}),n.d(t,"__asyncValues",function(){return _}),n.d(t,"__makeTemplateObject",function(){return b}),n.d(t,"__importStar",function(){return w}),n.d(t,"__importDefault",function(){return E});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&(n[r[o]]=e[r[o]])}return n}function s(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,s)}u((r=r.apply(e,t||[])).next())})}function h(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=r[2&i[0]?"return":i[0]?"throw":"next"])&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[0,o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}function f(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function y(e){return this instanceof y?(this.v=e,this):new y(e)}function m(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise(function(n,r){i.push([e,t,n,r])>1||s(e,t)})})}function s(e,t){try{(n=o[e](t)).value instanceof y?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function u(e){s("next",e)}function c(e){s("throw",e)}function l(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function g(e){var t,n;return t={},r("next"),r("throw",function(e){throw e}),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){e[r]&&(t[r]=function(t){return(n=!n)?{value:y(e[r](t)),done:"return"===r}:o?o(t):t})}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t=e[Symbol.asyncIterator];return t?t.call(e):p(e)}function b(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function w(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(1),i=function(){function e(e,t){if(void 0===t){this.pieces_=e.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}return Object.defineProperty(e,"Empty",{get:function(){return new e("")},enumerable:!0,configurable:!0}),e.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},e.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},e.prototype.popFront=function(){var t=this.pieceNum_;return t<this.pieces_.length&&t++,new e(this.pieces_,t)},e.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},e.prototype.toString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"},e.prototype.toUrlEncodedString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+encodeURIComponent(String(this.pieces_[t])));return e||"/"},e.prototype.slice=function(e){return void 0===e&&(e=0),this.pieces_.slice(this.pieceNum_+e)},e.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var t=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)t.push(this.pieces_[n]);return new e(t,0)},e.prototype.child=function(t){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(t instanceof e)for(r=t.pieceNum_;r<t.pieces_.length;r++)n.push(t.pieces_[r]);else{var o=t.split("/");for(r=0;r<o.length;r++)o[r].length>0&&n.push(o[r])}return new e(n,0)},e.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},e.relativePath=function(t,n){var r=t.getFront(),o=n.getFront();if(null===r)return n;if(r===o)return e.relativePath(t.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+t+")")},e.comparePaths=function(e,t){for(var n=e.slice(),o=t.slice(),i=0;i<n.length&&i<o.length;i++){var a=r.nameCompare(n[i],o[i]);if(0!==a)return a}return n.length===o.length?0:n.length<o.length?-1:1},e.prototype.equals=function(e){if(this.getLength()!==e.getLength())return!1;for(var t=this.pieceNum_,n=e.pieceNum_;t<=this.pieces_.length;t++,n++)if(this.pieces_[t]!==e.pieces_[n])return!1;return!0},e.prototype.contains=function(e){var t=this.pieceNum_,n=e.pieceNum_;if(this.getLength()>e.getLength())return!1;for(;t<this.pieces_.length;){if(this.pieces_[t]!==e.pieces_[n])return!1;++t,++n}return!0},e}();t.Path=i;var a=function(){function e(e,t){this.errorPrefix_=t,this.parts_=e.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=o.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(e,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(e,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),e.prototype.push=function(e){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(e),this.byteLength_+=o.stringLength(e),this.checkValid_()},e.prototype.pop=function(){var e=this.parts_.pop();this.byteLength_-=o.stringLength(e),this.parts_.length>0&&(this.byteLength_-=1)},e.prototype.checkValid_=function(){if(this.byteLength_>e.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+e.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>e.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+e.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},e.prototype.toErrorString=function(){return 0==this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},e}();t.ValidationPath=a},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,o,i,a,s],l=0;(u=new Error(t.replace(/%s/g,function(){return c[l++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t,n){"use strict";function r(e){return function(e,t){var n=1540483477,r=t^e.length,s=e.length,u=0;for(;s>=4;){var c=o(e,u);c=a(c,n),c=a(c^=c>>>24,n),r=a(r,n),r^=c,u+=4,s-=4}switch(s){case 3:r^=i(e,u),r=a(r^=e.charCodeAt(u+2)<<16,n);break;case 2:r=a(r^=i(e,u),n);break;case 1:r=a(r^=e.charCodeAt(u),n)}return r=a(r^=r>>>13,n),(r^=r>>>15)>>>0}(e,e.length).toString(36)}function o(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)+(e.charCodeAt(t++)<<16)+(e.charCodeAt(t)<<24)}function i(e,t){return e.charCodeAt(t++)+(e.charCodeAt(t++)<<8)}function a(e,t){return(65535&(e|=0))*(t|=0)+(((e>>>16)*t&65535)<<16)|0}n.r(t);var s="__emotion_styles",u="__emotion_target",c={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,fontWeight:1,lineClamp:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1},l=n(85),h=n.n(l);function f(){var e=document.createElement("style");return e.type="text/css",e.setAttribute("data-emotion",""),e.appendChild(document.createTextNode("")),document.head.appendChild(e),e}n.d(t,"sheet",function(){return p}),n.d(t,"useStylisPlugin",function(){return g}),n.d(t,"registered",function(){return _}),n.d(t,"inserted",function(){return b}),n.d(t,"css",function(){return x}),n.d(t,"keyframes",function(){return D}),n.d(t,"injectGlobal",function(){return L}),n.d(t,"fontFace",function(){return M}),n.d(t,"getRegisteredStyles",function(){return F}),n.d(t,"merge",function(){return j}),n.d(t,"cx",function(){return U}),n.d(t,"hydrate",function(){return V}),n.d(t,"flush",function(){return W});var p=new(function(){function e(){this.isBrowser="undefined"!=typeof window,this.isSpeedy=!0,this.tags=[],this.ctr=0}var t=e.prototype;return t.inject=function(){if(this.injected)throw new Error("already injected!");this.isBrowser?this.tags[0]=f():this.sheet=[],this.injected=!0},t.speedy=function(e){if(0!==this.ctr)throw new Error("cannot change speedy now");this.isSpeedy=!!e},t.insert=function(e,t){if(this.isBrowser){if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(this.tags[this.tags.length-1]);try{n.insertRule(e,n.cssRules.length)}catch(e){0}}else{var r=f();this.tags.push(r),r.appendChild(document.createTextNode(e+(t||"")))}this.ctr++,this.ctr%65e3==0&&this.tags.push(f())}else this.sheet.push(e)},t.flush=function(){this.isBrowser?(this.tags.forEach(function(e){return e.parentNode.removeChild(e)}),this.tags=[],this.ctr=0):this.sheet=[],this.injected=!1},e}());p.inject();var d=new function e(t){function n(e,t,n){var o=t.trim().split(g);t=o;var i=o.length,a=e.length;switch(a){case 0:case 1:var s=0;for(e=0===a?"":e[0]+" ";s<i;++s)t[s]=r(e,t[s],n,a).trim();break;default:var u=s=0;for(t=[];s<i;++s)for(var c=0;c<a;++c)t[u++]=r(e[c]+" ",o[s],n,a).trim()}return t}function r(e,t,n,r){var o=t.charCodeAt(0);switch(33>o&&(o=(t=t.trim()).charCodeAt(0)),o){case 38:switch(j+r){case 0:case 1:if(0===e.trim().length)break;default:return t.replace(_,"$1"+e.trim())}break;case 58:switch(t.charCodeAt(1)){case 103:if(0<V&&0<j)return t.replace(b,"$1").replace(_,"$1"+J);break;default:return e.trim()+t}default:if(0<n*j&&0<t.indexOf("\f"))return t.replace(_,(58===e.charCodeAt(0)?"":"$1")+e.trim())}return e+t}function o(e,t,n,r){var o=0,a=e+";";if(944==(t=2*t+3*n+4*r)){switch(o=a.length,e=a.indexOf(":",9)+1,n=a.substring(0,e).trim(),r=a.substring(e,o-1).trim(),a.charCodeAt(9)*Y){case 0:break;case 45:if(110!==a.charCodeAt(10))break;default:for(e=t=0,o=(a=r.split((r="",v))).length;t<o;e=0,++t){for(var s=a[t],u=s.split(y);s=u[e];){var c=s.charCodeAt(0);if(1===Y&&(64<c&&90>c||96<c&&123>c||95===c||45===c&&45!==s.charCodeAt(1)))switch(isNaN(parseFloat(s))+(-1!==s.indexOf("("))){case 1:switch(s){case"infinite":case"alternate":case"backwards":case"running":case"normal":case"forwards":case"both":case"none":case"linear":case"ease":case"ease-in":case"ease-out":case"ease-in-out":case"paused":case"reverse":case"alternate-reverse":case"inherit":case"initial":case"unset":case"step-start":case"step-end":break;default:s+=X}}u[e++]=s}r+=(0===t?"":",")+u.join(" ")}}return r=n+r+";",1===U||2===U&&i(r,1)?"-webkit-"+r+r:r}if(0===U||2===U&&!i(a,1))return a;switch(t){case 1015:return 45===a.charCodeAt(9)?"-webkit-"+a+a:a;case 951:return 116===a.charCodeAt(3)?"-webkit-"+a+a:a;case 963:return 110===a.charCodeAt(5)?"-webkit-"+a+a:a;case 1009:if(100!==a.charCodeAt(4))break;case 969:case 942:return"-webkit-"+a+a;case 978:return"-webkit-"+a+"-moz-"+a+a;case 1019:case 983:return"-webkit-"+a+"-moz-"+a+"-ms-"+a+a;case 883:return 45===a.charCodeAt(8)?"-webkit-"+a+a:a;case 932:if(45===a.charCodeAt(4))switch(a.charCodeAt(5)){case 103:return"-webkit-box-"+a.replace("-grow","")+"-webkit-"+a+"-ms-"+a.replace("grow","positive")+a;case 115:return"-webkit-"+a+"-ms-"+a.replace("shrink","negative")+a;case 98:return"-webkit-"+a+"-ms-"+a.replace("basis","preferred-size")+a}return"-webkit-"+a+"-ms-"+a+a;case 964:return"-webkit-"+a+"-ms-flex-"+a+a;case 1023:if(99!==a.charCodeAt(8))break;return"-webkit-box-pack"+(e=a.substring(a.indexOf(":",15)).replace("flex-","").replace("space-between","justify"))+"-webkit-"+a+"-ms-flex-pack"+e+a;case 1005:return p.test(a)?a.replace(f,":-webkit-")+a.replace(f,":-moz-")+a:a;case 1e3:switch(o=(e=a.substring(13).trim()).indexOf("-")+1,e.charCodeAt(0)+e.charCodeAt(o)){case 226:e=a.replace(k,"tb");break;case 232:e=a.replace(k,"tb-rl");break;case 220:e=a.replace(k,"lr");break;default:return a}return"-webkit-"+a+"-ms-"+e+a;case 1017:if(-1===a.indexOf("sticky",9))break;case 975:switch(o=(a=e).length-10,t=(e=(33===a.charCodeAt(o)?a.substring(0,o):a).substring(e.indexOf(":",7)+1).trim()).charCodeAt(0)+(0|e.charCodeAt(7))){case 203:if(111>e.charCodeAt(8))break;case 115:a=a.replace(e,"-webkit-"+e)+";"+a;break;case 207:case 102:a=a.replace(e,"-webkit-"+(102<t?"inline-":"")+"box")+";"+a.replace(e,"-webkit-"+e)+";"+a.replace(e,"-ms-"+e+"box")+";"+a}return a+";";case 938:if(45===a.charCodeAt(5))switch(a.charCodeAt(6)){case 105:return"-webkit-"+a+"-webkit-box-"+(e=a.replace("-items",""))+"-ms-flex-"+e+a;case 115:return"-webkit-"+a+"-ms-flex-item-"+a.replace(x,"")+a;default:return"-webkit-"+a+"-ms-flex-line-pack"+a.replace("align-content","")+a}break;case 953:if(0<(o=a.indexOf("-content",9))&&109===a.charCodeAt(o-3)&&45!==a.charCodeAt(o-4))return"width:-webkit-"+(e=a.substring(o-3))+"width:-moz-"+e+"width:"+e;break;case 962:if(a="-webkit-"+a+(102===a.charCodeAt(5)?"-ms-"+a:"")+a,211===n+r&&105===a.charCodeAt(13)&&0<a.indexOf("transform",10))return a.substring(0,a.indexOf(";",27)+1).replace(d,"$1-webkit-$2")+a}return a}function i(e,t){var n=e.indexOf(1===t?":":"{"),r=e.substring(0,3!==t?n:10);return n=e.substring(n+1,e.length-1),G(2!==t?r:r.replace(D,"$1"),n,t)}function a(e,t){var n=o(t,t.charCodeAt(0),t.charCodeAt(1),t.charCodeAt(2));return n!==t+";"?n.replace(A," or ($1)").substring(4):"("+t+")"}function s(e,t,n,r,o,i,a,s,u){for(var l,h=0,f=t;h<z;++h)switch(l=q[h].call(c,e,f,n,r,o,i,a,s,u)){case void 0:case!1:case!0:case null:break;default:f=l}switch(f){case void 0:case!1:case!0:case null:case t:break;default:return f}}function u(e){for(var t in e){var n=e[t];switch(t){case"keyframe":Y=0|n;break;case"global":V=0|n;break;case"cascade":j=0|n;break;case"compress":W=0|n;break;case"semicolon":B=0|n;break;case"preserve":H=0|n;break;case"prefix":G=null,n?"function"!=typeof n?U=1:(U=2,G=n):U=0}}return u}function c(t,r){if(void 0!==this&&this.constructor===c)return e(t);var u=t,f=u.charCodeAt(0);if(33>f&&(f=(u=u.trim()).charCodeAt(0)),0<Y&&(X=u.replace(w,91===f?"":"-")),f=1,1===j?J=u:$=u,u=[J],0<z){var p=s(-1,r,u,u,M,L,0,0,0);void 0!==p&&"string"==typeof p&&(r=p)}var d=function e(t,r,u,c,f){for(var p,d,v,y,g=0,_=0,b=0,w=0,S=0,O=0,P=0,N=0,k=0,A=0,x=0,D=0,W=d=0,q=0,G=0,Z=u.length,ee=Z-1,te="",ne="",re="",oe="";D<Z;){if(v=u.charCodeAt(D),D===ee&&0!==_+w+b+g&&(0!==_&&(v=47===_?10:47),w=b=g=0,Z++,ee++),0===_+w+b+g){if(D===ee&&(0<d&&(te=te.replace(h,"")),0<te.trim().length)){switch(v){case 32:case 9:case 59:case 13:case 10:break;default:te+=u.charAt(D)}v=59}if(1===W)switch(v){case 123:case 125:case 59:case 34:case 39:case 40:case 41:case 44:W=0;case 9:case 13:case 10:case 32:break;default:for(W=0,G=D,p=v,D--,v=59;G<Z;)switch(u.charCodeAt(++G)){case 10:case 13:case 59:D++,v=p;case 58:case 123:G=Z}}switch(v){case 123:for(p=(te=te.trim()).charCodeAt(0),N=1,G=++D;D<Z;){switch(v=u.charCodeAt(D)){case 123:N++;break;case 125:N--}if(0===N)break;D++}switch(A=u.substring(G,D),0===p&&(p=(te=te.replace(l,"").trim()).charCodeAt(0)),p){case 64:switch(0<d&&(te=te.replace(h,"")),d=te.charCodeAt(1)){case 100:case 109:case 115:case 45:p=r;break;default:p=K}if(G=(A=e(r,p,A,d,f+1)).length,0<H&&0===G&&(G=te.length),0<z&&(y=s(3,A,p=n(K,te,q),r,M,L,G,d,f),te=p.join(""),void 0!==y&&0===(G=(A=y.trim()).length)&&(d=0,A="")),0<G)switch(d){case 115:te=te.replace(R,a);case 100:case 109:case 45:A=te+"{"+A+"}";break;case 107:A=(te=te.replace(E,"$1 $2"+(0<Y?X:"")))+"{"+A+"}",A=1===U||2===U&&i("@"+A,3)?"@-webkit-"+A+"@"+A:"@"+A;break;default:A=te+A,112===c&&(ne+=A,A="")}else A="";break;default:A=e(r,n(r,te,q),A,c,f+1)}re+=A,A=q=d=x=W=k=0,te="",v=u.charCodeAt(++D);break;case 125:case 59:if(1<(G=(te=(0<d?te.replace(h,""):te).trim()).length))switch(0===x&&(p=te.charCodeAt(0),45===p||96<p&&123>p)&&(G=(te=te.replace(" ",":")).length),0<z&&void 0!==(y=s(1,te,r,t,M,L,ne.length,c,f))&&0===(G=(te=y.trim()).length)&&(te="\0\0"),p=te.charCodeAt(0),d=te.charCodeAt(1),p+d){case 0:break;case 169:case 163:oe+=te+u.charAt(D);break;default:58!==te.charCodeAt(G-1)&&(ne+=o(te,p,d,te.charCodeAt(2)))}q=d=x=W=k=0,te="",v=u.charCodeAt(++D)}}switch(v){case 13:case 10:if(0===_+w+b+g+B)switch(P){case 41:case 39:case 34:case 64:case 126:case 62:case 42:case 43:case 47:case 45:case 58:case 44:case 59:case 123:case 125:break;default:0<x&&(W=1)}47===_?_=0:0===j+k&&(d=1,te+="\0"),0<z*Q&&s(0,te,r,t,M,L,ne.length,c,f),L=1,M++;break;case 59:case 125:if(0===_+w+b+g){L++;break}default:switch(L++,p=u.charAt(D),v){case 9:case 32:if(0===w+g+_)switch(S){case 44:case 58:case 9:case 32:p="";break;default:32!==v&&(p=" ")}break;case 0:p="\\0";break;case 12:p="\\f";break;case 11:p="\\v";break;case 38:0===w+_+g&&0<j&&(d=q=1,p="\f"+p);break;case 108:if(0===w+_+g+F&&0<x)switch(D-x){case 2:112===S&&58===u.charCodeAt(D-3)&&(F=S);case 8:111===O&&(F=O)}break;case 58:0===w+_+g&&(x=D);break;case 44:0===_+b+w+g&&(d=1,p+="\r");break;case 34:case 39:0===_&&(w=w===v?0:0===w?v:w);break;case 91:0===w+_+b&&g++;break;case 93:0===w+_+b&&g--;break;case 41:0===w+_+g&&b--;break;case 40:if(0===w+_+g){if(0===k)switch(2*S+3*O){case 533:break;default:N=0,k=1}b++}break;case 64:0===_+b+w+g+x+A&&(A=1);break;case 42:case 47:if(!(0<w+g+b))switch(_){case 0:switch(2*v+3*u.charCodeAt(D+1)){case 235:_=47;break;case 220:G=D,_=42}break;case 42:47===v&&42===S&&(33===u.charCodeAt(G+2)&&(ne+=u.substring(G,D+1)),p="",_=0)}}if(0===_){if(0===j+w+g+A&&107!==c&&59!==v)switch(v){case 44:case 126:case 62:case 43:case 41:case 40:if(0===k){switch(S){case 9:case 32:case 10:case 13:p+="\0";break;default:p="\0"+p+(44===v?"":"\0")}d=1}else switch(v){case 40:k=++N;break;case 41:0==(k=--N)&&(d=1,p+="\0")}break;case 9:case 32:switch(S){case 0:case 123:case 125:case 59:case 44:case 12:case 9:case 32:case 10:case 13:break;default:0===k&&(d=1,p+="\0")}}te+=p,32!==v&&9!==v&&(P=v)}}O=S,S=v,D++}if(G=ne.length,0<H&&0===G&&0===re.length&&0===r[0].length==0&&(109!==c||1===r.length&&(0<j?$:J)===r[0])&&(G=r.join(",").length+2),0<G){if(0===j&&107!==c){for(u=0,g=r.length,_=Array(g);u<g;++u){for(O="",P=0,Z=(S=r[u].split(m)).length;P<Z;++P)if(!(0===(N=(w=S[P]).length)&&1<Z)){if(D=O.charCodeAt(O.length-1),q=w.charCodeAt(0),b="",0!==P)switch(D){case 42:case 126:case 62:case 43:case 32:case 40:break;default:b=" "}switch(q){case 38:w=b+$;case 126:case 62:case 43:case 32:case 41:case 40:break;case 91:w=b+w+$;break;case 58:switch(2*w.charCodeAt(1)+3*w.charCodeAt(2)){case 530:if(0<V){w=b+w.substring(8,N-1);break}default:(1>P||1>S[P-1].length)&&(w=b+$+w)}break;case 44:b="";default:w=1<N&&0<w.indexOf(":")?b+w.replace(I,"$1"+$+"$2"):b+w+$}O+=w}_[u]=O.replace(h,"").trim()}r=_}if(p=r,0<z&&void 0!==(y=s(2,ne,p,t,M,L,G,c,f))&&0===(ne=y).length)return oe+ne+re;if(ne=p.join(",")+"{"+ne+"}",0!=U*F){switch(2!==U||i(ne,2)||(F=0),F){case 111:ne=ne.replace(T,":-moz-$1")+ne;break;case 112:ne=ne.replace(C,"::-webkit-input-$1")+ne.replace(C,"::-moz-$1")+ne.replace(C,":-ms-input-$1")+ne}F=0}}return oe+ne+re}(K,u,r,0,0);return 0<z&&void 0!==(p=s(-2,d,u,u,M,L,d.length,0,0))&&"string"!=typeof(d=p)&&(f=0),$=J=X="",F=0,L=M=1,0==W*f?d:d.replace(h,"").replace(S,"").replace(O,"$1").replace(P,"$1").replace(N," ")}var l=/^\0+/g,h=/[\0\r\f]/g,f=/: */g,p=/zoo|gra/,d=/([,: ])(transform)/g,v=/,+\s*(?![^(]*[)])/g,y=/ +\s*(?![^(]*[)])/g,m=/ *[\0] */g,g=/,\r+?/g,_=/([\t\r\n ])*\f?&/g,b=/:global\(((?:[^\(\)\[\]]*|\[.*\]|\([^\(\)]*\))*)\)/g,w=/\W+/g,E=/@(k\w+)\s*(\S*)\s*/,C=/::(place)/g,T=/:(read-only)/g,S=/\s+(?=[{\];=:>])/g,O=/([[}=:>])\s+/g,P=/(\{[^{]+?);(?=\})/g,N=/\s{2,}/g,I=/([^\(])(:+) */g,k=/[svh]\w+-[tblr]{2}/,R=/\(\s*(.*)\s*\)/g,A=/([^]*?);/g,x=/-self|flex-/g,D=/[^]*?(:[rp][el]a[\w-]+)[^]*/,L=1,M=1,F=0,j=1,U=1,V=1,W=0,B=0,H=0,K=[],q=[],z=0,G=null,Q=0,Y=1,X="",$="",J="";return c.use=function e(t){switch(t){case void 0:case null:z=q.length=0;break;default:switch(t.constructor){case Array:for(var n=0,r=t.length;n<r;++n)e(t[n]);break;case Function:q[z++]=t;break;case Boolean:Q=0|!!t}}return e},c.set=u,void 0!==t&&u(t),c}({keyframe:!1}),v=[],y=d.use;var m=h()(function(e){p.insert(e,w)}),g=function(e){v.push(e),y(null)(v)(m)},_={},b={},w="";function E(e,t){if(null==e)return"";switch(typeof e){case"boolean":return"";case"function":return void 0!==e[s]?"."+e[u]:E.call(this,void 0===this?e():e(this.mergedProps,this.context),t);case"object":return function(e){if(k.has(e))return k.get(e);var t="";Array.isArray(e)?e.forEach(function(e){t+=E.call(this,e,!1)},this):Object.keys(e).forEach(function(n){"object"!=typeof e[n]?void 0!==_[e[n]]?t+=n+"{"+_[e[n]]+"}":t+=N(n)+":"+I(n,e[n])+";":t+=n+"{"+E.call(this,e[n],!1)+"}"},this);return k.set(e,t),t}.call(this,e);default:var n=_[e];return!1===t&&void 0!==n?n:e}}d.use(m);var C,T,S,O,P=/[A-Z]|^ms/g,N=(C=function(e){return e.replace(P,"-$&").toLowerCase()},T={},function(e){return void 0===T[e]&&(T[e]=C(e)),T[e]}),I=function(e,t){return void 0===t||null===t||"boolean"==typeof t?"":1===c[e]||45===e.charCodeAt(1)||isNaN(t)||0===t?t:t+"px"},k=new WeakMap;var R=/label:\s*([^\s;\n]+)\s*[;\n]/g;function A(e){var t=!0,n="",o="";null==e||void 0===e.raw?(t=!1,n=E.call(this,e,!1)):n=e[0];for(var i=arguments.length,a=new Array(i>1?i-1:0),s=1;s<i;s++)a[s-1]=arguments[s];return a.forEach(function(r,o){var i;n+=E.call(this,r,46===(i=n).charCodeAt(i.length-1)),!0===t&&void 0!==e[o+1]&&(n+=e[o+1])},this),n=n.replace(R,function(e,t){return o+="-"+t,""}),S=r(n+o),O=S+o,n}function x(){var e=A.apply(this,arguments),t="css-"+O;return void 0===_[t]&&(_[t]=e),void 0===b[S]&&(d("."+t,e),b[S]=!0),t}function D(){var e=A.apply(this,arguments),t="animation-"+O;return void 0===b[S]&&(d("","@keyframes "+t+"{"+e+"}"),b[S]=!0),t}function L(){var e=A.apply(this,arguments);void 0===b[S]&&(d("",e),b[S]=!0)}function M(){var e=A.apply(void 0,arguments);void 0===b[S]&&(d("","@font-face{"+e+"}"),b[S]=!0)}function F(e,t){var n="";return t.split(" ").forEach(function(t){void 0!==_[t]?e.push(t):n+=t+" "}),n}function j(e,t){var n=[],r=F(n,e);return n.length<2?e:r+x(n,t)}function U(){return j(function e(){for(var t=arguments.length,n=0,r="";n<t;n++){var o=arguments[n];if(null!=o){var i=r&&r+" "||r;switch(typeof o){case"boolean":break;case"function":r=i+e(o());break;case"object":if(Array.isArray(o))r=i+e.apply(null,o);else for(var a in o)o[a]&&(r&&(r+=" "),r+=a);break;default:r=i+o}}}return r}.apply(void 0,arguments))}function V(e){e.forEach(function(e){b[e]=!0})}function W(){p.flush(),b={},_={},p.inject()}},function(e,t,n){"use strict";n.r(t),n.d(t,"mapProps",function(){return v}),n.d(t,"withProps",function(){return w}),n.d(t,"withPropsOnChange",function(){return C}),n.d(t,"withHandlers",function(){return S}),n.d(t,"defaultProps",function(){return O}),n.d(t,"renameProp",function(){return N}),n.d(t,"renameProps",function(){return k}),n.d(t,"flattenProp",function(){return R}),n.d(t,"withState",function(){return A}),n.d(t,"withStateHandlers",function(){return x}),n.d(t,"withReducer",function(){return D}),n.d(t,"branch",function(){return M}),n.d(t,"renderComponent",function(){return F}),n.d(t,"renderNothing",function(){return U}),n.d(t,"shouldUpdate",function(){return V}),n.d(t,"pure",function(){return W}),n.d(t,"onlyUpdateForKeys",function(){return B}),n.d(t,"onlyUpdateForPropTypes",function(){return H}),n.d(t,"withContext",function(){return K}),n.d(t,"getContext",function(){return q}),n.d(t,"lifecycle",function(){return z}),n.d(t,"toClass",function(){return Q}),n.d(t,"setStatic",function(){return h}),n.d(t,"setPropTypes",function(){return Y}),n.d(t,"setDisplayName",function(){return f}),n.d(t,"compose",function(){return X}),n.d(t,"getDisplayName",function(){return p}),n.d(t,"wrapDisplayName",function(){return d}),n.d(t,"isClassComponent",function(){return G}),n.d(t,"createSink",function(){return $}),n.d(t,"componentFromProp",function(){return J}),n.d(t,"nest",function(){return Z}),n.d(t,"hoistStatics",function(){return ee}),n.d(t,"componentFromStream",function(){return ie}),n.d(t,"componentFromStreamWithConfig",function(){return oe}),n.d(t,"mapPropsStream",function(){return ue}),n.d(t,"mapPropsStreamWithConfig",function(){return se}),n.d(t,"createEventHandler",function(){return le}),n.d(t,"createEventHandlerWithConfig",function(){return ce}),n.d(t,"setObservableConfig",function(){return ne});var r=n(2),o=n.n(r),i=n(17),a=n.n(i);n.d(t,"shallowEqual",function(){return a.a});var s=n(31),u=n.n(s),c=n(46),l=n(32),h=function(e,t){return function(n){return n[e]=t,n}},f=function(e){return h("displayName",e)},p=function(e){return"string"==typeof e?e:e?e.displayName||e.name||"Component":void 0},d=function(e,t){return t+"("+p(e)+")"},v=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(e(t))}}},y=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},_=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},b=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},w=function(e){return v(function(t){return m({},t,"function"==typeof e?e(t):e)})},E=function(e,t){for(var n={},r=0;r<t.length;r++){var o=t[r];e.hasOwnProperty(o)&&(n[o]=e[o])}return n},C=function(e,t){return function(n){var o=Object(r.createFactory)(n),i="function"==typeof e?e:function(t,n){return!a()(E(t,e),E(n,e))};return function(e){function n(){var r,o;y(this,n);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return r=o=b(this,e.call.apply(e,[this].concat(a))),o.computedProps=t(o.props),b(o,r)}return g(n,e),n.prototype.componentWillReceiveProps=function(e){i(this.props,e)&&(this.computedProps=t(e))},n.prototype.render=function(){return o(m({},this.props,this.computedProps))},n}(r.Component)}},T=function(e,t){var n={};for(var r in e)e.hasOwnProperty(r)&&(n[r]=t(e[r],r));return n},S=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return n=r=b(this,e.call.apply(e,[this].concat(a))),i.call(r),b(r,n)}return g(t,e),t.prototype.componentWillReceiveProps=function(){this.cachedHandlers={}},t.prototype.render=function(){return n(m({},this.props,this.handlers))},t}(r.Component),i=function(){var t=this;this.cachedHandlers={},this.handlers=T("function"==typeof e?e(this.props):e,function(e,n){return function(){var r=t.cachedHandlers[n];if(r)return r.apply(void 0,arguments);var o=e(t.props);return t.cachedHandlers[n]=o,o.apply(void 0,arguments)}})};return o}},O=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e){return n(e)};return o.defaultProps=e,o}},P=function(e,t){for(var n=_(e,[]),r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&delete n[o]}return n},N=function(e,t){return v(function(n){var r;return m({},P(n,[e]),((r={})[t]=n[e],r))})},I=Object.keys,k=function(e){return v(function(t){return m({},P(t,I(e)),(n=E(t,I(e)),r=function(t,n){return e[n]},I(n).reduce(function(e,t){var o=n[t];return e[r(o,t)]=o,e},{})));var n,r})},R=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){return n(m({},t,t[e]))}}},A=function(e,t,n){return function(o){var i=Object(r.createFactory)(o);return function(r){function o(){var e,t;y(this,o);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return e=t=b(this,r.call.apply(r,[this].concat(a))),t.state={stateValue:"function"==typeof n?n(t.props):n},t.updateStateValue=function(e,n){return t.setState(function(t){var n=t.stateValue;return{stateValue:"function"==typeof e?e(n):e}},n)},b(t,e)}return g(o,r),o.prototype.render=function(){var n;return i(m({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.updateStateValue,n)))},o}(r.Component)}},x=function(e,t){return function(n){var o=Object(r.createFactory)(n),i=function(e){function t(){var n,r;y(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=b(this,e.call.apply(e,[this].concat(i))),s.call(r),b(r,n)}return g(t,e),t.prototype.shouldComponentUpdate=function(e,t){var n=e!==this.props,r=!a()(t,this.state);return n||r},t.prototype.render=function(){return o(m({},this.props,this.state,this.stateUpdaters))},t}(r.Component),s=function(){var n=this;this.state="function"==typeof e?e(this.props):e,this.stateUpdaters=T(t,function(e){return function(t){for(var r=arguments.length,o=Array(r>1?r-1:0),i=1;i<r;i++)o[i-1]=arguments[i];t&&"function"==typeof t.persist&&t.persist(),n.setState(function(n,r){return e(n,r).apply(void 0,[t].concat(o))})}})};return i}},D=function(e,t,n,o){return function(i){var a=Object(r.createFactory)(i);return function(r){function i(){var e,t;y(this,i);for(var o=arguments.length,a=Array(o),s=0;s<o;s++)a[s]=arguments[s];return e=t=b(this,r.call.apply(r,[this].concat(a))),t.state={stateValue:t.initializeStateValue()},t.dispatch=function(e){return t.setState(function(t){var r=t.stateValue;return{stateValue:n(r,e)}})},b(t,e)}return g(i,r),i.prototype.initializeStateValue=function(){return void 0!==o?"function"==typeof o?o(this.props):o:n(void 0,{type:"@@recompose/INIT"})},i.prototype.render=function(){var n;return a(m({},this.props,((n={})[e]=this.state.stateValue,n[t]=this.dispatch,n)))},i}(r.Component)}},L=function(e){return e},M=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:L;return function(o){var i=void 0,a=void 0;return function(s){return e(s)?(i=i||Object(r.createFactory)(t(o)))(s):(a=a||Object(r.createFactory)(n(o)))(s)}}},F=function(e){return function(t){var n=Object(r.createFactory)(e);return function(e){return n(e)}}},j=function(e){function t(){return y(this,t),b(this,e.apply(this,arguments))}return g(t,e),t.prototype.render=function(){return null},t}(r.Component),U=function(e){return j},V=function(e){return function(t){var n=Object(r.createFactory)(t);return function(t){function r(){return y(this,r),b(this,t.apply(this,arguments))}return g(r,t),r.prototype.shouldComponentUpdate=function(t){return e(this.props,t)},r.prototype.render=function(){return n(this.props)},r}(r.Component)}},W=function(e){return V(function(e,t){return!a()(e,t)})(e)},B=function(e){return V(function(t,n){return!a()(E(n,e),E(t,e))})},H=function(e){var t=e.propTypes;var n=Object.keys(t||{});return B(n)(e)},K=function(e,t){return function(n){var o=Object(r.createFactory)(n),i=function(e){function n(){var r,o;y(this,n);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return r=o=b(this,e.call.apply(e,[this].concat(a))),o.getChildContext=function(){return t(o.props)},b(o,r)}return g(n,e),n.prototype.render=function(){return o(this.props)},n}(r.Component);return i.childContextTypes=e,i}},q=function(e){return function(t){var n=Object(r.createFactory)(t),o=function(e,t){return n(m({},e,t))};return o.contextTypes=e,o}},z=function(e){return function(t){var n=Object(r.createFactory)(t);var o=function(e){function t(){return y(this,t),b(this,e.apply(this,arguments))}return g(t,e),t.prototype.render=function(){return n(m({},this.props,this.state))},t}(r.Component);return Object.keys(e).forEach(function(t){return o.prototype[t]=e[t]}),o}},G=function(e){return Boolean(e&&e.prototype&&"function"==typeof e.prototype.render)},Q=function(e){if(G(e))return e;var t=function(t){function n(){return y(this,n),b(this,t.apply(this,arguments))}return g(n,t),n.prototype.render=function(){return"string"==typeof e?o.a.createElement(e,this.props):e(this.props,this.context)},n}(r.Component);return t.displayName=p(e),t.propTypes=e.propTypes,t.contextTypes=e.contextTypes,t.defaultProps=e.defaultProps,t},Y=function(e){return h("propTypes",e)};function X(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var $=function(e){return function(t){function n(){return y(this,n),b(this,t.apply(this,arguments))}return g(n,t),n.prototype.componentWillMount=function(){e(this.props)},n.prototype.componentWillReceiveProps=function(t){e(t)},n.prototype.render=function(){return null},n}(r.Component)},J=function(e){var t=function(t){return Object(r.createElement)(t[e],P(t,[e]))};return t.displayName="componentFromProp("+e+")",t},Z=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var o=t.map(r.createFactory);return function(e){var t=_(e,[]),n=e.children;return o.reduceRight(function(e,n){return n(t,e)},n)}},ee=function(e){return function(t){var n=e(t);return u()(n,t),n}},te={fromESObservable:null,toESObservable:null},ne=function(e){te=e},re={fromESObservable:function(e){return"function"==typeof te.fromESObservable?te.fromESObservable(e):e},toESObservable:function(e){return"function"==typeof te.toESObservable?te.toESObservable(e):e}},oe=function(e){return function(t){return function(n){function r(){var o,i,a;y(this,r);for(var s=arguments.length,u=Array(s),h=0;h<s;h++)u[h]=arguments[h];return i=a=b(this,n.call.apply(n,[this].concat(u))),a.state={vdom:null},a.propsEmitter=Object(c.createChangeEmitter)(),a.props$=e.fromESObservable(((o={subscribe:function(e){return{unsubscribe:a.propsEmitter.listen(function(t){t?e.next(t):e.complete()})}}})[l.a]=function(){return this},o)),a.vdom$=e.toESObservable(t(a.props$)),b(a,i)}return g(r,n),r.prototype.componentWillMount=function(){var e=this;this.subscription=this.vdom$.subscribe({next:function(t){e.setState({vdom:t})}}),this.propsEmitter.emit(this.props)},r.prototype.componentWillReceiveProps=function(e){this.propsEmitter.emit(e)},r.prototype.shouldComponentUpdate=function(e,t){return t.vdom!==this.state.vdom},r.prototype.componentWillUnmount=function(){this.propsEmitter.emit(),this.subscription.unsubscribe()},r.prototype.render=function(){return this.state.vdom},r}(r.Component)}},ie=function(e){return oe(re)(e)},ae=function(e){return e},se=function(e){var t=oe({fromESObservable:ae,toESObservable:ae});return function(n){return function(o){var i=Object(r.createFactory)(o),a=e.fromESObservable,s=e.toESObservable;return t(function(e){var t;return(t={subscribe:function(t){var r=s(n(a(e))).subscribe({next:function(e){return t.next(i(e))}});return{unsubscribe:function(){return r.unsubscribe()}}}})[l.a]=function(){return this},t})}}},ue=function(e){return se(re)(e)},ce=function(e){return function(){var t,n=Object(c.createChangeEmitter)(),r=e.fromESObservable(((t={subscribe:function(e){return{unsubscribe:n.listen(function(t){return e.next(t)})}}})[l.a]=function(){return this},t));return{handler:n.emit,stream:r}}},le=ce(re)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i=n(5),a=n(27),s=n(4),u=n(12),c=n(26);t.setNodeFromJSON=function(e){r=e},t.setMaxNode=function(e){o=e};var l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.getPriority(),r=t.node.getPriority(),o=n.compareTo(r);return 0===o?s.nameCompare(e.name,t.name):o},t.prototype.isDefinedOn=function(e){return!e.getPriority().isEmpty()},t.prototype.indexedValueChanged=function(e,t){return!e.getPriority().equals(t.getPriority())},t.prototype.minPost=function(){return u.NamedNode.MIN},t.prototype.maxPost=function(){return new u.NamedNode(s.MAX_NAME,new c.LeafNode("[PRIORITY-POST]",o))},t.prototype.makePost=function(e,t){var n=r(e);return new u.NamedNode(t,new c.LeafNode("[PRIORITY-POST]",n))},t.prototype.toString=function(){return".priority"},t}(a.Index);t.PriorityIndex=l,t.PRIORITY_INDEX=new l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(5),i=n(1),a=n(4),s=n(25),u=n(12),c=n(68),l=n(10),h=n(21),f=n(66),p=n(26),d=n(64),v=function(){function e(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&c.validatePriorityNode(this.priorityNode_),this.children_.isEmpty()&&i.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(e,"EMPTY_NODE",{get:function(){return r||(r=new e(new s.SortedMap(d.NAME_COMPARATOR),null,f.IndexMap.Default))},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!1},e.prototype.getPriority=function(){return this.priorityNode_||r},e.prototype.updatePriority=function(t){return this.children_.isEmpty()?this:new e(this.children_,t,this.indexMap_)},e.prototype.getImmediateChild=function(e){if(".priority"===e)return this.getPriority();var t=this.children_.get(e);return null===t?r:t},e.prototype.getChild=function(e){var t=e.getFront();return null===t?this:this.getImmediateChild(t).getChild(e.popFront())},e.prototype.hasChild=function(e){return null!==this.children_.get(e)},e.prototype.updateImmediateChild=function(t,n){if(i.assert(n,"We should always be passing snapshot nodes"),".priority"===t)return this.updatePriority(n);var o=new u.NamedNode(t,n),a=void 0,s=void 0;return n.isEmpty()?(a=this.children_.remove(t),s=this.indexMap_.removeFromIndexes(o,this.children_)):(a=this.children_.insert(t,n),s=this.indexMap_.addToIndexes(o,this.children_)),new e(a,a.isEmpty()?r:this.priorityNode_,s)},e.prototype.updateChild=function(e,t){var n=e.getFront();if(null===n)return t;i.assert(".priority"!==e.getFront()||1===e.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(e.popFront(),t);return this.updateImmediateChild(n,r)},e.prototype.isEmpty=function(){return this.children_.isEmpty()},e.prototype.numChildren=function(){return this.children_.count()},e.prototype.val=function(t){if(this.isEmpty())return null;var n={},r=0,o=0,i=!0;if(this.forEachChild(l.PRIORITY_INDEX,function(a,s){n[a]=s.val(t),r++,i&&e.INTEGER_REGEXP_.test(a)?o=Math.max(o,Number(a)):i=!1}),!t&&i&&o<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return t&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.getPriority().isEmpty()||(e+="priority:"+c.priorityHashText(this.getPriority().val())+":"),this.forEachChild(l.PRIORITY_INDEX,function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)}),this.lazyHash_=""===e?"":a.sha1(e)}return this.lazyHash_},e.prototype.getPredecessorChildName=function(e,t,n){var r=this.resolveIndex_(n);if(r){var o=r.getPredecessorKey(new u.NamedNode(e,t));return o?o.name:null}return this.children_.getPredecessorKey(e)},e.prototype.getFirstChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.minKey();return n&&n.name}return this.children_.minKey()},e.prototype.getFirstChild=function(e){var t=this.getFirstChildName(e);return t?new u.NamedNode(t,this.children_.get(t)):null},e.prototype.getLastChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.maxKey();return n&&n.name}return this.children_.maxKey()},e.prototype.getLastChild=function(e){var t=this.getLastChildName(e);return t?new u.NamedNode(t,this.children_.get(t)):null},e.prototype.forEachChild=function(e,t){var n=this.resolveIndex_(e);return n?n.inorderTraversal(function(e){return t(e.name,e.node)}):this.children_.inorderTraversal(t)},e.prototype.getIterator=function(e){return this.getIteratorFrom(e.minPost(),e)},e.prototype.getIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,function(e){return e});for(var r=this.children_.getIteratorFrom(e.name,u.NamedNode.Wrap),o=r.peek();null!=o&&t.compare(o,e)<0;)r.getNext(),o=r.peek();return r},e.prototype.getReverseIterator=function(e){return this.getReverseIteratorFrom(e.maxPost(),e)},e.prototype.getReverseIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,function(e){return e});for(var r=this.children_.getReverseIteratorFrom(e.name,u.NamedNode.Wrap),o=r.peek();null!=o&&t.compare(o,e)>0;)r.getNext(),o=r.peek();return r},e.prototype.compareTo=function(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===t.MAX_NODE?-1:0},e.prototype.withIndex=function(t){if(t===h.KEY_INDEX||this.indexMap_.hasIndex(t))return this;var n=this.indexMap_.addIndex(t,this.children_);return new e(this.children_,this.priorityNode_,n)},e.prototype.isIndexed=function(e){return e===h.KEY_INDEX||this.indexMap_.hasIndex(e)},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode())return!1;var t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){for(var n=this.getIterator(l.PRIORITY_INDEX),r=t.getIterator(l.PRIORITY_INDEX),o=n.getNext(),i=r.getNext();o&&i;){if(o.name!==i.name||!o.node.equals(i.node))return!1;o=n.getNext(),i=r.getNext()}return null===o&&null===i}return!1}return!1},e.prototype.resolveIndex_=function(e){return e===h.KEY_INDEX?null:this.indexMap_.get(e.toString())},e.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,e}();t.ChildrenNode=v;var y=function(e){function t(){return e.call(this,new s.SortedMap(d.NAME_COMPARATOR),v.EMPTY_NODE,f.IndexMap.Default)||this}return o.__extends(t,e),t.prototype.compareTo=function(e){return e===this?0:1},t.prototype.equals=function(e){return e===this},t.prototype.getPriority=function(){return this},t.prototype.getImmediateChild=function(e){return v.EMPTY_NODE},t.prototype.isEmpty=function(){return!1},t}(v);t.MaxNode=y,t.MAX_NODE=new y,Object.defineProperties(u.NamedNode,{MIN:{value:new u.NamedNode(a.MIN_NAME,v.EMPTY_NODE)},MAX:{value:new u.NamedNode(a.MAX_NAME,t.MAX_NODE)}}),h.KeyIndex.__EMPTY_NODE=v.EMPTY_NODE,p.LeafNode.__childrenNodeConstructor=v,c.setMaxNode(t.MAX_NODE),l.setMaxNode(t.MAX_NODE)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.name=e,this.node=t}return e.Wrap=function(t,n){return new e(t,n)},e}();t.NamedNode=r},function(e,t,n){"use strict";n.r(t);var r=n(1),o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i="[DEFAULT]",a=[],s=function(){function e(e,t,n){this.firebase_=n,this.isDeleted_=!1,this.services_={},this.name_=t,this.options_=Object(r.deepCopy)(e),this.INTERNAL={getUid:function(){return null},getToken:function(){return Promise.resolve(null)},addAuthTokenListener:function(e){a.push(e),setTimeout(function(){return e(null)},0)},removeAuthTokenListener:function(e){a=a.filter(function(t){return t!==e})}}}return Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise(function(t){e.checkDestroyed_(),t()}).then(function(){e.firebase_.INTERNAL.removeApp(e.name_);var t=[];return Object.keys(e.services_).forEach(function(n){Object.keys(e.services_[n]).forEach(function(r){t.push(e.services_[n][r])})}),Promise.all(t.map(function(e){return e.INTERNAL.delete()}))}).then(function(){e.isDeleted_=!0,e.services_={}})},e.prototype._getService=function(e,t){if(void 0===t&&(t=i),this.checkDestroyed_(),this.services_[e]||(this.services_[e]={}),!this.services_[e][t]){var n=t!==i?t:void 0,r=this.firebase_.INTERNAL.factories[e](this,this.extendApp.bind(this),n);this.services_[e][t]=r}return this.services_[e][t]},e.prototype.extendApp=function(e){var t=this;Object(r.deepExtend)(this,e),e.INTERNAL&&e.INTERNAL.addAuthTokenListener&&(a.forEach(function(e){t.INTERNAL.addAuthTokenListener(e)}),a=[])},e.prototype.checkDestroyed_=function(){this.isDeleted_&&u("app-deleted",{name:this.name_})},e}();function u(e,t){throw c.create(e,t)}s.prototype.name&&s.prototype.options||s.prototype.delete||console.log("dc");var c=new r.ErrorFactory("app","Firebase",{"no-app":"No Firebase App '{$name}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$name}","duplicate-app":"Firebase App named '{$name}' already exists","app-deleted":"Firebase App named '{$name}' already deleted","duplicate-service":"Firebase service named '{$name}' already registered","sa-not-supported":"Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain","invalid-app-argument":"firebase.{$name}() takes either no argument or a Firebase App instance."});n.d(t,"firebase",function(){return l});var l=function e(){var t={},n={},a={},c={__esModule:!0,initializeApp:function(e,n){void 0===n?n=i:"string"==typeof n&&""!==n||u("bad-app-name",{name:n+""}),o(t,n)&&u("duplicate-app",{name:n});var r=new s(e,n,c);return t[n]=r,f(r,"create"),r},app:l,apps:null,Promise:Promise,SDK_VERSION:"4.10.1",INTERNAL:{registerService:function(e,t,o,i,f){n[e]&&u("duplicate-service",{name:e}),n[e]=t,i&&(a[e]=i,h().forEach(function(e){i("create",e)}));var p=function(t){return void 0===t&&(t=l()),"function"!=typeof t[e]&&u("invalid-app-argument",{name:e}),t[e]()};return void 0!==o&&Object(r.deepExtend)(p,o),c[e]=p,s.prototype[e]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return this._getService.bind(this,e).apply(this,f?t:[])},p},createFirebaseNamespace:e,extendNamespace:function(e){Object(r.deepExtend)(c,e)},createSubscribe:r.createSubscribe,ErrorFactory:r.ErrorFactory,removeApp:function(e){f(t[e],"delete"),delete t[e]},factories:n,useAsService:p,Promise:Promise,deepExtend:r.deepExtend}};function l(e){return o(t,e=e||i)||u("no-app",{name:e}),t[e]}function h(){return Object.keys(t).map(function(e){return t[e]})}function f(e,t){Object.keys(n).forEach(function(n){var r=p(e,n);null!==r&&a[r]&&a[r](t,e)})}function p(e,t){if("serverAuth"===t)return null;var n=t;return e.options,n}return Object(r.patchProperty)(c,"default",c),Object.defineProperty(c,"apps",{get:h}),Object(r.patchProperty)(l,"App",s),c}();t.default=l},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1);!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(t.OperationType||(t.OperationType={}));var o=function(){function e(e,t,n,o){this.fromUser=e,this.fromServer=t,this.queryId=n,this.tagged=o,r.assert(!o||t,"Tagged queries must be from server.")}return e.User=new e(!0,!1,null,!1),e.Server=new e(!1,!0,null,!1),e.forServerTaggedQuery=function(t){return new e(!1,!0,t,!0)},e}();t.OperationSource=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(1),i=n(4),a=n(1),s=n(1);t.INVALID_KEY_REGEX_=/[\[\].#$\/\u0000-\u001F\u007F]/,t.INVALID_PATH_REGEX_=/[\[\].#$\u0000-\u001F\u007F]/,t.MAX_LEAF_SIZE_=10485760,t.isValidKey=function(e){return"string"==typeof e&&0!==e.length&&!t.INVALID_KEY_REGEX_.test(e)},t.isValidPathString=function(e){return"string"==typeof e&&0!==e.length&&!t.INVALID_PATH_REGEX_.test(e)},t.isValidRootPathString=function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),t.isValidPathString(e)},t.isValidPriority=function(e){return null===e||"string"==typeof e||"number"==typeof e&&!i.isInvalidJSONNumber(e)||e&&"object"==typeof e&&o.contains(e,".sv")},t.validateFirebaseDataArg=function(e,n,r,o,i){i&&void 0===r||t.validateFirebaseData(a.errorPrefix(e,n,i),r,o)},t.validateFirebaseData=function(e,n,a){var u=a instanceof r.Path?new r.ValidationPath(a,e):a;if(void 0===n)throw new Error(e+"contains undefined "+u.toErrorString());if("function"==typeof n)throw new Error(e+"contains a function "+u.toErrorString()+" with contents = "+n.toString());if(i.isInvalidJSONNumber(n))throw new Error(e+"contains "+n.toString()+" "+u.toErrorString());if("string"==typeof n&&n.length>t.MAX_LEAF_SIZE_/3&&s.stringLength(n)>t.MAX_LEAF_SIZE_)throw new Error(e+"contains a string greater than "+t.MAX_LEAF_SIZE_+" utf8 bytes "+u.toErrorString()+" ('"+n.substring(0,50)+"...')");if(n&&"object"==typeof n){var c=!1,l=!1;if(o.forEach(n,function(n,r){if(".value"===n)c=!0;else if(".priority"!==n&&".sv"!==n&&(l=!0,!t.isValidKey(n)))throw new Error(e+" contains an invalid key ("+n+") "+u.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');u.push(n),t.validateFirebaseData(e,r,u),u.pop()}),c&&l)throw new Error(e+' contains ".value" child '+u.toErrorString()+" in addition to actual children.")}},t.validateFirebaseMergePaths=function(e,n){var o,i;for(o=0;o<n.length;o++)for(var a=(i=n[o]).slice(),s=0;s<a.length;s++)if(".priority"===a[s]&&s===a.length-1);else if(!t.isValidKey(a[s]))throw new Error(e+"contains an invalid key ("+a[s]+") in path "+i.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');n.sort(r.Path.comparePaths);var u=null;for(o=0;o<n.length;o++){if(i=n[o],null!==u&&u.contains(i))throw new Error(e+"contains a path "+u.toString()+" that is ancestor of another path "+i.toString());u=i}},t.validateFirebaseMergeDataArg=function(e,n,i,s,u){if(!u||void 0!==i){var c=a.errorPrefix(e,n,u);if(!i||"object"!=typeof i||Array.isArray(i))throw new Error(c+" must be an object containing the children to replace.");var l=[];o.forEach(i,function(e,n){var o=new r.Path(e);if(t.validateFirebaseData(c,n,s.child(o)),".priority"===o.getBack()&&!t.isValidPriority(n))throw new Error(c+"contains an invalid value for '"+o.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");l.push(o)}),t.validateFirebaseMergePaths(c,l)}},t.validatePriority=function(e,n,r,o){if(!o||void 0!==r){if(i.isInvalidJSONNumber(r))throw new Error(a.errorPrefix(e,n,o)+"is "+r.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!t.isValidPriority(r))throw new Error(a.errorPrefix(e,n,o)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},t.validateEventType=function(e,t,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(a.errorPrefix(e,t,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},t.validateKey=function(e,n,r,o){if(!(o&&void 0===r||t.isValidKey(r)))throw new Error(a.errorPrefix(e,n,o)+'was an invalid key = "'+r+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},t.validatePathString=function(e,n,r,o){if(!(o&&void 0===r||t.isValidPathString(r)))throw new Error(a.errorPrefix(e,n,o)+'was an invalid path = "'+r+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},t.validateRootPathString=function(e,n,r,o){r&&(r=r.replace(/^\/*\.info(\/|$)/,"/")),t.validatePathString(e,n,r,o)},t.validateWritablePath=function(e,t){if(".info"===t.getFront())throw new Error(e+" failed = Can't modify data under /.info/")},t.validateUrl=function(e,n,r){var o=r.path.toString();if("string"!=typeof r.repoInfo.host||0===r.repoInfo.host.length||!t.isValidKey(r.repoInfo.namespace)&&"localhost"!==r.repoInfo.host.split(":")[0]||0!==o.length&&!t.isValidRootPathString(o))throw new Error(a.errorPrefix(e,n,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},t.validateCredential=function(e,t,n,r){if((!r||void 0!==n)&&"string"!=typeof n)throw new Error(a.errorPrefix(e,t,r)+"must be a valid credential (a string).")},t.validateBoolean=function(e,t,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(a.errorPrefix(e,t,r)+"must be a boolean.")},t.validateString=function(e,t,n,r){if((!r||void 0!==n)&&"string"!=typeof n)throw new Error(a.errorPrefix(e,t,r)+"must be a valid string.")},t.validateObject=function(e,t,n,r){if(!(r&&void 0===n||n&&"object"==typeof n&&null!==n))throw new Error(a.errorPrefix(e,t,r)+"must be a valid object.")},t.validateObjectContainsKey=function(e,t,n,r,i,s){if(!(n&&"object"==typeof n&&o.contains(n,r))){if(i)return;throw new Error(a.errorPrefix(e,t,i)+'must contain the key "'+r+'"')}if(s){var u=o.safeGet(n,r);if("number"===s&&"number"!=typeof u||"string"===s&&"string"!=typeof u||"boolean"===s&&"boolean"!=typeof u||"function"===s&&"function"!=typeof u||"object"===s&&"object"!=typeof u&&u)throw i?new Error(a.errorPrefix(e,t,i)+'contains invalid value for key "'+r+'" (must be of type "'+s+'")'):new Error(a.errorPrefix(e,t,i)+'must contain the key "'+r+'" with type "'+s+'"')}}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n,r,o){this.type=e,this.snapshotNode=t,this.childName=n,this.oldSnap=r,this.prevName=o}return e.valueChange=function(t){return new e(e.VALUE,t)},e.childAddedChange=function(t,n){return new e(e.CHILD_ADDED,n,t)},e.childRemovedChange=function(t,n){return new e(e.CHILD_REMOVED,n,t)},e.childChangedChange=function(t,n,r){return new e(e.CHILD_CHANGED,n,t,r)},e.childMovedChange=function(t,n){return new e(e.CHILD_MOVED,n,t)},e.CHILD_ADDED="child_added",e.CHILD_REMOVED="child_removed",e.CHILD_CHANGED="child_changed",e.CHILD_MOVED="child_moved",e.VALUE="value",e}();t.Change=r},function(e,t,n){"use strict";n.r(t);var r=n(3),o=n.n(r),i=n(2),a=n.n(i),s=n(0),u=n.n(s),c=n(89),l=n.n(c),h=n(7),f=n.n(h),p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function d(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var v=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=d(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},d(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;f()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);v.propTypes={history:u.a.object.isRequired,children:u.a.node},v.contextTypes={router:u.a.object},v.childContextTypes={router:u.a.object.isRequired};var y=v,m=y;function g(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var _=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=g(this,e.call.apply(e,[this].concat(i))),r.history=l()(r.props),g(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(m,{history:this.history,children:this.props.children})},t}(a.a.Component);_.propTypes={basename:u.a.string,forceRefresh:u.a.bool,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var b=_,w=n(88),E=n.n(w);function C(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=C(this,e.call.apply(e,[this].concat(i))),r.history=E()(r.props),C(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(m,{history:this.history,children:this.props.children})},t}(a.a.Component);T.propTypes={basename:u.a.string,getUserConfirmation:u.a.func,hashType:u.a.oneOf(["hashbang","noslash","slash"]),children:u.a.node};var S=T,O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function P(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var N=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},I=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=P(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!N(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},P(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);f()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return a.a.createElement("a",O({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(a.a.Component);I.propTypes={onClick:u.a.func,target:u.a.string,replace:u.a.bool,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired,innerRef:u.a.oneOfType([u.a.string,u.a.func])},I.defaultProps={replace:!1},I.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired,createHref:u.a.func.isRequired}).isRequired}).isRequired};var k=I,R=n(87),A=n.n(R);function x(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var D=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=x(this,e.call.apply(e,[this].concat(i))),r.history=A()(r.props),x(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(y,{history:this.history,children:this.props.children})},t}(a.a.Component);D.propTypes={initialEntries:u.a.array,initialIndex:u.a.number,getUserConfirmation:u.a.func,keyLength:u.a.number,children:u.a.node};var L=D,M=n(86),F=n.n(M),j={},U=0,V=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,i=n.exact,a=void 0!==i&&i,s=n.strict,u=void 0!==s&&s,c=n.sensitive,l=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=j[n]||(j[n]={});if(r[e])return r[e];var o=[],i={re:F()(e,o,t),keys:o};return U<1e4&&(r[e]=i,U++),i}(o,{end:a,strict:u,sensitive:void 0!==c&&c}),h=l.re,f=l.keys,p=h.exec(e);if(!p)return null;var d=p[0],v=p.slice(1),y=e===d;return a&&!y?null:{path:o,url:"/"===o&&""===d?"/":d,isExact:y,params:f.reduce(function(e,t,n){return e[t.name]=v[n],e},{})}},W=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function B(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var H=function(e){return 0===a.a.Children.count(e)},K=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=B(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},B(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:W({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,s=e.sensitive;if(n)return n;f()(t,"You should not use <Route> or withRouter() outside a <Router>");var u=t.route,c=(r||u.location).pathname;return o?V(c,{path:o,strict:i,exact:a,sensitive:s}):u.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!H(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!H(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,s=i.history,u=i.route,c=i.staticContext,l={match:e,location:this.props.location||u.location,history:s,staticContext:c};return r?e?a.a.createElement(r,l):null:o?e?o(l):null:n?"function"==typeof n?n(l):H(n)?null:a.a.Children.only(n):null},t}(a.a.Component);K.propTypes={computedMatch:u.a.object,path:u.a.string,exact:u.a.bool,strict:u.a.bool,sensitive:u.a.bool,component:u.a.func,render:u.a.func,children:u.a.oneOfType([u.a.func,u.a.node]),location:u.a.object},K.contextTypes={router:u.a.shape({history:u.a.object.isRequired,route:u.a.object.isRequired,staticContext:u.a.object})},K.childContextTypes={router:u.a.object.isRequired};var q=K,z=q,G=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var Y=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,s=e.className,u=e.activeStyle,c=e.style,l=e.isActive,h=e.ariaCurrent,f=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return a.a.createElement(z,{path:"object"===(void 0===t?"undefined":Q(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(l?l(r,n):r);return a.a.createElement(k,G({to:t,className:o?[s,i].filter(function(e){return e}).join(" "):s,style:o?G({},c,u):c,"aria-current":o&&h},f))}})};Y.propTypes={to:k.propTypes.to,exact:u.a.bool,strict:u.a.bool,location:u.a.object,activeClassName:u.a.string,className:u.a.string,activeStyle:u.a.object,style:u.a.object,isActive:u.a.func,ariaCurrent:u.a.oneOf(["page","step","location","true"])},Y.defaultProps={activeClassName:"active",ariaCurrent:"true"};var X=Y;var $=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);$.propTypes={when:u.a.bool,message:u.a.oneOfType([u.a.func,u.a.string]).isRequired},$.defaultProps={when:!0},$.contextTypes={router:u.a.shape({history:u.a.shape({block:u.a.func.isRequired}).isRequired}).isRequired};var J=$,Z=n(45),ee=n(44),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(a.a.Component);oe.propTypes={push:u.a.bool,from:u.a.string,to:u.a.oneOfType([u.a.string,u.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:u.a.shape({history:u.a.shape({push:u.a.func.isRequired,replace:u.a.func.isRequired}).isRequired,staticContext:u.a.object}).isRequired};var ie=oe,ae=n(14),se=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function ue(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var ce=function(e,t){return e?se({},t,{pathname:Object(ae.addLeadingSlash)(e)+t.pathname}):t},le=function(e){return"string"==typeof e?Object(ae.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,i=void 0===o?"":o,a=t.hash,s=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===s?"":s});var t,n,r,o,i,a,s},he=function(e){return"string"==typeof e?e:Object(ae.createPath)(e)},fe=function(e){return function(){f()(!1,"You cannot %s with <StaticRouter>",e)}},pe=function(){},de=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=ue(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return Object(ae.addLeadingSlash)(r.props.basename+he(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=ce(n,le(e)),o.url=he(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=ce(n,le(e)),o.url=he(o.location)},r.handleListen=function(){return pe},r.handleBlock=function(){return pe},ue(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ae.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:se({},t,{pathname:t.pathname.substr(n.length)})}(t,le(n)),push:this.handlePush,replace:this.handleReplace,go:fe("go"),goBack:fe("goBack"),goForward:fe("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(y,se({},r,{history:o}))},t}(a.a.Component);de.propTypes={basename:u.a.string,context:u.a.object.isRequired,location:u.a.oneOfType([u.a.string,u.a.object])},de.defaultProps={basename:"",location:"/"},de.childContextTypes={router:u.a.object.isRequired};var ve=de;var ye=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){f()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return a.a.Children.forEach(t,function(t){if(a.a.isValidElement(t)){var i=t.props,s=i.path,u=i.exact,c=i.strict,l=i.sensitive,h=i.from,f=s||h;null==r&&(o=t,r=f?V(n.pathname,{path:f,exact:u,strict:c,sensitive:l}):e.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(a.a.Component);ye.contextTypes={router:u.a.shape({route:u.a.object.isRequired}).isRequired},ye.propTypes={children:u.a.node,location:u.a.object};var me=ye,ge=V,_e=n(31),be=n.n(_e),we=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Ee=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(q,{render:function(t){return a.a.createElement(e,we({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:u.a.func},be()(t,e)};n.d(t,"BrowserRouter",function(){return b}),n.d(t,"HashRouter",function(){return S}),n.d(t,"Link",function(){return k}),n.d(t,"MemoryRouter",function(){return L}),n.d(t,"NavLink",function(){return X}),n.d(t,"Prompt",function(){return J}),n.d(t,"Redirect",function(){return ie}),n.d(t,"Route",function(){return z}),n.d(t,"Router",function(){return m}),n.d(t,"StaticRouter",function(){return ve}),n.d(t,"Switch",function(){return me}),n.d(t,"matchPath",function(){return ge}),n.d(t,"withRouter",function(){return Ee})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(26),i=n(12),a=n(1),s=n(1),u=n(65),c=n(64),l=n(66),h=n(10),f=!0;function p(e,t){if(void 0===t&&(t=null),null===e)return r.ChildrenNode.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),s.assert(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e){var n=e;return new o.LeafNode(n,p(t))}if(e instanceof Array||!f){var d=r.ChildrenNode.EMPTY_NODE,v=e;return a.forEach(v,function(e,t){if(a.contains(v,e)&&"."!==e.substring(0,1)){var n=p(t);!n.isLeafNode()&&n.isEmpty()||(d=d.updateImmediateChild(e,n))}}),d.updatePriority(p(t))}var y=[],m=!1,g=e;if(a.forEach(g,function(e,t){if("string"!=typeof e||"."!==e.substring(0,1)){var n=p(g[e]);n.isEmpty()||(m=m||!n.getPriority().isEmpty(),y.push(new i.NamedNode(e,n)))}}),0==y.length)return r.ChildrenNode.EMPTY_NODE;var _=u.buildChildSet(y,c.NAME_ONLY_COMPARATOR,function(e){return e.name},c.NAME_COMPARATOR);if(m){var b=u.buildChildSet(y,h.PRIORITY_INDEX.getCompare());return new r.ChildrenNode(_,p(t),new l.IndexMap({".priority":b},{".priority":h.PRIORITY_INDEX}))}return new r.ChildrenNode(_,p(t),l.IndexMap.Default)}t.nodeFromJSON=p,h.setNodeFromJSON(p)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(5),i=n(27),a=n(12),s=n(4),u=n(1),c=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o.__extends(t,e),Object.defineProperty(t,"__EMPTY_NODE",{get:function(){return r},set:function(e){r=e},enumerable:!0,configurable:!0}),t.prototype.compare=function(e,t){return s.nameCompare(e.name,t.name)},t.prototype.isDefinedOn=function(e){throw u.assertionError("KeyIndex.isDefinedOn not expected to be called.")},t.prototype.indexedValueChanged=function(e,t){return!1},t.prototype.minPost=function(){return a.NamedNode.MIN},t.prototype.maxPost=function(){return new a.NamedNode(s.MAX_NAME,r)},t.prototype.makePost=function(e,t){return u.assert("string"==typeof e,"KeyIndex indexValue must always be a string."),new a.NamedNode(e,r)},t.prototype.toString=function(){return".key"},t}(i.Index);t.KeyIndex=c,t.KEY_INDEX=new c},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}return e.prototype.isFullyInitialized=function(){return this.fullyInitialized_},e.prototype.isFiltered=function(){return this.filtered_},e.prototype.isCompleteForPath=function(e){if(e.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var t=e.getFront();return this.isCompleteForChild(t)},e.prototype.isCompleteForChild=function(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)},e.prototype.getNode=function(){return this.node_},e}();t.CacheNode=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(62),o=n(20),i=n(6),a=n(61),s=n(149),u=n(138),c=n(1),l=n(4),h=n(1),f=n(137),p=n(35),d=n(135),v=n(56),y=n(134),m=n(55),g=n(129),_=n(73),b=function(){function e(e,t,n){var r=this;this.repoInfo_=e,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new y.EventQueue,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new a.SparseSnapshotTree,this.persistentConnection_=null;var o=new f.AuthTokenProvider(n);if(this.stats_=p.StatsManager.getCollection(e),t||l.beingCrawled())this.server_=new g.ReadonlyRestClient(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var i=n.options.databaseAuthVariableOverride;if(void 0!==i&&null!==i){if("object"!=typeof i)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{c.stringify(i)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}this.persistentConnection_=new m.PersistentConnection(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,i),this.server_=this.persistentConnection_}o.addTokenChangeListener(function(e){r.server_.refreshAuthToken(e)}),this.statsReporter_=p.StatsManager.getOrCreateReporter(e,function(){return new d.StatsReporter(r.stats_,r.server_)}),this.transactions_init_(),this.infoData_=new u.SnapshotHolder,this.infoSyncTree_=new s.SyncTree({startListening:function(e,t,n,o){var i=[],a=r.infoData_.getNode(e.path);return a.isEmpty()||(i=r.infoSyncTree_.applyServerOverwrite(e.path,a),setTimeout(function(){o("ok")},0)),i},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new s.SyncTree({startListening:function(e,t,n,o){return r.server_.listen(e,n,t,function(t,n){var i=o(t,n);r.eventQueue_.raiseEventsForChangedPath(e.path,i)}),[]},stopListening:function(e,t){r.server_.unlisten(e,t)}})}return e.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},e.prototype.name=function(){return this.repoInfo_.namespace},e.prototype.serverTime=function(){var e=this.infoData_.getNode(new i.Path(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+e},e.prototype.generateServerValues=function(){return r.generateWithValues({timestamp:this.serverTime()})},e.prototype.onDataUpdate_=function(e,t,n,r){this.dataUpdateCount++;var a=new i.Path(e);t=this.interceptServerDataCallback_?this.interceptServerDataCallback_(e,t):t;var s=[];if(r)if(n){var u=h.map(t,function(e){return o.nodeFromJSON(e)});s=this.serverSyncTree_.applyTaggedQueryMerge(a,u,r)}else{var c=o.nodeFromJSON(t);s=this.serverSyncTree_.applyTaggedQueryOverwrite(a,c,r)}else if(n){var l=h.map(t,function(e){return o.nodeFromJSON(e)});s=this.serverSyncTree_.applyServerMerge(a,l)}else{var f=o.nodeFromJSON(t);s=this.serverSyncTree_.applyServerOverwrite(a,f)}var p=a;s.length>0&&(p=this.rerunTransactions_(a)),this.eventQueue_.raiseEventsForChangedPath(p,s)},e.prototype.interceptServerData_=function(e){this.interceptServerDataCallback_=e},e.prototype.onConnectStatus_=function(e){this.updateInfo_("connected",e),!1===e&&this.runOnDisconnectEvents_()},e.prototype.onServerInfoUpdate_=function(e){var t=this;l.each(e,function(e,n){t.updateInfo_(n,e)})},e.prototype.updateInfo_=function(e,t){var n=new i.Path("/.info/"+e),r=o.nodeFromJSON(t);this.infoData_.updateSnapshot(n,r);var a=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,a)},e.prototype.getNextWriteId_=function(){return this.nextWriteId_++},e.prototype.setWithPriority=function(e,t,n,i){var a=this;this.log_("set",{path:e.toString(),value:t,priority:n});var s=this.generateServerValues(),u=o.nodeFromJSON(t,n),c=r.resolveDeferredValueSnapshot(u,s),h=this.getNextWriteId_(),f=this.serverSyncTree_.applyUserOverwrite(e,c,h,!0);this.eventQueue_.queueEvents(f),this.server_.put(e.toString(),u.val(!0),function(t,n){var r="ok"===t;r||l.warn("set at "+e+" failed: "+t);var o=a.serverSyncTree_.ackUserWrite(h,!r);a.eventQueue_.raiseEventsForChangedPath(e,o),a.callOnCompleteCallback(i,t,n)});var p=this.abortTransactions_(e);this.rerunTransactions_(p),this.eventQueue_.raiseEventsForChangedPath(p,[])},e.prototype.update=function(e,t,n){var i=this;this.log_("update",{path:e.toString(),value:t});var a=!0,s=this.generateServerValues(),u={};if(h.forEach(t,function(e,t){a=!1;var n=o.nodeFromJSON(t);u[e]=r.resolveDeferredValueSnapshot(n,s)}),a)l.log("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var c=this.getNextWriteId_(),f=this.serverSyncTree_.applyUserMerge(e,u,c);this.eventQueue_.queueEvents(f),this.server_.merge(e.toString(),t,function(t,r){var o="ok"===t;o||l.warn("update at "+e+" failed: "+t);var a=i.serverSyncTree_.ackUserWrite(c,!o),s=a.length>0?i.rerunTransactions_(e):e;i.eventQueue_.raiseEventsForChangedPath(s,a),i.callOnCompleteCallback(n,t,r)}),h.forEach(t,function(t){var n=i.abortTransactions_(e.child(t));i.rerunTransactions_(n)}),this.eventQueue_.raiseEventsForChangedPath(e,[])}},e.prototype.runOnDisconnectEvents_=function(){var e=this;this.log_("onDisconnectEvents");var t=this.generateServerValues(),n=[];r.resolveDeferredValueTree(this.onDisconnect_,t).forEachTree(i.Path.Empty,function(t,r){n=n.concat(e.serverSyncTree_.applyServerOverwrite(t,r));var o=e.abortTransactions_(t);e.rerunTransactions_(o)}),this.onDisconnect_=new a.SparseSnapshotTree,this.eventQueue_.raiseEventsForChangedPath(i.Path.Empty,n)},e.prototype.onDisconnectCancel=function(e,t){var n=this;this.server_.onDisconnectCancel(e.toString(),function(r,o){"ok"===r&&n.onDisconnect_.forget(e),n.callOnCompleteCallback(t,r,o)})},e.prototype.onDisconnectSet=function(e,t,n){var r=this,i=o.nodeFromJSON(t);this.server_.onDisconnectPut(e.toString(),i.val(!0),function(t,o){"ok"===t&&r.onDisconnect_.remember(e,i),r.callOnCompleteCallback(n,t,o)})},e.prototype.onDisconnectSetWithPriority=function(e,t,n,r){var i=this,a=o.nodeFromJSON(t,n);this.server_.onDisconnectPut(e.toString(),a.val(!0),function(t,n){"ok"===t&&i.onDisconnect_.remember(e,a),i.callOnCompleteCallback(r,t,n)})},e.prototype.onDisconnectUpdate=function(e,t,n){var r=this;if(h.isEmpty(t))return l.log("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(e.toString(),t,function(i,a){"ok"===i&&h.forEach(t,function(t,n){var i=o.nodeFromJSON(n);r.onDisconnect_.remember(e.child(t),i)}),r.callOnCompleteCallback(n,i,a)})},e.prototype.addEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.addEventRegistration(e,t):this.serverSyncTree_.addEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.removeEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.removeEventRegistration(e,t):this.serverSyncTree_.removeEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},e.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},e.prototype.stats=function(e){if(void 0===e&&(e=!1),"undefined"!=typeof console){var t;e?(this.statsListener_||(this.statsListener_=new v.StatsListener(this.stats_)),t=this.statsListener_.get()):t=this.stats_.get();var n=Object.keys(t).reduce(function(e,t){return Math.max(t.length,e)},0);h.forEach(t,function(e,t){for(var r=e.length;r<n+2;r++)e+=" ";console.log(e+t)})}},e.prototype.statsIncrementCounter=function(e){this.stats_.incrementCounter(e),this.statsReporter_.includeStat(e)},e.prototype.log_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),l.log.apply(void 0,[n].concat(e))},e.prototype.callOnCompleteCallback=function(e,t,n){e&&l.exceptionGuard(function(){if("ok"==t)e(null);else{var r=(t||"error").toUpperCase(),o=r;n&&(o+=": "+n);var i=new Error(o);i.code=r,e(i)}})},Object.defineProperty(e.prototype,"database",{get:function(){return this.__database||(this.__database=new _.Database(this))},enumerable:!0,configurable:!0}),e}();t.Repo=b},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n,r,o){void 0===o&&(o=null),this.isReverse_=r,this.resultGenerator_=o,this.nodeStack_=[];for(var i=1;!e.isEmpty();)if(e=e,i=t?n(e.key,t):1,r&&(i*=-1),i<0)e=this.isReverse_?e.left:e.right;else{if(0===i){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}return e.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e},e.prototype.hasNext=function(){return this.nodeStack_.length>0},e.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}},e}();t.SortedMapIterator=r;var o=function(){function e(t,n,r,o,i){this.key=t,this.value=n,this.color=null!=r?r:e.RED,this.left=null!=o?o:a.EMPTY_NODE,this.right=null!=i?i:a.EMPTY_NODE}return e.prototype.copy=function(t,n,r,o,i){return new e(null!=t?t:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=o?o:this.left,null!=i?i:this.right)},e.prototype.count=function(){return this.left.count()+1+this.right.count()},e.prototype.isEmpty=function(){return!1},e.prototype.inorderTraversal=function(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)},e.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},e.prototype.minKey=function(){return this.min_().key},e.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},e.prototype.insert=function(e,t,n){var r,o;return(o=(r=n(e,(o=this).key))<0?o.copy(null,null,null,o.left.insert(e,t,n),null):0===r?o.copy(null,t,null,null,null):o.copy(null,null,null,null,o.right.insert(e,t,n))).fixUp_()},e.prototype.removeMin_=function(){if(this.left.isEmpty())return a.EMPTY_NODE;var e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),(e=e.copy(null,null,null,e.left.removeMin_(),null)).fixUp_()},e.prototype.remove=function(e,t){var n,r;if(t(e,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return a.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()},e.prototype.isRed_=function(){return this.color},e.prototype.fixUp_=function(){var e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e},e.prototype.moveRedLeft_=function(){var e=this.colorFlip_();return e.right.left.isRed_()&&(e=(e=(e=e.copy(null,null,null,null,e.right.rotateRight_())).rotateLeft_()).colorFlip_()),e},e.prototype.moveRedRight_=function(){var e=this.colorFlip_();return e.left.left.isRed_()&&(e=(e=e.rotateRight_()).colorFlip_()),e},e.prototype.rotateLeft_=function(){var t=this.copy(null,null,e.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)},e.prototype.rotateRight_=function(){var t=this.copy(null,null,e.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)},e.prototype.colorFlip_=function(){var e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)},e.prototype.checkMaxDepth_=function(){var e=this.check_();return Math.pow(2,e)<=this.count()+1},e.prototype.check_=function(){var e;if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");if((e=this.left.check_())!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)},e.RED=!0,e.BLACK=!1,e}();t.LLRBNode=o;var i=function(){function e(){}return e.prototype.copy=function(e,t,n,r,o){return this},e.prototype.insert=function(e,t,n){return new o(e,t,null)},e.prototype.remove=function(e,t){return this},e.prototype.count=function(){return 0},e.prototype.isEmpty=function(){return!0},e.prototype.inorderTraversal=function(e){return!1},e.prototype.reverseTraversal=function(e){return!1},e.prototype.minKey=function(){return null},e.prototype.maxKey=function(){return null},e.prototype.check_=function(){return 0},e.prototype.isRed_=function(){return!1},e}();t.LLRBEmptyNode=i;var a=function(){function e(t,n){void 0===n&&(n=e.EMPTY_NODE),this.comparator_=t,this.root_=n}return e.prototype.insert=function(t,n){return new e(this.comparator_,this.root_.insert(t,n,this.comparator_).copy(null,null,o.BLACK,null,null))},e.prototype.remove=function(t){return new e(this.comparator_,this.root_.remove(t,this.comparator_).copy(null,null,o.BLACK,null,null))},e.prototype.get=function(e){for(var t,n=this.root_;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key)))return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null},e.prototype.getPredecessorKey=function(e){for(var t,n=this.root_,r=null;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},e.prototype.isEmpty=function(){return this.root_.isEmpty()},e.prototype.count=function(){return this.root_.count()},e.prototype.minKey=function(){return this.root_.minKey()},e.prototype.maxKey=function(){return this.root_.maxKey()},e.prototype.inorderTraversal=function(e){return this.root_.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.root_.reverseTraversal(e)},e.prototype.getIterator=function(e){return new r(this.root_,null,this.comparator_,!1,e)},e.prototype.getIteratorFrom=function(e,t){return new r(this.root_,e,this.comparator_,!1,t)},e.prototype.getReverseIteratorFrom=function(e,t){return new r(this.root_,e,this.comparator_,!0,t)},e.prototype.getReverseIterator=function(e){return new r(this.root_,null,this.comparator_,!0,e)},e.EMPTY_NODE=new i,e}();t.SortedMap=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(4),a=n(68),s=function(){function e(t,n){void 0===n&&(n=e.__childrenNodeConstructor.EMPTY_NODE),this.value_=t,this.priorityNode_=n,this.lazyHash_=null,o.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),a.validatePriorityNode(this.priorityNode_)}return Object.defineProperty(e,"__childrenNodeConstructor",{get:function(){return r},set:function(e){r=e},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!0},e.prototype.getPriority=function(){return this.priorityNode_},e.prototype.updatePriority=function(t){return new e(this.value_,t)},e.prototype.getImmediateChild=function(t){return".priority"===t?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.getChild=function(t){return t.isEmpty()?this:".priority"===t.getFront()?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.hasChild=function(){return!1},e.prototype.getPredecessorChildName=function(e,t){return null},e.prototype.updateImmediateChild=function(t,n){return".priority"===t?this.updatePriority(n):n.isEmpty()&&".priority"!==t?this:e.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(t,n).updatePriority(this.priorityNode_)},e.prototype.updateChild=function(t,n){var r=t.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(o.assert(".priority"!==r||1===t.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,e.__childrenNodeConstructor.EMPTY_NODE.updateChild(t.popFront(),n)))},e.prototype.isEmpty=function(){return!1},e.prototype.numChildren=function(){return 0},e.prototype.forEachChild=function(e,t){return!1},e.prototype.val=function(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.priorityNode_.isEmpty()||(e+="priority:"+a.priorityHashText(this.priorityNode_.val())+":");var t=typeof this.value_;e+=t+":",e+="number"===t?i.doubleToIEEE754String(this.value_):this.value_,this.lazyHash_=i.sha1(e)}return this.lazyHash_},e.prototype.getValue=function(){return this.value_},e.prototype.compareTo=function(t){return t===e.__childrenNodeConstructor.EMPTY_NODE?1:t instanceof e.__childrenNodeConstructor?-1:(o.assert(t.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(t))},e.prototype.compareToLeafNode_=function(t){var n=typeof t.value_,r=typeof this.value_,i=e.VALUE_TYPE_ORDER.indexOf(n),a=e.VALUE_TYPE_ORDER.indexOf(r);return o.assert(i>=0,"Unknown leaf type: "+n),o.assert(a>=0,"Unknown leaf type: "+r),i===a?"object"===r?0:this.value_<t.value_?-1:this.value_===t.value_?0:1:a-i},e.prototype.withIndex=function(){return this},e.prototype.isIndexed=function(){return!0},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode()){var t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1},e.VALUE_TYPE_ORDER=["object","boolean","number","string"],e}();t.LeafNode=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),o=n(4),i=function(){function e(){}return e.prototype.getCompare=function(){return this.compare.bind(this)},e.prototype.indexedValueChanged=function(e,t){var n=new r.NamedNode(o.MIN_NAME,e),i=new r.NamedNode(o.MIN_NAME,t);return 0!==this.compare(n,i)},e.prototype.minPost=function(){return r.NamedNode.MIN},e}();t.Index=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PROTOCOL_VERSION="5",t.VERSION_PARAM="v",t.TRANSPORT_SESSION_PARAM="s",t.REFERER_PARAM="r",t.FORGE_REF="f",t.FORGE_DOMAIN="firebaseio.com",t.LAST_SESSION_PARAM="ls",t.WEBSOCKET="websocket",t.LONG_POLLING="long_polling"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(155),o=n(154),i=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new r.DOMStorageWrapper(t)}}catch(e){}return new o.MemoryStorage};t.PersistentStorage=i("localStorage"),t.SessionStorage=i("sessionStorage")},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,s=a&&a(Object);return function u(c,l,h){if("string"!=typeof l){if(s){var f=a(l);f&&f!==s&&u(c,f,h)}var p=r(l);o&&(p=p.concat(o(l)));for(var d=0;d<p.length;++d){var v=p[d];if(!(e[v]||t[v]||h&&h[v])){var y=i(l,v);try{n(c,v,y)}catch(e){}}}return c}return c}}()},function(e,t,n){"use strict";(function(e,r){var o,i=n(84);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(i.a)(o);t.a=a}).call(this,n(22),n(118)(e))},function(e,t,n){e.exports=n(120)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(24),i=n(4),a=n(72),s=n(16);n(126);var u,c=function(){function e(){this.repos_={},this.useRestClient_=!1}return e.getInstance=function(){return u||(u=new e),u},e.prototype.interrupt=function(){for(var e in this.repos_)for(var t in this.repos_[e])this.repos_[e][t].interrupt()},e.prototype.resume=function(){for(var e in this.repos_)for(var t in this.repos_[e])this.repos_[e][t].resume()},e.prototype.databaseFromApp=function(e,t){var n=t||e.options.databaseURL;void 0===n&&i.fatal("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var r=a.parseRepoInfo(n),o=r.repoInfo;return s.validateUrl("Invalid Firebase Database URL",1,r),r.path.isEmpty()||i.fatal("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(o,e).database},e.prototype.deleteRepo=function(e){var t=r.safeGet(this.repos_,e.app.name);t&&r.safeGet(t,e.repoInfo_.toURLString())===e||i.fatal("Database "+e.app.name+"("+e.repoInfo_+") has already been deleted."),e.interrupt(),delete t[e.repoInfo_.toURLString()]},e.prototype.createRepo=function(e,t){var n=r.safeGet(this.repos_,t.name);n||(n={},this.repos_[t.name]=n);var a=r.safeGet(n,e.toURLString());return a&&i.fatal("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),a=new o.Repo(e,this.useRestClient_,t),n[e.toURLString()]=a,a},e.prototype.forceRestClient=function(e){this.useRestClient_=e},e}();t.RepoManager=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(136),o=function(){function e(){}return e.getCollection=function(e){var t=e.toString();return this.collections_[t]||(this.collections_[t]=new r.StatsCollection),this.collections_[t]},e.getOrCreateReporter=function(e,t){var n=e.toString();return this.reporters_[n]||(this.reporters_[n]=t()),this.reporters_[n]},e.collections_={},e.reporters_={},e}();t.StatsManager=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(18),i=n(11),a=n(10),s=function(){function e(e){this.index_=e}return e.prototype.updateChild=function(e,t,n,i,a,s){r.assert(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");var u=e.getImmediateChild(t);return u.getChild(i).equals(n.getChild(i))&&u.isEmpty()==n.isEmpty()?e:(null!=s&&(n.isEmpty()?e.hasChild(t)?s.trackChildChange(o.Change.childRemovedChange(t,u)):r.assert(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):u.isEmpty()?s.trackChildChange(o.Change.childAddedChange(t,n)):s.trackChildChange(o.Change.childChangedChange(t,n,u))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))},e.prototype.updateFullNode=function(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(a.PRIORITY_INDEX,function(e,r){t.hasChild(e)||n.trackChildChange(o.Change.childRemovedChange(e,r))}),t.isLeafNode()||t.forEachChild(a.PRIORITY_INDEX,function(t,r){if(e.hasChild(t)){var i=e.getImmediateChild(t);i.equals(r)||n.trackChildChange(o.Change.childChangedChange(t,r,i))}else n.trackChildChange(o.Change.childAddedChange(t,r))})),t.withIndex(this.index_)},e.prototype.updatePriority=function(e,t){return e.isEmpty()?i.ChildrenNode.EMPTY_NODE:e.updatePriority(t)},e.prototype.filtersNodes=function(){return!1},e.prototype.getIndexedFilter=function(){return this},e.prototype.getIndex=function(){return this.index_},e}();t.IndexedFilter=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(25),i=n(6),a=n(4),s=n(1),u=function(){return r||(r=new o.SortedMap(a.stringCompare)),r},c=function(){function e(e,t){void 0===t&&(t=u()),this.value=e,this.children=t}return e.fromObject=function(t){var n=e.Empty;return s.forEach(t,function(e,t){n=n.set(new i.Path(e),t)}),n},e.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},e.prototype.findRootMostMatchingPathAndValue=function(e,t){if(null!=this.value&&t(this.value))return{path:i.Path.Empty,value:this.value};if(e.isEmpty())return null;var n=e.getFront(),r=this.children.get(n);if(null!==r){var o=r.findRootMostMatchingPathAndValue(e.popFront(),t);return null!=o?{path:new i.Path(n).child(o.path),value:o.value}:null}return null},e.prototype.findRootMostValueAndPath=function(e){return this.findRootMostMatchingPathAndValue(e,function(){return!0})},e.prototype.subtree=function(t){if(t.isEmpty())return this;var n=t.getFront(),r=this.children.get(n);return null!==r?r.subtree(t.popFront()):e.Empty},e.prototype.set=function(t,n){if(t.isEmpty())return new e(n,this.children);var r=t.getFront(),o=(this.children.get(r)||e.Empty).set(t.popFront(),n),i=this.children.insert(r,o);return new e(this.value,i)},e.prototype.remove=function(t){if(t.isEmpty())return this.children.isEmpty()?e.Empty:new e(null,this.children);var n=t.getFront(),r=this.children.get(n);if(r){var o=r.remove(t.popFront()),i=void 0;return i=o.isEmpty()?this.children.remove(n):this.children.insert(n,o),null===this.value&&i.isEmpty()?e.Empty:new e(this.value,i)}return this},e.prototype.get=function(e){if(e.isEmpty())return this.value;var t=e.getFront(),n=this.children.get(t);return n?n.get(e.popFront()):null},e.prototype.setTree=function(t,n){if(t.isEmpty())return n;var r=t.getFront(),o=(this.children.get(r)||e.Empty).setTree(t.popFront(),n),i=void 0;return i=o.isEmpty()?this.children.remove(r):this.children.insert(r,o),new e(this.value,i)},e.prototype.fold=function(e){return this.fold_(i.Path.Empty,e)},e.prototype.fold_=function(e,t){var n={};return this.children.inorderTraversal(function(r,o){n[r]=o.fold_(e.child(r),t)}),t(e,this.value,n)},e.prototype.findOnPath=function(e,t){return this.findOnPath_(e,i.Path.Empty,t)},e.prototype.findOnPath_=function(e,t,n){var r=!!this.value&&n(t,this.value);if(r)return r;if(e.isEmpty())return null;var o=e.getFront(),i=this.children.get(o);return i?i.findOnPath_(e.popFront(),t.child(o),n):null},e.prototype.foreachOnPath=function(e,t){return this.foreachOnPath_(e,i.Path.Empty,t)},e.prototype.foreachOnPath_=function(t,n,r){if(t.isEmpty())return this;this.value&&r(n,this.value);var o=t.getFront(),i=this.children.get(o);return i?i.foreachOnPath_(t.popFront(),n.child(o),r):e.Empty},e.prototype.foreach=function(e){this.foreach_(i.Path.Empty,e)},e.prototype.foreach_=function(e,t){this.children.inorderTraversal(function(n,r){r.foreach_(e.child(n),t)}),this.value&&t(e,this.value)},e.prototype.foreachChild=function(e){this.children.inorderTraversal(function(t,n){n.value&&e(t,n.value)})},e.Empty=new e(null),e}();t.ImmutableTree=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(16),i=n(6),a=n(10),s=function(){function e(e,t,n){this.node_=e,this.ref_=t,this.index_=n}return e.prototype.val=function(){return r.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},e.prototype.exportVal=function(){return r.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},e.prototype.toJSON=function(){return r.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},e.prototype.exists=function(){return r.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},e.prototype.child=function(t){r.validateArgCount("DataSnapshot.child",0,1,arguments.length),t=String(t),o.validatePathString("DataSnapshot.child",1,t,!1);var n=new i.Path(t),s=this.ref_.child(n);return new e(this.node_.getChild(n),s,a.PRIORITY_INDEX)},e.prototype.hasChild=function(e){r.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),o.validatePathString("DataSnapshot.hasChild",1,e,!1);var t=new i.Path(e);return!this.node_.getChild(t).isEmpty()},e.prototype.getPriority=function(){return r.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},e.prototype.forEach=function(t){var n=this;return r.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),r.validateCallback("DataSnapshot.forEach",1,t,!1),!this.node_.isLeafNode()&&!!this.node_.forEachChild(this.index_,function(r,o){return t(new e(o,n.ref_.child(r),a.PRIORITY_INDEX))})},e.prototype.hasChildren=function(){return r.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(e.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),e.prototype.numChildren=function(){return r.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},e.prototype.getRef=function(){return r.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}();t.DataSnapshot=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(70),i=n(153),a=n(4),s=n(152),u=n(69),c=n(24),l=n(6),h=n(128),f=n(16),p=n(1),d=n(1),v=n(58),y=function(e){function t(t,n){if(!(t instanceof c.Repo))throw new Error("new Reference() no longer supported - use app.database().");return e.call(this,t,n,h.QueryParams.DEFAULT,!1)||this}return r.__extends(t,e),t.prototype.getKey=function(){return p.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},t.prototype.child=function(e){return p.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof e?e=String(e):e instanceof l.Path||(null===this.path.getFront()?f.validateRootPathString("Reference.child",1,e,!1):f.validatePathString("Reference.child",1,e,!1)),new t(this.repo,this.path.child(e))},t.prototype.getParent=function(){p.validateArgCount("Reference.parent",0,0,arguments.length);var e=this.path.parent();return null===e?null:new t(this.repo,e)},t.prototype.getRoot=function(){p.validateArgCount("Reference.root",0,0,arguments.length);for(var e=this;null!==e.getParent();)e=e.getParent();return e},t.prototype.databaseProp=function(){return this.repo.database},t.prototype.set=function(e,t){p.validateArgCount("Reference.set",1,2,arguments.length),f.validateWritablePath("Reference.set",this.path),f.validateFirebaseDataArg("Reference.set",1,e,this.path,!1),p.validateCallback("Reference.set",2,t,!0);var n=new d.Deferred;return this.repo.setWithPriority(this.path,e,null,n.wrapCallback(t)),n.promise},t.prototype.update=function(e,t){if(p.validateArgCount("Reference.update",1,2,arguments.length),f.validateWritablePath("Reference.update",this.path),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,a.warn("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}f.validateFirebaseMergeDataArg("Reference.update",1,e,this.path,!1),p.validateCallback("Reference.update",2,t,!0);var o=new d.Deferred;return this.repo.update(this.path,e,o.wrapCallback(t)),o.promise},t.prototype.setWithPriority=function(e,t,n){if(p.validateArgCount("Reference.setWithPriority",2,3,arguments.length),f.validateWritablePath("Reference.setWithPriority",this.path),f.validateFirebaseDataArg("Reference.setWithPriority",1,e,this.path,!1),f.validatePriority("Reference.setWithPriority",2,t,!1),p.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new d.Deferred;return this.repo.setWithPriority(this.path,e,t,r.wrapCallback(n)),r.promise},t.prototype.remove=function(e){return p.validateArgCount("Reference.remove",0,1,arguments.length),f.validateWritablePath("Reference.remove",this.path),p.validateCallback("Reference.remove",1,e,!0),this.set(null,e)},t.prototype.transaction=function(e,t,n){if(p.validateArgCount("Reference.transaction",1,3,arguments.length),f.validateWritablePath("Reference.transaction",this.path),p.validateCallback("Reference.transaction",1,e,!1),p.validateCallback("Reference.transaction",2,t,!0),f.validateBoolean("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new d.Deferred;"function"==typeof t&&r.promise.catch(function(){});return this.repo.startTransaction(this.path,e,function(e,n,o){e?r.reject(e):r.resolve(new i.TransactionResult(n,o)),"function"==typeof t&&t(e,n,o)},n),r.promise},t.prototype.setPriority=function(e,t){p.validateArgCount("Reference.setPriority",1,2,arguments.length),f.validateWritablePath("Reference.setPriority",this.path),f.validatePriority("Reference.setPriority",1,e,!1),p.validateCallback("Reference.setPriority",2,t,!0);var n=new d.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),e,null,n.wrapCallback(t)),n.promise},t.prototype.push=function(e,t){p.validateArgCount("Reference.push",0,2,arguments.length),f.validateWritablePath("Reference.push",this.path),f.validateFirebaseDataArg("Reference.push",1,e,this.path,!0),p.validateCallback("Reference.push",2,t,!0);var n,r=this.repo.serverTime(),o=s.nextPushId(r),i=this.child(o),a=this.child(o);return n=null!=e?i.set(e,t).then(function(){return a}):Promise.resolve(a),i.then=n.then.bind(n),i.catch=n.then.bind(n,void 0),"function"==typeof t&&n.catch(function(){}),i},t.prototype.onDisconnect=function(){return f.validateWritablePath("Reference.onDisconnect",this.path),new o.OnDisconnect(this.repo,this.path)},Object.defineProperty(t.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),t}(u.Query);t.Reference=y,u.Query.__referenceConstructor=y,v.SyncPoint.__referenceConstructor=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CONSTANTS={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.connect=t.Provider=void 0;var r=i(n(176)),o=i(n(175));function i(e){return e&&e.__esModule?e:{default:e}}t.Provider=r.default,t.connect=o.default},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(3),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(45)),i=s(n(44)),a=n(14);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var s=void 0;"string"==typeof e?(s=(0,a.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),i?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,i.pathname)):s.pathname=i.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var s=Object.keys(t),u=Object.keys(n);return s.length===u.length&&s.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),s=t&&r(t),u=a||s;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var c=void 0;if(i.length){var l=i[i.length-1];c="."===l||".."===l||""===l}else c=!1;for(var h=0,f=i.length;f>=0;f--){var p=i[f];"."===p?o(i,f):".."===p?(o(i,f),h++):h&&(o(i,f),h--)}if(!u)for(;h--;h)i.unshift("..");!u||""===i[0]||i[0]&&r(i[0])||i.unshift("");var d=i.join("/");return c&&"/"!==d.substr(-1)&&(d+="/"),d}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.createChangeEmitter=function(){var e=[],t=e;function n(){t===e&&(t=e.slice())}return{listen:function(e){if("function"!=typeof e)throw new Error("Expected listener to be a function.");var r=!0;return n(),t.push(e),function(){if(r){r=!1,n();var o=t.indexOf(e);t.splice(o,1)}}},emit:function(){for(var n=e=t,r=0;r<n.length;r++)n[r].apply(n,arguments)}}}},function(e,t,n){var r=n(80);n(96),n(74),n(94),n(93),e.exports=r},function(e,t,n){var r,o,i;o=[t],void 0===(i="function"==typeof(r=function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.calculateRgba=function(e,t){if("#"===e[0]&&(e=e.slice(1)),3===e.length){var n="";e.split("").forEach(function(e){n+=e,n+=e}),e=n}var r=e.match(/.{2}/g).map(function(e){return parseInt(e,16)}).join(", ");return"rgba("+r+", "+t+")"}})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(36),o=n(10),i=n(12),a=n(11),s=function(){function e(t){this.indexedFilter_=new r.IndexedFilter(t.getIndex()),this.index_=t.getIndex(),this.startPost_=e.getStartPost_(t),this.endPost_=e.getEndPost_(t)}return e.prototype.getStartPost=function(){return this.startPost_},e.prototype.getEndPost=function(){return this.endPost_},e.prototype.matches=function(e){return this.index_.compare(this.getStartPost(),e)<=0&&this.index_.compare(e,this.getEndPost())<=0},e.prototype.updateChild=function(e,t,n,r,o,s){return this.matches(new i.NamedNode(t,n))||(n=a.ChildrenNode.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,r,o,s)},e.prototype.updateFullNode=function(e,t,n){t.isLeafNode()&&(t=a.ChildrenNode.EMPTY_NODE);var r=t.withIndex(this.index_);r=r.updatePriority(a.ChildrenNode.EMPTY_NODE);var s=this;return t.forEachChild(o.PRIORITY_INDEX,function(e,t){s.matches(new i.NamedNode(e,t))||(r=r.updateImmediateChild(e,a.ChildrenNode.EMPTY_NODE))}),this.indexedFilter_.updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.indexedFilter_},e.prototype.getIndex=function(){return this.index_},e.getStartPost_=function(e){if(e.hasStart()){var t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()},e.getEndPost_=function(e){if(e.hasEnd()){var t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()},e}();t.RangedFilter=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.put=function(e,t,n,r){},e.prototype.merge=function(e,t,n,r){},e.prototype.refreshAuthToken=function(e){},e.prototype.onDisconnectPut=function(e,t,n){},e.prototype.onDisconnectMerge=function(e,t,n){},e.prototype.onDisconnectCancel=function(e,t){},e.prototype.reportStats=function(e){},e}();t.ServerActions=r},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=n(1),i=n(4),a=n(35),s=n(28),u=n(1),c=n(29),l=n(1),h=n(1),f=null;"undefined"!=typeof MozWebSocket?f=MozWebSocket:"undefined"!=typeof WebSocket&&(f=WebSocket),t.setWebSocketImpl=function(e){f=e};var p=function(){function t(e,n,r,o){this.connId=e,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=i.logWrapper(this.connId),this.stats_=a.StatsManager.getCollection(n),this.connURL=t.connectionURL_(n,r,o)}return t.connectionURL_=function(e,t,n){var r={};return r[s.VERSION_PARAM]=s.PROTOCOL_VERSION,!h.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf(s.FORGE_DOMAIN)&&(r[s.REFERER_PARAM]=s.FORGE_REF),t&&(r[s.TRANSPORT_SESSION_PARAM]=t),n&&(r[s.LAST_SESSION_PARAM]=n),e.connectionURL(s.WEBSOCKET,r)},t.prototype.open=function(t,n){var o=this;this.onDisconnect=n,this.onMessage=t,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,c.PersistentStorage.set("previous_websocket_failure",!0);try{if(h.isNodeSdk()){var i=u.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",a={headers:{"User-Agent":"Firebase/"+s.PROTOCOL_VERSION+"/"+r.default.SDK_VERSION+"/"+e.platform+"/"+i}},l=e.env,p=0==this.connURL.indexOf("wss://")?l.HTTPS_PROXY||l.https_proxy:l.HTTP_PROXY||l.http_proxy;p&&(a.proxy={origin:p}),this.mySock=new f(this.connURL,[],a)}else this.mySock=new f(this.connURL)}catch(e){this.log_("Error instantiating WebSocket.");var d=e.message||e.data;return d&&this.log_(d),void this.onClosed_()}this.mySock.onopen=function(){o.log_("Websocket connected."),o.everConnected_=!0},this.mySock.onclose=function(){o.log_("Websocket connection was disconnected."),o.mySock=null,o.onClosed_()},this.mySock.onmessage=function(e){o.handleIncomingFrame(e)},this.mySock.onerror=function(e){o.log_("WebSocket error.  Closing connection.");var t=e.message||e.data;t&&o.log_(t),o.onClosed_()}},t.prototype.start=function(){},t.forceDisallow=function(){t.forceDisallow_=!0},t.isAvailable=function(){var e=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(e=!0)}return!e&&null!==f&&!t.forceDisallow_},t.previouslyFailed=function(){return c.PersistentStorage.isInMemoryStorage||!0===c.PersistentStorage.get("previous_websocket_failure")},t.prototype.markConnectionHealthy=function(){c.PersistentStorage.remove("previous_websocket_failure")},t.prototype.appendFrame_=function(e){if(this.frames.push(e),this.frames.length==this.totalFrames){var t=this.frames.join("");this.frames=null;var n=l.jsonEval(t);this.onMessage(n)}},t.prototype.handleNewFrameCount_=function(e){this.totalFrames=e,this.frames=[]},t.prototype.extractFrameCount_=function(e){if(o.assert(null===this.frames,"We already have a frame buffer"),e.length<=6){var t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e},t.prototype.handleIncomingFrame=function(e){if(null!==this.mySock){var t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{var n=this.extractFrameCount_(t);null!==n&&this.appendFrame_(n)}}},t.prototype.send=function(e){this.resetKeepAlive();var t=l.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);var n=i.splitStringBySize(t,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},t.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},t.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},t.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},t.prototype.resetKeepAlive=function(){var e=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval(function(){e.mySock&&e.sendString_("0"),e.resetKeepAlive()},Math.floor(45e3))},t.prototype.sendString_=function(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},t.responsesRequiredToBeHealthy=2,t.healthyTimeout=3e4,t}();t.WebSocketConnection=p}).call(this,n(79))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(60),i=n(35),a=n(130),s=n(28),u=n(1),c=n(1);t.FIREBASE_LONGPOLL_START_PARAM="start",t.FIREBASE_LONGPOLL_CLOSE_COMMAND="close",t.FIREBASE_LONGPOLL_COMMAND_CB_NAME="pLPCommand",t.FIREBASE_LONGPOLL_DATA_CB_NAME="pRTLPCB",t.FIREBASE_LONGPOLL_ID_PARAM="id",t.FIREBASE_LONGPOLL_PW_PARAM="pw",t.FIREBASE_LONGPOLL_SERIAL_PARAM="ser",t.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM="cb",t.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM="seg",t.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET="ts",t.FIREBASE_LONGPOLL_DATA_PARAM="d",t.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM="disconn",t.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM="dframe";var l=function(){function e(e,t,n,o){this.connId=e,this.repoInfo=t,this.transportSessionId=n,this.lastSessionId=o,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=r.logWrapper(e),this.stats_=i.StatsManager.getCollection(t),this.urlFn=function(e){return t.connectionURL(s.LONG_POLLING,e)}}return e.prototype.open=function(e,n){var o=this;this.curSegmentNum=0,this.onDisconnect_=n,this.myPacketOrderer=new a.PacketReceiver(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout(function(){o.log_("Timed out trying to connect."),o.onClosed_(),o.connectTimeoutTimer_=null},Math.floor(3e4)),r.executeWhenDOMReady(function(){if(!o.isClosed_){o.scriptTagHolder=new h(function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];var r=e[0],i=e[1],a=e[2];e[3],e[4];if(o.incrementIncomingBytes_(e),o.scriptTagHolder)if(o.connectTimeoutTimer_&&(clearTimeout(o.connectTimeoutTimer_),o.connectTimeoutTimer_=null),o.everConnected_=!0,r==t.FIREBASE_LONGPOLL_START_PARAM)o.id=i,o.password=a;else{if(r!==t.FIREBASE_LONGPOLL_CLOSE_COMMAND)throw new Error("Unrecognized command received: "+r);i?(o.scriptTagHolder.sendNewPolls=!1,o.myPacketOrderer.closeAfter(i,function(){o.onClosed_()})):o.onClosed_()}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=e[0],r=e[1];o.incrementIncomingBytes_(e),o.myPacketOrderer.handleResponse(n,r)},function(){o.onClosed_()},o.urlFn);var e={};e[t.FIREBASE_LONGPOLL_START_PARAM]="t",e[t.FIREBASE_LONGPOLL_SERIAL_PARAM]=Math.floor(1e8*Math.random()),o.scriptTagHolder.uniqueCallbackIdentifier&&(e[t.FIREBASE_LONGPOLL_CALLBACK_ID_PARAM]=o.scriptTagHolder.uniqueCallbackIdentifier),e[s.VERSION_PARAM]=s.PROTOCOL_VERSION,o.transportSessionId&&(e[s.TRANSPORT_SESSION_PARAM]=o.transportSessionId),o.lastSessionId&&(e[s.LAST_SESSION_PARAM]=o.lastSessionId),!c.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf(s.FORGE_DOMAIN)&&(e[s.REFERER_PARAM]=s.FORGE_REF);var n=o.urlFn(e);o.log_("Connecting via long-poll to "+n),o.scriptTagHolder.addTag(n,function(){})}})},e.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},e.forceAllow=function(){e.forceAllow_=!0},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){return e.forceAllow_||!e.forceDisallow_&&"undefined"!=typeof document&&null!=document.createElement&&!r.isChromeExtensionContentScript()&&!r.isWindowsStoreApp()&&!c.isNodeSdk()},e.prototype.markConnectionHealthy=function(){},e.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},e.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},e.prototype.send=function(e){var t=u.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);for(var n=u.base64Encode(t),o=r.splitStringBySize(n,1840),i=0;i<o.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,o.length,o[i]),this.curSegmentNum++},e.prototype.addDisconnectPingFrame=function(e,n){if(!c.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var r={};r[t.FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM]="t",r[t.FIREBASE_LONGPOLL_ID_PARAM]=e,r[t.FIREBASE_LONGPOLL_PW_PARAM]=n,this.myDisconnFrame.src=this.urlFn(r),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},e.prototype.incrementIncomingBytes_=function(e){var t=u.stringify(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)},e}();t.BrowserPollConnection=l;var h=function(){function e(n,i,a,s){if(this.onDisconnect=a,this.urlFn=s,this.outstandingRequests=new o.CountedSet,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,c.isNodeSdk())this.commandCB=n,this.onMessageCB=i;else{this.uniqueCallbackIdentifier=r.LUIDGenerator(),window[t.FIREBASE_LONGPOLL_COMMAND_CB_NAME+this.uniqueCallbackIdentifier]=n,window[t.FIREBASE_LONGPOLL_DATA_CB_NAME+this.uniqueCallbackIdentifier]=i,this.myIFrame=e.createIFrame_();var u="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))u='<script>document.domain="'+document.domain+'";<\/script>';var l="<html><body>"+u+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(l),this.myIFrame.doc.close()}catch(e){r.log("frame writing exception"),e.stack&&r.log(e.stack),r.log(e)}}}return e.createIFrame_=function(){var e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||r.log("No IE domain setting required")}catch(n){var t=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+t+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e},e.prototype.close=function(){var n=this;if(this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout(function(){null!==n.myIFrame&&(document.body.removeChild(n.myIFrame),n.myIFrame=null)},Math.floor(0))),c.isNodeSdk()&&this.myID){var r={};r[t.FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM]="t",r[t.FIREBASE_LONGPOLL_ID_PARAM]=this.myID,r[t.FIREBASE_LONGPOLL_PW_PARAM]=this.myPW;var o=this.urlFn(r);e.nodeRestRequest(o)}var i=this.onDisconnect;i&&(this.onDisconnect=null,i())},e.prototype.startLongPoll=function(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););},e.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.count()<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var e={};e[t.FIREBASE_LONGPOLL_ID_PARAM]=this.myID,e[t.FIREBASE_LONGPOLL_PW_PARAM]=this.myPW,e[t.FIREBASE_LONGPOLL_SERIAL_PARAM]=this.currentSerial;for(var n=this.urlFn(e),r="",o=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+r.length<=1870))break;var i=this.pendingSegs.shift();r=r+"&"+t.FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM+o+"="+i.seg+"&"+t.FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET+o+"="+i.ts+"&"+t.FIREBASE_LONGPOLL_DATA_PARAM+o+"="+i.d,o++}return n+=r,this.addLongPollTag_(n,this.currentSerial),!0}return!1},e.prototype.enqueueSegment=function(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()},e.prototype.addLongPollTag_=function(e,t){var n=this;this.outstandingRequests.add(t,1);var r=function(){n.outstandingRequests.remove(t),n.newRequest_()},o=setTimeout(r,Math.floor(25e3));this.addTag(e,function(){clearTimeout(o),r()})},e.prototype.addTag=function(e,t){var n=this;c.isNodeSdk()?this.doNodeLongPoll(e,t):setTimeout(function(){try{if(!n.sendNewPolls)return;var o=n.myIFrame.doc.createElement("script");o.type="text/javascript",o.async=!0,o.src=e,o.onload=o.onreadystatechange=function(){var e=o.readyState;e&&"loaded"!==e&&"complete"!==e||(o.onload=o.onreadystatechange=null,o.parentNode&&o.parentNode.removeChild(o),t())},o.onerror=function(){r.log("Long-poll script failed to load: "+e),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(o)}catch(e){}},Math.floor(1))},e}();t.FirebaseIFrameScriptHolder=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=n(29),i=n(28),a=n(131),s=function(){function e(e,t,n,o,i,s,u){this.id=e,this.repoInfo_=t,this.onMessage_=n,this.onReady_=o,this.onDisconnect_=i,this.onKill_=s,this.lastSessionId=u,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=r.logWrapper("c:"+this.id+":"),this.transportManager_=new a.TransportManager(t),this.log_("Connection created"),this.start_()}return e.prototype.start_=function(){var e=this,t=this.transportManager_.initialTransport();this.conn_=new t(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),o=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout(function(){e.conn_&&e.conn_.open(n,o)},Math.floor(0));var i=t.healthyTimeout||0;i>0&&(this.healthyTimeout_=r.setTimeoutNonBlocking(function(){e.healthyTimeout_=null,e.isHealthy_||(e.conn_&&e.conn_.bytesReceived>102400?(e.log_("Connection exceeded healthy timeout but has received "+e.conn_.bytesReceived+" bytes.  Marking connection healthy."),e.isHealthy_=!0,e.conn_.markConnectionHealthy()):e.conn_&&e.conn_.bytesSent>10240?e.log_("Connection exceeded healthy timeout but has sent "+e.conn_.bytesSent+" bytes.  Leaving connection alive."):(e.log_("Closing unhealthy connection after timeout."),e.close()))},Math.floor(i)))},e.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},e.prototype.disconnReceiver_=function(e){var t=this;return function(n){e===t.conn_?t.onConnectionLost_(n):e===t.secondaryConn_?(t.log_("Secondary connection lost."),t.onSecondaryConnectionLost_()):t.log_("closing an old connection")}},e.prototype.connReceiver_=function(e){var t=this;return function(n){2!=t.state_&&(e===t.rx_?t.onPrimaryMessageReceived_(n):e===t.secondaryConn_?t.onSecondaryMessageReceived_(n):t.log_("message on old connection"))}},e.prototype.sendRequest=function(e){var t={t:"d",d:e};this.sendData_(t)},e.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},e.prototype.onSecondaryControl_=function(e){if("t"in e){var t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},e.prototype.onSecondaryMessageReceived_=function(e){var t=r.requireKey("t",e),n=r.requireKey("d",e);if("c"==t)this.onSecondaryControl_(n);else{if("d"!=t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}},e.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},e.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},e.prototype.onPrimaryMessageReceived_=function(e){var t=r.requireKey("t",e),n=r.requireKey("d",e);"c"==t?this.onControl_(n):"d"==t&&this.onDataMessage_(n)},e.prototype.onDataMessage_=function(e){this.onPrimaryResponse_(),this.onMessage_(e)},e.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},e.prototype.onControl_=function(e){var t=r.requireKey("t",e);if("d"in e){var n=e.d;if("h"===t)this.onHandshake_(n);else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var o=0;o<this.pendingDataMessages.length;++o)this.onDataMessage_(this.pendingDataMessages[o]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?r.error("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):r.error("Unknown control packet command: "+t)}},e.prototype.onHandshake_=function(e){var t=e.ts,n=e.v,o=e.h;this.sessionId=e.s,this.repoInfo_.updateHost(o),0==this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),i.PROTOCOL_VERSION!==n&&r.warn("Protocol version mismatch detected"),this.tryStartUpgrade_())},e.prototype.tryStartUpgrade_=function(){var e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)},e.prototype.startUpgrade_=function(e){var t=this;this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),o=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,o),r.setTimeoutNonBlocking(function(){t.secondaryConn_&&(t.log_("Timed out trying to upgrade."),t.secondaryConn_.close())},Math.floor(6e4))},e.prototype.onReset_=function(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.updateHost(e),1===this.state_?this.close():(this.closeConnections_(),this.start_())},e.prototype.onConnectionEstablished_=function(e,t){var n=this;this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):r.setTimeoutNonBlocking(function(){n.sendPingOnPrimaryIfNecessary_()},Math.floor(5e3))},e.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},e.prototype.onSecondaryConnectionLost_=function(){var e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()},e.prototype.onConnectionLost_=function(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(o.PersistentStorage.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},e.prototype.onConnectionShutdown_=function(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()},e.prototype.sendData_=function(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)},e.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},e.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},e}();t.Connection=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e){this.allowedEvents_=e,this.listeners_={},r.assert(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}return e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(this.listeners_[e]))for(var r=this.listeners_[e].slice(),o=0;o<r.length;o++)r[o].callback.apply(r[o].context,t)},e.prototype.on=function(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});var r=this.getInitialEvent(e);r&&t.apply(n,r)},e.prototype.off=function(e,t,n){this.validateEventType_(e);for(var r=this.listeners_[e]||[],o=0;o<r.length;o++)if(r[o].callback===t&&(!n||n===r[o].context))return void r.splice(o,1)},e.prototype.validateEventType_=function(e){r.assert(this.allowedEvents_.find(function(t){return t===e}),"Unknown event: "+e)},e}();t.EventEmitter=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(13),i=n(1),a=n(1),s=n(1),u=n(4),c=n(6),l=n(133),h=n(132),f=n(1),p=n(53),d=n(1),v=n(1),y=1e3,m=3e5,g=function(e){function t(n,r,o,i,a,s){var c=e.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=o,c.onServerInfoUpdate_=i,c.authTokenProvider_=a,c.authOverride_=s,c.id=t.nextPersistentConnectionId_++,c.log_=u.logWrapper("p:"+c.id+":"),c.interruptReasons_={},c.listens_={},c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=y,c.maxReconnectDelay_=m,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,s&&!v.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),l.VisibilityMonitor.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&h.OnlineMonitor.getInstance().on("online",c.onOnline_,c),c}return r.__extends(t,e),t.prototype.sendRequest=function(e,t,n){var r=++this.requestNumber_,o={r:r,a:e,b:t};this.log_(a.stringify(o)),s.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(o),n&&(this.requestCBHash_[r]=n)},t.prototype.listen=function(e,t,n,r){var o=e.queryIdentifier(),i=e.path.toString();this.log_("Listen called for "+i+" "+o),this.listens_[i]=this.listens_[i]||{},s.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),s.assert(!this.listens_[i][o],"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:t,query:e,tag:n};this.listens_[i][o]=a,this.connected_&&this.sendListen_(a)},t.prototype.sendListen_=function(e){var n=this,r=e.query,o=r.path.toString(),i=r.queryIdentifier();this.log_("Listen on "+o+" for "+i);var a={p:o};e.tag&&(a.q=r.queryObject(),a.t=e.tag),a.h=e.hashFn(),this.sendRequest("q",a,function(a){var s=a.d,u=a.s;t.warnOnListenWarnings_(s,r),(n.listens_[o]&&n.listens_[o][i])===e&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(o,i),e.onComplete&&e.onComplete(u,s))})},t.warnOnListenWarnings_=function(e,t){if(e&&"object"==typeof e&&i.contains(e,"w")){var n=i.safeGet(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+t.getQueryParams().getIndex().toString()+'"',o=t.path.toString();u.warn("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+o+" to your security rules for better performance.")}}},t.prototype.refreshAuthToken=function(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},function(){}),this.reduceReconnectDelayIfAdminCredential_(e)},t.prototype.reduceReconnectDelayIfAdminCredential_=function(e){(e&&40===e.length||f.isAdmin(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},t.prototype.tryAuth=function(){var e=this;if(this.connected_&&this.authToken_){var t=this.authToken_,n=f.isValidFormat(t)?"auth":"gauth",r={cred:t};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,function(n){var r=n.s,o=n.d||"error";e.authToken_===t&&("ok"===r?e.invalidAuthTokenCount_=0:e.onAuthRevoked_(r,o))})}},t.prototype.unlisten=function(e,t){var n=e.path.toString(),r=e.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),s.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,e.queryObject(),t)},t.prototype.sendUnlisten_=function(e,t,n,r){this.log_("Unlisten on "+e+" for "+t);var o={p:e};r&&(o.q=n,o.t=r),this.sendRequest("n",o)},t.prototype.onDisconnectPut=function(e,t,n){this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})},t.prototype.onDisconnectMerge=function(e,t,n){this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})},t.prototype.onDisconnectCancel=function(e,t){this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})},t.prototype.sendOnDisconnect_=function(e,t,n,r){var o={p:t,d:n};this.log_("onDisconnect "+e,o),this.sendRequest(e,o,function(e){r&&setTimeout(function(){r(e.s,e.d)},Math.floor(0))})},t.prototype.put=function(e,t,n,r){this.putInternal("p",e,t,n,r)},t.prototype.merge=function(e,t,n,r){this.putInternal("m",e,t,n,r)},t.prototype.putInternal=function(e,t,n,r,o){var i={p:t,d:n};void 0!==o&&(i.h=o),this.outstandingPuts_.push({action:e,request:i,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+t)},t.prototype.sendPut_=function(e){var t=this,n=this.outstandingPuts_[e].action,r=this.outstandingPuts_[e].request,o=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(n,r,function(r){t.log_(n+" response",r),delete t.outstandingPuts_[e],t.outstandingPutCount_--,0===t.outstandingPutCount_&&(t.outstandingPuts_=[]),o&&o(r.s,r.d)})},t.prototype.reportStats=function(e){var t=this;if(this.connected_){var n={c:e};this.log_("reportStats",n),this.sendRequest("s",n,function(e){if("ok"!==e.s){var n=e.d;t.log_("reportStats","Error sending stats: "+n)}})}},t.prototype.onDataMessage_=function(e){if("r"in e){this.log_("from server: "+a.stringify(e));var t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}},t.prototype.onDataPush_=function(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):u.error("Unrecognized action received from server: "+a.stringify(e)+"\nAre you using the latest client?")},t.prototype.onReady_=function(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},t.prototype.scheduleConnect_=function(e){var t=this;s.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout(function(){t.establishConnectionTimer_=null,t.establishConnection_()},Math.floor(e))},t.prototype.onVisible_=function(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=y,this.realtime_||this.scheduleConnect_(0)),this.visible_=e},t.prototype.onOnline_=function(e){e?(this.log_("Browser went online."),this.reconnectDelay_=y,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},t.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=y),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var e=(new Date).getTime()-this.lastConnectionAttemptTime_,t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},t.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var e=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),o=this.id+":"+t.nextConnectionId_++,i=this,a=this.lastSessionId,c=!1,l=null,h=function(){l?l.close():(c=!0,r())};this.realtime_={close:h,sendRequest:function(e){s.assert(l,"sendRequest call when we're not connected not allowed."),l.sendRequest(e)}};var f=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(f).then(function(t){c?u.log("getToken() completed but was canceled"):(u.log("getToken() completed. Creating connection."),i.authToken_=t&&t.accessToken,l=new p.Connection(o,i.repoInfo_,e,n,r,function(e){u.warn(e+" ("+i.repoInfo_.toString()+")"),i.interrupt("server_kill")},a))}).then(null,function(e){i.log_("Failed to get token: "+e),c||(d.CONSTANTS.NODE_ADMIN&&u.warn(e),h())})}},t.prototype.interrupt=function(e){u.log("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},t.prototype.resume=function(e){u.log("Resuming connection for reason: "+e),delete this.interruptReasons_[e],i.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=y,this.realtime_||this.scheduleConnect_(0))},t.prototype.handleTimestamp_=function(e){var t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})},t.prototype.cancelSentTransactions_=function(){for(var e=0;e<this.outstandingPuts_.length;e++){var t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},t.prototype.onListenRevoked_=function(e,t){var n;n=t?t.map(function(e){return u.ObjectToUniqueKey(e)}).join("$"):"default";var r=this.removeListen_(e,n);r&&r.onComplete&&r.onComplete("permission_denied")},t.prototype.removeListen_=function(e,t){var n,r=new c.Path(e).toString();return void 0!==this.listens_[r]?(n=this.listens_[r][t],delete this.listens_[r][t],0===i.getCount(this.listens_[r])&&delete this.listens_[r]):n=void 0,n},t.prototype.onAuthRevoked_=function(e,t){u.log("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},t.prototype.onSecurityDebugPacket_=function(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))},t.prototype.restoreState_=function(){var e=this;this.tryAuth(),i.forEach(this.listens_,function(t,n){i.forEach(n,function(t,n){e.sendListen_(n)})});for(var t=0;t<this.outstandingPuts_.length;t++)this.outstandingPuts_[t]&&this.sendPut_(t);for(;this.onDisconnectRequestQueue_.length;){var n=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(n.action,n.pathString,n.data,n.onComplete)}},t.prototype.sendConnectStats_=function(){var e={},t="js";d.CONSTANTS.NODE_ADMIN?t="admin_node":d.CONSTANTS.NODE_CLIENT&&(t="node"),e["sdk."+t+"."+o.default.SDK_VERSION.replace(/\./g,"-")]=1,v.isMobileCordova()?e["framework.cordova"]=1:v.isReactNative()&&(e["framework.reactnative"]=1),this.reportStats(e)},t.prototype.shouldReconnect_=function(){var e=h.OnlineMonitor.getInstance().currentlyOnline();return i.isEmpty(this.interruptReasons_)&&e},t.nextPersistentConnectionId_=0,t.nextConnectionId_=0,t}(n(50).ServerActions);t.PersistentConnection=g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e){this.collection_=e,this.last_=null}return e.prototype.get=function(){var e=this.collection_.get(),t=r.clone(e);return this.last_&&r.forEach(this.last_,function(e,n){t[e]=t[e]-n}),this.last_=e,t},e}();t.StatsListener=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(23),i=function(){function e(e,t){this.eventCache_=e,this.serverCache_=t}return e.prototype.updateEventSnap=function(t,n,r){return new e(new o.CacheNode(t,n,r),this.serverCache_)},e.prototype.updateServerSnap=function(t,n,r){return new e(this.eventCache_,new o.CacheNode(t,n,r))},e.prototype.getEventCache=function(){return this.eventCache_},e.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},e.prototype.getServerCache=function(){return this.serverCache_},e.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},e.Empty=new e(new o.CacheNode(r.ChildrenNode.EMPTY_NODE,!1,!1),new o.CacheNode(r.ChildrenNode.EMPTY_NODE,!1,!1)),e}();t.ViewCache=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(23),i=n(11),a=n(1),s=n(1),u=n(57),c=n(145),l=function(){function e(){this.views_={}}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return a.assert(r,"Reference.ts has not been loaded"),r},set:function(e){a.assert(!r,"__referenceConstructor has already been defined"),r=e},enumerable:!0,configurable:!0}),e.prototype.isEmpty=function(){return s.isEmpty(this.views_)},e.prototype.applyOperation=function(e,t,n){var r=e.source.queryId;if(null!==r){var o=s.safeGet(this.views_,r);return a.assert(null!=o,"SyncTree gave us an op for an invalid query."),o.applyOperation(e,t,n)}var i=[];return s.forEach(this.views_,function(r,o){i=i.concat(o.applyOperation(e,t,n))}),i},e.prototype.addEventRegistration=function(e,t,n,r,a){var l=e.queryIdentifier(),h=s.safeGet(this.views_,l);if(!h){var f=n.calcCompleteEventCache(a?r:null),p=!1;f?p=!0:r instanceof i.ChildrenNode?(f=n.calcCompleteEventChildren(r),p=!1):(f=i.ChildrenNode.EMPTY_NODE,p=!1);var d=new u.ViewCache(new o.CacheNode(f,p,!1),new o.CacheNode(r,a,!1));h=new c.View(e,d),this.views_[l]=h}return h.addEventRegistration(t),h.getInitialEvents(t)},e.prototype.removeEventRegistration=function(t,n,r){var o=t.queryIdentifier(),i=[],a=[],u=this.hasCompleteView();if("default"===o){var c=this;s.forEach(this.views_,function(e,t){a=a.concat(t.removeEventRegistration(n,r)),t.isEmpty()&&(delete c.views_[e],t.getQuery().getQueryParams().loadsAllData()||i.push(t.getQuery()))})}else{var l=s.safeGet(this.views_,o);l&&(a=a.concat(l.removeEventRegistration(n,r)),l.isEmpty()&&(delete this.views_[o],l.getQuery().getQueryParams().loadsAllData()||i.push(l.getQuery())))}return u&&!this.hasCompleteView()&&i.push(new e.__referenceConstructor(t.repo,t.path)),{removed:i,events:a}},e.prototype.getQueryViews=function(){var e=this;return Object.keys(this.views_).map(function(t){return e.views_[t]}).filter(function(e){return!e.getQuery().getQueryParams().loadsAllData()})},e.prototype.getCompleteServerCache=function(e){var t=null;return s.forEach(this.views_,function(n,r){t=t||r.getCompleteServerCache(e)}),t},e.prototype.viewForQuery=function(e){if(e.getQueryParams().loadsAllData())return this.getCompleteView();var t=e.queryIdentifier();return s.safeGet(this.views_,t)},e.prototype.viewExistsForQuery=function(e){return null!=this.viewForQuery(e)},e.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},e.prototype.getCompleteView=function(){return s.findValue(this.views_,function(e){return e.getQuery().getQueryParams().loadsAllData()})||null},e}();t.SyncPoint=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=n(6),i=function(){function e(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=r.OperationType.OVERWRITE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,o.Path.Empty,this.snap.getImmediateChild(t)):new e(this.source,this.path.popFront(),this.snap)},e}();t.Overwrite=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(){this.set={}}return e.prototype.add=function(e,t){this.set[e]=null===t||t},e.prototype.contains=function(e){return r.contains(this.set,e)},e.prototype.get=function(e){return this.contains(e)?this.set[e]:void 0},e.prototype.remove=function(e){delete this.set[e]},e.prototype.clear=function(){this.set={}},e.prototype.isEmpty=function(){return r.isEmpty(this.set)},e.prototype.count=function(){return r.getCount(this.set)},e.prototype.each=function(e){r.forEach(this.set,function(t,n){return e(t,n)})},e.prototype.keys=function(){var e=[];return r.forEach(this.set,function(t){e.push(t)}),e},e}();t.CountedSet=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(10),i=n(60),a=function(){function e(){this.value_=null,this.children_=null}return e.prototype.find=function(e){if(null!=this.value_)return this.value_.getChild(e);if(e.isEmpty()||null==this.children_)return null;var t=e.getFront();return e=e.popFront(),this.children_.contains(t)?this.children_.get(t).find(e):null},e.prototype.remember=function(t,n){if(t.isEmpty())this.value_=n,this.children_=null;else if(null!==this.value_)this.value_=this.value_.updateChild(t,n);else{null==this.children_&&(this.children_=new i.CountedSet);var r=t.getFront();this.children_.contains(r)||this.children_.add(r,new e);var o=this.children_.get(r);t=t.popFront(),o.remember(t,n)}},e.prototype.forget=function(e){if(e.isEmpty())return this.value_=null,this.children_=null,!0;if(null!==this.value_){if(this.value_.isLeafNode())return!1;var t=this.value_;this.value_=null;var n=this;return t.forEachChild(o.PRIORITY_INDEX,function(e,t){n.remember(new r.Path(e),t)}),this.forget(e)}if(null!==this.children_){var i=e.getFront();if(e=e.popFront(),this.children_.contains(i))this.children_.get(i).forget(e)&&this.children_.remove(i);return!!this.children_.isEmpty()&&(this.children_=null,!0)}return!0},e.prototype.forEachTree=function(e,t){null!==this.value_?t(e,this.value_):this.forEachChild(function(n,o){var i=new r.Path(e.toString()+"/"+n);o.forEachTree(i,t)})},e.prototype.forEachChild=function(e){null!==this.children_&&this.children_.each(function(t,n){e(t,n)})},e}();t.SparseSnapshotTree=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(6),i=n(61),a=n(26),s=n(20),u=n(10);t.generateWithValues=function(e){return(e=e||{}).timestamp=e.timestamp||(new Date).getTime(),e},t.resolveDeferredValue=function(e,t){return e&&"object"==typeof e?(r.assert(".sv"in e,"Unexpected leaf node or priority contents"),t[e[".sv"]]):e},t.resolveDeferredValueTree=function(e,n){var r=new i.SparseSnapshotTree;return e.forEachTree(new o.Path(""),function(e,o){r.remember(e,t.resolveDeferredValueSnapshot(o,n))}),r},t.resolveDeferredValueSnapshot=function(e,n){var r,o=e.getPriority().val(),i=t.resolveDeferredValue(o,n);if(e.isLeafNode()){var c=e,l=t.resolveDeferredValue(c.getValue(),n);return l!==c.getValue()||i!==c.getPriority().val()?new a.LeafNode(l,s.nodeFromJSON(i)):e}var h=e;return r=h,i!==h.getPriority().val()&&(r=r.updatePriority(new a.LeafNode(i))),h.forEachChild(u.PRIORITY_INDEX,function(e,o){var i=t.resolveDeferredValueSnapshot(o,n);i!==o&&(r=r.updateImmediateChild(e,i))}),r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(1),i=n(4),a=n(27),s=n(11),u=n(12),c=n(20),l=function(e){function t(t){var n=e.call(this)||this;return n.indexPath_=t,o.assert(!t.isEmpty()&&".priority"!==t.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return r.__extends(t,e),t.prototype.extractChild=function(e){return e.getChild(this.indexPath_)},t.prototype.isDefinedOn=function(e){return!e.getChild(this.indexPath_).isEmpty()},t.prototype.compare=function(e,t){var n=this.extractChild(e.node),r=this.extractChild(t.node),o=n.compareTo(r);return 0===o?i.nameCompare(e.name,t.name):o},t.prototype.makePost=function(e,t){var n=c.nodeFromJSON(e),r=s.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,n);return new u.NamedNode(t,r)},t.prototype.maxPost=function(){var e=s.ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_,s.MAX_NODE);return new u.NamedNode(i.MAX_NAME,e)},t.prototype.toString=function(){return this.indexPath_.slice().join("/")},t}(a.Index);t.PathIndex=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);t.NAME_ONLY_COMPARATOR=function(e,t){return r.nameCompare(e.name,t.name)},t.NAME_COMPARATOR=function(e,t){return r.nameCompare(e,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(25),o=n(25),i=Math.log(2),a=function(){function e(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/i,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=e+1&r}return e.prototype.nextBitIsOne=function(){var e=!(this.bits_&1<<this.current_);return this.current_--,e},e}();t.buildChildSet=function(e,t,n,i){e.sort(t);var s=function(t,o){var i,a,u=o-t;if(0==u)return null;if(1==u)return i=e[t],a=n?n(i):i,new r.LLRBNode(a,i.node,r.LLRBNode.BLACK,null,null);var c=parseInt(u/2,10)+t,l=s(t,c),h=s(c+1,o);return i=e[c],a=n?n(i):i,new r.LLRBNode(a,i.node,r.LLRBNode.BLACK,l,h)},u=function(t){for(var o=null,i=null,a=e.length,u=function(t,o){var i=a-t,u=a;a-=t;var l=s(i+1,u),h=e[i],f=n?n(h):h;c(new r.LLRBNode(f,h.node,o,null,l))},c=function(e){o?(o.left=e,o=e):(i=e,o=e)},l=0;l<t.count;++l){var h=t.nextBitIsOne(),f=Math.pow(2,t.count-(l+1));h?u(f,r.LLRBNode.BLACK):(u(f,r.LLRBNode.BLACK),u(f,r.LLRBNode.RED))}return i}(new a(e.length));return new o.SortedMap(i||t,u)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(65),a=n(1),s=n(12),u=n(10),c=n(21),l={},h=function(){function e(e,t){this.indexes_=e,this.indexSet_=t}return Object.defineProperty(e,"Default",{get:function(){return o.assert(l&&u.PRIORITY_INDEX,"ChildrenNode.ts has not been loaded"),r=r||new e({".priority":l},{".priority":u.PRIORITY_INDEX})},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var t=a.safeGet(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t===l?null:t},e.prototype.hasIndex=function(e){return a.contains(this.indexSet_,e.toString())},e.prototype.addIndex=function(t,n){o.assert(t!==c.KEY_INDEX,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,u=[],h=!1,f=n.getIterator(s.NamedNode.Wrap),p=f.getNext();p;)h=h||t.isDefinedOn(p.node),u.push(p),p=f.getNext();r=h?i.buildChildSet(u,t.getCompare()):l;var d=t.toString(),v=a.clone(this.indexSet_);v[d]=t;var y=a.clone(this.indexes_);return y[d]=r,new e(y,v)},e.prototype.addToIndexes=function(t,n){var r=this;return new e(a.map(this.indexes_,function(e,u){var c=a.safeGet(r.indexSet_,u);if(o.assert(c,"Missing index implementation for "+u),e===l){if(c.isDefinedOn(t.node)){for(var h=[],f=n.getIterator(s.NamedNode.Wrap),p=f.getNext();p;)p.name!=t.name&&h.push(p),p=f.getNext();return h.push(t),i.buildChildSet(h,c.getCompare())}return l}var d=n.get(t.name),v=e;return d&&(v=v.remove(new s.NamedNode(t.name,d))),v.insert(t,t.node)}),this.indexSet_)},e.prototype.removeFromIndexes=function(t,n){return new e(a.map(this.indexes_,function(e){if(e===l)return e;var r=n.get(t.name);return r?e.remove(new s.NamedNode(t.name,r)):e}),this.indexSet_)},e}();t.IndexMap=h},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(27),i=n(12),a=n(4),s=n(20),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.compareTo(t.node);return 0===n?a.nameCompare(e.name,t.name):n},t.prototype.isDefinedOn=function(e){return!0},t.prototype.indexedValueChanged=function(e,t){return!e.equals(t)},t.prototype.minPost=function(){return i.NamedNode.MIN},t.prototype.maxPost=function(){return i.NamedNode.MAX},t.prototype.makePost=function(e,t){var n=s.nodeFromJSON(e);return new i.NamedNode(t,n)},t.prototype.toString=function(){return".value"},t}(o.Index);t.ValueIndex=u,t.VALUE_INDEX=new u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(4),a=n(1);t.setMaxNode=function(e){r=e},t.priorityHashText=function(e){return"number"==typeof e?"number:"+i.doubleToIEEE754String(e):"string:"+e},t.validatePriorityNode=function(e){if(e.isLeafNode()){var t=e.val();o.assert("string"==typeof t||"number"==typeof t||"object"==typeof t&&a.contains(t,".sv"),"Priority must be a string or number.")}else o.assert(e===r||e.isEmpty(),"priority of unexpected type.");o.assert(e===r||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(21),a=n(10),s=n(67),u=n(63),c=n(4),l=n(6),h=n(16),f=n(1),p=n(151),d=n(1),v=function(){function e(e,t,n,r){this.repo=e,this.path=t,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return o.assert(r,"Reference.ts has not been loaded"),r},set:function(e){r=e},enumerable:!0,configurable:!0}),e.validateQueryEndpoints_=function(e){var t=null,n=null;if(e.hasStart()&&(t=e.getIndexStartValue()),e.hasEnd()&&(n=e.getIndexEndValue()),e.getIndex()===i.KEY_INDEX){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",l="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(e.hasStart()){if(e.getIndexStartName()!=c.MIN_NAME)throw new Error(r);if("string"!=typeof t)throw new Error(l)}if(e.hasEnd()){if(e.getIndexEndName()!=c.MAX_NAME)throw new Error(r);if("string"!=typeof n)throw new Error(l)}}else if(e.getIndex()===a.PRIORITY_INDEX){if(null!=t&&!h.isValidPriority(t)||null!=n&&!h.isValidPriority(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(o.assert(e.getIndex()instanceof u.PathIndex||e.getIndex()===s.VALUE_INDEX,"unknown index type."),null!=t&&"object"==typeof t||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},e.validateLimit_=function(e){if(e.hasStart()&&e.hasEnd()&&e.hasLimit()&&!e.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},e.prototype.validateNoPreviousOrderByCall_=function(e){if(!0===this.orderByCalled_)throw new Error(e+": You can't combine multiple orderBy calls.")},e.prototype.getQueryParams=function(){return this.queryParams_},e.prototype.getRef=function(){return f.validateArgCount("Query.ref",0,0,arguments.length),new e.__referenceConstructor(this.repo,this.path)},e.prototype.on=function(t,n,r,o){f.validateArgCount("Query.on",2,4,arguments.length),h.validateEventType("Query.on",1,t,!1),f.validateCallback("Query.on",2,n,!1);var i=e.getCancelAndContextArgs_("Query.on",r,o);if("value"===t)this.onValueEvent(n,i.cancel,i.context);else{var a={};a[t]=n,this.onChildEvent(a,i.cancel,i.context)}return n},e.prototype.onValueEvent=function(e,t,n){var r=new p.ValueEventRegistration(e,t||null,n||null);this.repo.addEventCallbackForQuery(this,r)},e.prototype.onChildEvent=function(e,t,n){var r=new p.ChildEventRegistration(e,t,n);this.repo.addEventCallbackForQuery(this,r)},e.prototype.off=function(e,t,n){f.validateArgCount("Query.off",0,3,arguments.length),h.validateEventType("Query.off",1,e,!0),f.validateCallback("Query.off",2,t,!0),f.validateContextObject("Query.off",3,n,!0);var r=null,o=null;if("value"===e){var i=t||null;r=new p.ValueEventRegistration(i,null,n||null)}else e&&(t&&((o={})[e]=t),r=new p.ChildEventRegistration(o,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},e.prototype.once=function(t,n,r,o){var i=this;f.validateArgCount("Query.once",1,4,arguments.length),h.validateEventType("Query.once",1,t,!1),f.validateCallback("Query.once",2,n,!0);var a=e.getCancelAndContextArgs_("Query.once",r,o),s=!0,u=new d.Deferred;u.promise.catch(function(){});var c=function(e){s&&(s=!1,i.off(t,c),n&&n.bind(a.context)(e),u.resolve(e))};return this.on(t,c,function(e){i.off(t,c),a.cancel&&a.cancel.bind(a.context)(e),u.reject(e)}),u.promise},e.prototype.limitToFirst=function(t){if(f.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToFirst(t),this.orderByCalled_)},e.prototype.limitToLast=function(t){if(f.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToLast(t),this.orderByCalled_)},e.prototype.orderByChild=function(t){if(f.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===t)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');h.validatePathString("Query.orderByChild",1,t,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new l.Path(t);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new u.PathIndex(n),o=this.queryParams_.orderBy(r);return e.validateQueryEndpoints_(o),new e(this.repo,this.path,o,!0)},e.prototype.orderByKey=function(){f.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var t=this.queryParams_.orderBy(i.KEY_INDEX);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByPriority=function(){f.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var t=this.queryParams_.orderBy(a.PRIORITY_INDEX);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByValue=function(){f.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var t=this.queryParams_.orderBy(s.VALUE_INDEX);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.startAt=function(t,n){void 0===t&&(t=null),f.validateArgCount("Query.startAt",0,2,arguments.length),h.validateFirebaseDataArg("Query.startAt",1,t,this.path,!0),h.validateKey("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===t&&(t=null,n=null),new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.endAt=function(t,n){void 0===t&&(t=null),f.validateArgCount("Query.endAt",0,2,arguments.length),h.validateFirebaseDataArg("Query.endAt",1,t,this.path,!0),h.validateKey("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.equalTo=function(e,t){if(f.validateArgCount("Query.equalTo",1,2,arguments.length),h.validateFirebaseDataArg("Query.equalTo",1,e,this.path,!1),h.validateKey("Query.equalTo",2,t,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(e,t).endAt(e,t)},e.prototype.toString=function(){return f.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},e.prototype.toJSON=function(){return f.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},e.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},e.prototype.queryIdentifier=function(){var e=this.queryObject(),t=c.ObjectToUniqueKey(e);return"{}"===t?"default":t},e.prototype.isEqual=function(t){if(f.validateArgCount("Query.isEqual",1,1,arguments.length),!(t instanceof e)){throw new Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.")}var n=this.repo===t.repo,r=this.path.equals(t.path),o=this.queryIdentifier()===t.queryIdentifier();return n&&r&&o},e.getCancelAndContextArgs_=function(e,t,n){var r={cancel:null,context:null};if(t&&n)r.cancel=t,f.validateCallback(e,3,r.cancel,!0),r.context=n,f.validateContextObject(e,4,r.context,!0);else if(t)if("object"==typeof t&&null!==t)r.context=t;else{if("function"!=typeof t)throw new Error(f.errorPrefix(e,3,!0)+" must either be a cancel callback or a context object.");r.cancel=t}return r},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}();t.Query=v},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(16),i=n(4),a=n(1),s=function(){function e(e,t){this.repo_=e,this.path_=t}return e.prototype.cancel=function(e){r.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),r.validateCallback("OnDisconnect.cancel",1,e,!0);var t=new a.Deferred;return this.repo_.onDisconnectCancel(this.path_,t.wrapCallback(e)),t.promise},e.prototype.remove=function(e){r.validateArgCount("OnDisconnect.remove",0,1,arguments.length),o.validateWritablePath("OnDisconnect.remove",this.path_),r.validateCallback("OnDisconnect.remove",1,e,!0);var t=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,null,t.wrapCallback(e)),t.promise},e.prototype.set=function(e,t){r.validateArgCount("OnDisconnect.set",1,2,arguments.length),o.validateWritablePath("OnDisconnect.set",this.path_),o.validateFirebaseDataArg("OnDisconnect.set",1,e,this.path_,!1),r.validateCallback("OnDisconnect.set",2,t,!0);var n=new a.Deferred;return this.repo_.onDisconnectSet(this.path_,e,n.wrapCallback(t)),n.promise},e.prototype.setWithPriority=function(e,t,n){r.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),o.validateWritablePath("OnDisconnect.setWithPriority",this.path_),o.validateFirebaseDataArg("OnDisconnect.setWithPriority",1,e,this.path_,!1),o.validatePriority("OnDisconnect.setWithPriority",2,t,!1),r.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var i=new a.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,e,t,i.wrapCallback(n)),i.promise},e.prototype.update=function(e,t){if(r.validateArgCount("OnDisconnect.update",1,2,arguments.length),o.validateWritablePath("OnDisconnect.update",this.path_),Array.isArray(e)){for(var n={},s=0;s<e.length;++s)n[""+s]=e[s];e=n,i.warn("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}o.validateFirebaseMergeDataArg("OnDisconnect.update",1,e,this.path_,!1),r.validateCallback("OnDisconnect.update",2,t,!0);var u=new a.Deferred;return this.repo_.onDisconnectUpdate(this.path_,e,u.wrapCallback(t)),u.promise},e}();t.OnDisconnect=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(1),i=n(29),a=n(28),s=function(){function e(e,t,n,r,o){void 0===o&&(o=""),this.secure=t,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=o,this.host=e.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=i.PersistentStorage.get("host:"+e)||this.host}return e.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()},e.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},e.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},e.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},e.prototype.updateHost=function(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&i.PersistentStorage.set("host:"+this.host,this.internalHost))},e.prototype.connectionURL=function(e,t){var n;if(r.assert("string"==typeof e,"typeof type must == string"),r.assert("object"==typeof t,"typeof params must == object"),e===a.WEBSOCKET)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if(e!==a.LONG_POLLING)throw new Error("Unknown connection type: "+e);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(t.ns=this.namespace);var i=[];return o.forEach(t,function(e,t){i.push(e+"="+t)}),n+i.join("&")},e.prototype.toString=function(){var e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e},e.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},e}();t.RepoInfo=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(71),i=n(4);t.parseRepoInfo=function(e){var n=t.parseURL(e),a=n.subdomain;"firebase"===n.domain&&i.fatal(n.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),a&&"undefined"!=a||"localhost"===n.domain||i.fatal("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),n.secure||i.warnIfPageIsSecure();var s="ws"===n.scheme||"wss"===n.scheme;return{repoInfo:new o.RepoInfo(n.host,n.secure,a,s),path:new r.Path(n.pathString)}},t.parseURL=function(e){var t="",n="",r="",o="",a=!0,s="https",u=443;if("string"==typeof e){var c=e.indexOf("//");c>=0&&(s=e.substring(0,c-1),e=e.substring(c+2));var l=e.indexOf("/");-1===l&&(l=e.length);var h=e.indexOf("?");-1===h&&(h=e.length),t=e.substring(0,Math.min(l,h)),l<h&&(o=function(e){for(var t="",n=e.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var o=n[r];try{o=decodeURIComponent(o.replace(/\+/g," "))}catch(e){}t+="/"+o}return t}(e.substring(l,h)));var f=function(e){var t={};e.startsWith("?")&&(e=e.substring(1));for(var n=0,r=e.split("&");n<r.length;n++){var o=r[n];if(0!==o.length){var a=o.split("=");2===a.length?t[decodeURIComponent(a[0])]=decodeURIComponent(a[1]):i.warn("Invalid query segment '"+o+"' in query '"+e+"'")}}return t}(e.substring(Math.min(e.length,h)));(c=t.indexOf(":"))>=0?(a="https"===s||"wss"===s,u=parseInt(t.substring(c+1),10)):c=e.length;var p=t.split(".");3===p.length?(n=p[1],r=p[0].toLowerCase()):2===p.length?n=p[0]:"localhost"===p[0].slice(0,c).toLowerCase()&&(n="localhost"),""===r&&"ns"in f&&(r=f.ns)}return{host:t,port:u,domain:n,subdomain:r,secure:a,scheme:s,pathString:o}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(4),i=n(72),a=n(6),s=n(39),u=n(24),c=n(34),l=n(1),h=n(16),f=function(){function e(e){this.repo_=e,e instanceof u.Repo||o.fatal("Don't call new Database() directly - please use firebase.database()."),this.root_=new s.Reference(e,a.Path.Empty),this.INTERNAL=new p(this)}return Object.defineProperty(e.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),e.prototype.ref=function(e){return this.checkDeleted_("ref"),l.validateArgCount("database.ref",0,1,arguments.length),e instanceof s.Reference?this.refFromURL(e.toString()):void 0!==e?this.root_.child(e):this.root_},e.prototype.refFromURL=function(e){var t="database.refFromURL";this.checkDeleted_(t),l.validateArgCount(t,1,1,arguments.length);var n=i.parseRepoInfo(e);h.validateUrl(t,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&o.fatal(t+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},e.prototype.checkDeleted_=function(e){null===this.repo_&&o.fatal("Cannot call "+e+" on a deleted database.")},e.prototype.goOffline=function(){l.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},e.prototype.goOnline=function(){l.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},e.ServerValue={TIMESTAMP:{".sv":"timestamp"}},e}();t.Database=f;var p=function(){function e(e){this.database=e}return e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,function(){return r.__generator(this,function(e){return this.database.checkDeleted_("delete"),c.RepoManager.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]})})},e}();t.DatabaseInternals=p},function(e,t,n){e.exports=n(156)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contains=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.safeGet=function(e,t){if(Object.prototype.hasOwnProperty.call(e,t))return e[t]},t.forEach=function(e,t){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])},t.extend=function(e,n){return t.forEach(n,function(t,n){e[t]=n}),e},t.clone=function(e){return t.extend({},e)},t.isNonNullObject=function(e){return"object"==typeof e&&null!==e},t.isEmpty=function(e){for(var t in e)return!1;return!0},t.getCount=function(e){var t=0;for(var n in e)t++;return t},t.map=function(e,t,n){var r={};for(var o in e)r[o]=t.call(n,e[o],o,e);return r},t.findKey=function(e,t,n){for(var r in e)if(t.call(n,e[r],r,e))return r},t.findValue=function(e,n,r){var o=t.findKey(e,n,r);return o&&e[o]},t.getAnyKey=function(e){for(var t in e)return t},t.getValues=function(e){var t=[],n=0;for(var r in e)t[n++]=e[r];return t},t.every=function(e,t){for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&!t(n,e[n]))return!1;return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.jsonEval=function(e){return JSON.parse(e)},t.stringify=function(e){return JSON.stringify(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var o=e.charCodeAt(r);o<128?t[n++]=o:o<2048?(t[n++]=o>>6|192,t[n++]=63&o|128):55296==(64512&o)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++r)),t[n++]=o>>18|240,t[n++]=o>>12&63|128,t[n++]=o>>6&63|128,t[n++]=63&o|128):(t[n++]=o>>12|224,t[n++]=o>>6&63|128,t[n++]=63&o|128)}return t};t.base64={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],o=0;o<e.length;o+=3){var i=e[o],a=o+1<e.length,s=a?e[o+1]:0,u=o+2<e.length,c=u?e[o+2]:0,l=i>>2,h=(3&i)<<4|s>>4,f=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(f=64)),r.push(n[l],n[h],n[f],n[p])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(r(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var o=e[n++];if(o<128)t[r++]=String.fromCharCode(o);else if(o>191&&o<224){var i=e[n++];t[r++]=String.fromCharCode((31&o)<<6|63&i)}else if(o>239&&o<365){var a=((7&o)<<18|(63&(i=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{i=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&o)<<12|(63&i)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],o=0;o<e.length;){var i=n[e.charAt(o++)],a=o<e.length?n[e.charAt(o)]:0,s=++o<e.length?n[e.charAt(o)]:64,u=++o<e.length?n[e.charAt(o)]:64;if(++o,null==i||null==a||null==s||null==u)throw Error();var c=i<<2|a>>4;if(r.push(c),64!=s){var l=a<<4&240|s>>2;if(r.push(l),64!=u){var h=s<<6&192|u;r.push(h)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},t.base64Encode=function(e){var n=r(e);return t.base64.encodeByteArray(n,!0)},t.base64Decode=function(e){try{return t.base64.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40);t.assert=function(e,n){if(!e)throw t.assertionError(n)},t.assertionError=function(e){return new Error("Firebase Database ("+r.CONSTANTS.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&p())}function p(){if(!l){var e=s(f);l=!0;for(var t=c.length;t;){for(u=c,c=[];++h<t;)u&&u[h].run();h=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){n(174),e.exports=n(13).default},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var c in n=Object(arguments[u]))o.call(n,c)&&(s[c]=n[c]);if(r){a=r(n);for(var l=0;l<a.length;l++)i.call(n,a[l])&&(s[a[l]]=n[a[l]])}}return s}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){e.exports=function(){"use strict";return function(e){function t(t){if(t)try{e(t+"}")}catch(e){}}return function(n,r,o,i,a,s,u,c,l){switch(n){case 1:0===l&&64===r.charCodeAt(0)&&e(r);break;case 2:if(0===c)return r+"/*|*/";break;case 3:switch(c){case 102:case 112:return e(o[0]+r),"";default:return r+"/*|*/"}case-2:r.split("/*|*/}").forEach(t)}}}}()},function(e,t,n){var r=n(178);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return s(i(e,t))},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=f;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,s="",l=t&&t.delimiter||"/";null!=(n=o.exec(e));){var h=n[0],f=n[1],p=n.index;if(s+=e.slice(a,p),a=p+h.length,f)s+=f[1];else{var d=e[a],v=n[2],y=n[3],m=n[4],g=n[5],_=n[6],b=n[7];s&&(r.push(s),s="");var w=null!=v&&null!=d&&d!==v,E="+"===_||"*"===_,C="?"===_||"*"===_,T=n[2]||l,S=m||g;r.push({name:y||i++,prefix:v||"",delimiter:T,optional:C,repeat:E,partial:w,asterisk:!!b,pattern:S?c(S):b?".*":"[^"+u(T)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function s(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",s=n||{},u=(o||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var l=e[c];if("string"!=typeof l){var h,f=s[l.name];if(null==f){if(l.optional){l.partial&&(i+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(f)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(h=u(f[p]),!t[c].test(h))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(h)+"`");i+=(0===p?l.prefix:l.delimiter)+h}}else{if(h=l.asterisk?encodeURI(f).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):u(f),!t[c].test(h))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+h+'"');i+=l.prefix+h}}else i+=l}return i}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function h(e){return e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",s=0;s<e.length;s++){var c=e[s];if("string"==typeof c)a+=u(c);else{var f=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+f+p+")*"),a+=p=c.optional?c.partial?f+"("+p+")?":"(?:"+f+"("+p+"))?":f+"("+p+")"}}var d=u(n.delimiter||"/"),v=a.slice(-d.length)===d;return o||(a=(v?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=i?"$":o&&v?"":"(?="+d+"|$)",l(new RegExp("^"+a,h(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",h(n)),t)}(e,t,n):function(e,t,n){return f(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=c(n(3)),a=n(14),s=n(43),u=c(n(42));function c(e){return e&&e.__esModule?e:{default:e}}var l=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,c=void 0===n?["/"]:n,h=e.initialIndex,f=void 0===h?0:h,p=e.keyLength,d=void 0===p?6:p,v=(0,u.default)(),y=function(e){o(E,e),E.length=E.entries.length,v.notifyListeners(E.location,E.action)},m=function(){return Math.random().toString(36).substr(2,d)},g=l(f,0,c.length-1),_=c.map(function(e){return"string"==typeof e?(0,s.createLocation)(e,void 0,m()):(0,s.createLocation)(e,void 0,e.key||m())}),b=a.createPath,w=function(e){var n=l(E.index+e,0,E.entries.length-1),r=E.entries[n];v.confirmTransitionTo(r,"POP",t,function(e){e?y({action:"POP",location:r,index:n}):y()})},E={length:_.length,action:"POP",location:_[g],index:g,entries:_,createHref:b,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,m(),E.location);v.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=E.index+1,n=E.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),y({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,s.createLocation)(e,n,m(),E.location);v.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(E.entries[E.index]=o,y({action:"REPLACE",location:o}))})},go:w,goBack:function(){return w(-1)},goForward:function(){return w(1)},canGo:function(e){var t=E.index+e;return t>=0&&t<E.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return v.setPrompt(e)},listen:function(e){return v.appendListener(e)}};return E}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=l(n(3)),i=l(n(7)),a=n(43),s=n(14),u=l(n(42)),c=n(81);function l(e){return e&&e.__esModule?e:{default:e}}var h={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,s.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:s.stripLeadingSlash,decodePath:s.addLeadingSlash},slash:{encodePath:s.addLeadingSlash,decodePath:s.addLeadingSlash}},f=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},p=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,c.supportsGoWithoutReloadUsingHash)(),l=e.getUserConfirmation,d=void 0===l?c.getConfirmation:l,v=e.hashType,y=void 0===v?"slash":v,m=e.basename?(0,s.stripTrailingSlash)((0,s.addLeadingSlash)(e.basename)):"",g=h[y],_=g.encodePath,b=g.decodePath,w=function(){var e=b(f());return(0,o.default)(!m||(0,s.hasBasename)(e,m),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+m+'".'),m&&(e=(0,s.stripBasename)(e,m)),(0,a.createLocation)(e)},E=(0,u.default)(),C=function(e){r(F,e),F.length=t.length,E.notifyListeners(F.location,F.action)},T=!1,S=null,O=function(){var e=f(),t=_(e);if(e!==t)p(t);else{var n=w(),r=F.location;if(!T&&(0,a.locationsAreEqual)(r,n))return;if(S===(0,s.createPath)(n))return;S=null,P(n)}},P=function(e){T?(T=!1,C()):E.confirmTransitionTo(e,"POP",d,function(t){t?C({action:"POP",location:e}):N(e)})},N=function(e){var t=F.location,n=A.lastIndexOf((0,s.createPath)(t));-1===n&&(n=0);var r=A.lastIndexOf((0,s.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(T=!0,x(o))},I=f(),k=_(I);I!==k&&p(k);var R=w(),A=[(0,s.createPath)(R)],x=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},D=0,L=function(e){1===(D+=e)?(0,c.addEventListener)(window,"hashchange",O):0===D&&(0,c.removeEventListener)(window,"hashchange",O)},M=!1,F={length:t.length,action:"POP",location:R,createHref:function(e){return"#"+_(m+(0,s.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"PUSH",d,function(e){if(e){var t=(0,s.createPath)(n),r=_(m+t);if(f()!==r){S=t,function(e){window.location.hash=e}(r);var i=A.lastIndexOf((0,s.createPath)(F.location)),a=A.slice(0,-1===i?0:i+1);a.push(t),A=a,C({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),C()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,F.location);E.confirmTransitionTo(n,"REPLACE",d,function(e){if(e){var t=(0,s.createPath)(n),r=_(m+t);f()!==r&&(S=t,p(r));var o=A.indexOf((0,s.createPath)(F.location));-1!==o&&(A[o]=t),C({action:"REPLACE",location:n})}})},go:x,goBack:function(){return x(-1)},goForward:function(){return x(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return M||(L(1),M=!0),function(){return M&&(M=!1,L(-1)),t()}},listen:function(e){var t=E.appendListener(e);return L(1),function(){L(-1),t()}}};return F}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=h(n(3)),a=h(n(7)),s=n(43),u=n(14),c=h(n(42)),l=n(81);function h(e){return e&&e.__esModule?e:{default:e}}var f=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(l.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,l.supportsHistory)(),h=!(0,l.supportsPopStateOnHashChange)(),p=e.forceRefresh,d=void 0!==p&&p,v=e.getUserConfirmation,y=void 0===v?l.getConfirmation:v,m=e.keyLength,g=void 0===m?6:m,_=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",b=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!_||(0,u.hasBasename)(a,_),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+_+'".'),_&&(a=(0,u.stripBasename)(a,_)),(0,s.createLocation)(a,r,n)},w=function(){return Math.random().toString(36).substr(2,g)},E=(0,c.default)(),C=function(e){o(M,e),M.length=t.length,E.notifyListeners(M.location,M.action)},T=function(e){(0,l.isExtraneousPopstateEvent)(e)||P(b(e.state))},S=function(){P(b(f()))},O=!1,P=function(e){O?(O=!1,C()):E.confirmTransitionTo(e,"POP",y,function(t){t?C({action:"POP",location:e}):N(e)})},N=function(e){var t=M.location,n=k.indexOf(t.key);-1===n&&(n=0);var r=k.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(O=!0,A(o))},I=b(f()),k=[I.key],R=function(e){return _+(0,u.createPath)(e)},A=function(e){t.go(e)},x=0,D=function(e){1===(x+=e)?((0,l.addEventListener)(window,"popstate",T),h&&(0,l.addEventListener)(window,"hashchange",S)):0===x&&((0,l.removeEventListener)(window,"popstate",T),h&&(0,l.removeEventListener)(window,"hashchange",S))},L=!1,M={length:t.length,action:"POP",location:I,createHref:R,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),M.location);E.confirmTransitionTo(a,"PUSH",y,function(e){if(e){var r=R(a),o=a.key,s=a.state;if(n)if(t.pushState({key:o,state:s},null,r),d)window.location.href=r;else{var u=k.indexOf(M.location.key),c=k.slice(0,-1===u?0:u+1);c.push(a.key),k=c,C({action:"PUSH",location:a})}else(0,i.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,s.createLocation)(e,o,w(),M.location);E.confirmTransitionTo(a,"REPLACE",y,function(e){if(e){var r=R(a),o=a.key,s=a.state;if(n)if(t.replaceState({key:o,state:s},null,r),d)window.location.replace(r);else{var u=k.indexOf(M.location.key);-1!==u&&(k[u]=a.key),C({action:"REPLACE",location:a})}else(0,i.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:A,goBack:function(){return A(-1)},goForward:function(){return A(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=E.setPrompt(e);return L||(D(1),L=!0),function(){return L&&(L=!1,D(-1)),t()}},listen:function(e){var t=E.appendListener(e);return D(1),function(){D(-1),t()}}};return M}},function(e,t,n){"use strict";n.r(t);var r,o=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(r||(r={}));var i=r.INFO,a=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(t<e.logLevel)){var i=(new Date).toISOString();switch(t){case r.DEBUG:case r.VERBOSE:console.log.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.INFO:console.info.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.WARN:console.warn.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;case r.ERROR:console.error.apply(console,["["+i+"]  "+e.name+":"].concat(n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+t+")")}}},s=function(){function e(e){this.name=e,this._logLevel=i,this._logHandler=a,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in r))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.DEBUG].concat(e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.VERBOSE].concat(e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.INFO].concat(e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.WARN].concat(e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,[this,r.ERROR].concat(e))},e}();function u(e){o.forEach(function(t){t.logLevel=e})}n.d(t,"setLogLevel",function(){return u}),n.d(t,"Logger",function(){return s}),n.d(t,"LogLevel",function(){return r})},function(e,t,n){"use strict";n.r(t);var r,o=n(5),i=n(1),a={AVAILABLE_IN_WINDOW:"only-available-in-window",AVAILABLE_IN_SW:"only-available-in-sw",SHOULD_BE_INHERITED:"should-be-overriden",BAD_SENDER_ID:"bad-sender-id",INCORRECT_GCM_SENDER_ID:"incorrect-gcm-sender-id",PERMISSION_DEFAULT:"permission-default",PERMISSION_BLOCKED:"permission-blocked",UNSUPPORTED_BROWSER:"unsupported-browser",NOTIFICATIONS_BLOCKED:"notifications-blocked",FAILED_DEFAULT_REGISTRATION:"failed-serviceworker-registration",SW_REGISTRATION_EXPECTED:"sw-registration-expected",GET_SUBSCRIPTION_FAILED:"get-subscription-failed",INVALID_SAVED_TOKEN:"invalid-saved-token",SW_REG_REDUNDANT:"sw-reg-redundant",TOKEN_SUBSCRIBE_FAILED:"token-subscribe-failed",TOKEN_SUBSCRIBE_NO_TOKEN:"token-subscribe-no-token",TOKEN_SUBSCRIBE_NO_PUSH_SET:"token-subscribe-no-push-set",TOKEN_UNSUBSCRIBE_FAILED:"token-unsubscribe-failed",TOKEN_UPDATE_FAILED:"token-update-failed",TOKEN_UPDATE_NO_TOKEN:"token-update-no-token",USE_SW_BEFORE_GET_TOKEN:"use-sw-before-get-token",INVALID_DELETE_TOKEN:"invalid-delete-token",DELETE_TOKEN_NOT_FOUND:"delete-token-not-found",DELETE_SCOPE_NOT_FOUND:"delete-scope-not-found",BG_HANDLER_FUNCTION_EXPECTED:"bg-handler-function-expected",NO_WINDOW_CLIENT_TO_MSG:"no-window-client-to-msg",UNABLE_TO_RESUBSCRIBE:"unable-to-resubscribe",NO_FCM_TOKEN_FOR_RESUBSCRIBE:"no-fcm-token-for-resubscribe",FAILED_TO_DELETE_TOKEN:"failed-to-delete-token",NO_SW_IN_REG:"no-sw-in-reg",BAD_SCOPE:"bad-scope",BAD_VAPID_KEY:"bad-vapid-key",BAD_SUBSCRIPTION:"bad-subscription",BAD_TOKEN:"bad-token",BAD_PUSH_SET:"bad-push-set",FAILED_DELETE_VAPID_KEY:"failed-delete-vapid-key",INVALID_PUBLIC_VAPID_KEY:"invalid-public-vapid-key",USE_PUBLIC_KEY_BEFORE_GET_TOKEN:"use-public-key-before-get-token",PUBLIC_KEY_DECRYPTION_FAILED:"public-vapid-key-decryption-failed"},s={codes:a,map:((r={})[a.AVAILABLE_IN_WINDOW]="This method is available in a Window context.",r[a.AVAILABLE_IN_SW]="This method is available in a service worker context.",r[a.SHOULD_BE_INHERITED]="This method should be overriden by extended classes.",r[a.BAD_SENDER_ID]="Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().",r[a.PERMISSION_DEFAULT]="The required permissions were not granted and dismissed instead.",r[a.PERMISSION_BLOCKED]="The required permissions were not granted and blocked instead.",r[a.UNSUPPORTED_BROWSER]="This browser doesn't support the API's required to use the firebase SDK.",r[a.NOTIFICATIONS_BLOCKED]="Notifications have been blocked.",r[a.FAILED_DEFAULT_REGISTRATION]="We are unable to register the default service worker. {$browserErrorMessage}",r[a.SW_REGISTRATION_EXPECTED]="A service worker registration was the expected input.",r[a.GET_SUBSCRIPTION_FAILED]="There was an error when trying to get any existing Push Subscriptions.",r[a.INVALID_SAVED_TOKEN]="Unable to access details of the saved token.",r[a.SW_REG_REDUNDANT]="The service worker being used for push was made redundant.",r[a.TOKEN_SUBSCRIBE_FAILED]="A problem occured while subscribing the user to FCM: {$message}",r[a.TOKEN_SUBSCRIBE_NO_TOKEN]="FCM returned no token when subscribing the user to push.",r[a.TOKEN_SUBSCRIBE_NO_PUSH_SET]="FCM returned an invalid response when getting an FCM token.",r[a.TOKEN_UNSUBSCRIBE_FAILED]="A problem occured while unsubscribing the user from FCM: {$message}",r[a.TOKEN_UPDATE_FAILED]="A problem occured while updating the user from FCM: {$message}",r[a.TOKEN_UPDATE_NO_TOKEN]="FCM returned no token when updating the user to push.",r[a.USE_SW_BEFORE_GET_TOKEN]="You must call useServiceWorker() before calling getToken() to ensure your service worker is used.",r[a.INVALID_DELETE_TOKEN]="You must pass a valid token into deleteToken(), i.e. the token from getToken().",r[a.DELETE_TOKEN_NOT_FOUND]="The deletion attempt for token could not be performed as the token was not found.",r[a.DELETE_SCOPE_NOT_FOUND]="The deletion attempt for service worker scope could not be performed as the scope was not found.",r[a.BG_HANDLER_FUNCTION_EXPECTED]="The input to setBackgroundMessageHandler() must be a function.",r[a.NO_WINDOW_CLIENT_TO_MSG]="An attempt was made to message a non-existant window client.",r[a.UNABLE_TO_RESUBSCRIBE]="There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}",r[a.NO_FCM_TOKEN_FOR_RESUBSCRIBE]="Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.",r[a.FAILED_TO_DELETE_TOKEN]="Unable to delete the currently saved token.",r[a.NO_SW_IN_REG]="Even though the service worker registration was successful, there was a problem accessing the service worker itself.",r[a.INCORRECT_GCM_SENDER_ID]="Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.",r[a.BAD_SCOPE]="The service worker scope must be a string with at least one character.",r[a.BAD_VAPID_KEY]="The public VAPID key is not a Uint8Array with 65 bytes.",r[a.BAD_SUBSCRIPTION]="The subscription must be a valid PushSubscription.",r[a.BAD_TOKEN]="The FCM Token used for storage / lookup was not a valid token string.",r[a.BAD_PUSH_SET]="The FCM push set used for storage / lookup was not not a valid push set string.",r[a.FAILED_DELETE_VAPID_KEY]="The VAPID key could not be deleted.",r[a.INVALID_PUBLIC_VAPID_KEY]="The public VAPID key must be a string.",r[a.PUBLIC_KEY_DECRYPTION_FAILED]="The public VAPID key did not equal 65 bytes when decrypted.",r)},u=function(){function e(e,t){this.errorFactory_=new i.ErrorFactory("messaging","Messaging",s.map),this.DB_NAME_=e,this.dbVersion_=t,this.openDbPromise_=null,this.TRANSACTION_READ_WRITE="readwrite"}return e.prototype.openDatabase=function(){var e=this;return this.openDbPromise_?this.openDbPromise_:(this.openDbPromise_=new Promise(function(t,n){var r=indexedDB.open(e.DB_NAME_,e.dbVersion_);r.onerror=function(e){n(e.target.error)},r.onsuccess=function(e){t(e.target.result)},r.onupgradeneeded=function(t){try{var r=t.target.result;e.onDBUpgrade(r,t)}catch(e){r.close(),n(e)}}}),this.openDbPromise_)},e.prototype.closeDatabase=function(){var e=this;return Promise.resolve().then(function(){if(e.openDbPromise_)return e.openDbPromise_.then(function(t){t.close(),e.openDbPromise_=null})})},e.prototype.onDBUpgrade=function(e,t){throw this.errorFactory_.create(s.codes.SHOULD_BE_INHERITED)},e}();var c=function(e){return function(e){var t=new Uint8Array(e);return window.btoa(String.fromCharCode.apply(null,t))}(e).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")},l=new Uint8Array([4,51,148,247,223,161,235,177,220,3,162,94,21,113,219,72,211,46,237,237,178,52,219,183,71,58,12,143,196,204,225,111,60,140,132,223,171,182,102,62,242,12,212,139,254,227,249,118,47,20,28,99,8,106,111,45,177,26,149,176,206,55,192,156,110]),h={DEFAULT_PUBLIC_VAPID_KEY:l,SUBSCRIPTION_DETAILS:{userVisibleOnly:!0,applicationServerKey:l},ENDPOINT:"https://fcm.googleapis.com"},f=function(){function e(){this.errorFactory_=new i.ErrorFactory("messaging","Messaging",s.map)}return e.prototype.getToken=function(e,t,n){var r=this,o=c(t.getKey("p256dh")),i=c(t.getKey("auth")),a="authorized_entity="+e+"&endpoint="+t.endpoint+"&encryption_key="+o+"&encryption_auth="+i;n!==h.DEFAULT_PUBLIC_VAPID_KEY&&(a+="&application_pub_key="+c(n));var u=new Headers;return u.append("Content-Type","application/x-www-form-urlencoded"),fetch(h.ENDPOINT+"/fcm/connect/subscribe",{method:"POST",headers:u,body:a}).then(function(e){return e.json()}).catch(function(){throw r.errorFactory_.create(s.codes.TOKEN_SUBSCRIBE_FAILED)}).then(function(e){var t=e;if(t.error){var n=t.error.message;throw r.errorFactory_.create(s.codes.TOKEN_SUBSCRIBE_FAILED,{message:n})}if(!t.token)throw r.errorFactory_.create(s.codes.TOKEN_SUBSCRIBE_NO_TOKEN);if(!t.pushSet)throw r.errorFactory_.create(s.codes.TOKEN_SUBSCRIBE_NO_PUSH_SET);return{token:t.token,pushSet:t.pushSet}})},e.prototype.updateToken=function(e,t,n,r,o){var i=this,a=c(r.getKey("p256dh")),u=c(r.getKey("auth")),l="push_set="+n+"&token="+t+"&authorized_entity="+e+"&endpoint="+r.endpoint+"&encryption_key="+a+"&encryption_auth="+u;o!==h.DEFAULT_PUBLIC_VAPID_KEY&&(l+="&application_pub_key="+c(o));var f,p=new Headers;return p.append("Content-Type","application/x-www-form-urlencoded"),fetch(h.ENDPOINT+"/fcm/connect/subscribe",{method:"POST",headers:p,body:l}).then(function(e){return f=e,e.json()}).catch(function(){throw i.errorFactory_.create(s.codes.TOKEN_UPDATE_FAILED)}).then(function(e){if(!f.ok){var t=e.error.message;throw i.errorFactory_.create(s.codes.TOKEN_UPDATE_FAILED,{message:t})}if(!e.token)throw i.errorFactory_.create(s.codes.TOKEN_UPDATE_NO_TOKEN);return e.token})},e.prototype.deleteToken=function(e,t,n){var r=this,o="authorized_entity="+e+"&token="+t+"&pushSet="+n,i=new Headers;return i.append("Content-Type","application/x-www-form-urlencoded"),fetch(h.ENDPOINT+"/fcm/connect/unsubscribe",{method:"POST",headers:i,body:o}).then(function(e){if(!e.ok)return e.json().then(function(e){if(e.error){var t=e.error.message;throw r.errorFactory_.create(s.codes.TOKEN_UNSUBSCRIBE_FAILED,{message:t})}},function(e){throw r.errorFactory_.create(s.codes.TOKEN_UNSUBSCRIBE_FAILED)})})},e}(),p="undefined",d="fcm_token_object_Store";function v(){var e=indexedDB.open(p);e.onerror=function(e){},e.onsuccess=function(t){!function(e){if(e.objectStoreNames.contains(d)){var t=e.transaction(d).objectStore(d),n=new f,r=t.openCursor();r.onerror=function(e){console.warn("Unable to cleanup old IDB.",e)},r.onsuccess=function(){var t=r.result;if(t){var o=t.value;n.deleteToken(o.fcmSenderId,o.fcmToken,o.fcmPushSet),t.continue()}else e.close(),indexedDB.deleteDatabase(p)}}}(e.result)}}var y="fcm_token_details_db",m=2;function g(){}g.prototype.fcmToken,g.prototype.swScope,g.prototype.vapidKey,g.prototype.subscription,g.prototype.fcmSenderId,g.prototype.fcmPushSet;var _=function(e){function t(){return e.call(this,y,m)||this}return o.__extends(t,e),t.prototype.onDBUpgrade=function(e,t){if(t.oldVersion<1){var n=e.createObjectStore("fcm_token_object_Store",{keyPath:"swScope"});n.createIndex("fcmSenderId","fcmSenderId",{unique:!1}),n.createIndex("fcmToken","fcmToken",{unique:!0})}t.oldVersion<2&&v()},t.prototype.validateInputs_=function(e){return o.__awaiter(this,void 0,void 0,function(){return o.__generator(this,function(t){return!e.fcmToken||"string"==typeof e.fcmToken&&0!==e.fcmToken.length?!e.swScope||"string"==typeof e.swScope&&0!==e.swScope.length?!e.vapidKey||e.vapidKey instanceof Uint8Array&&65===e.vapidKey.length?!e.subscription||e.subscription instanceof PushSubscription?!e.fcmSenderId||"string"==typeof e.fcmSenderId&&0!==e.fcmSenderId.length?!e.fcmPushSet||"string"==typeof e.fcmPushSet&&0!==e.fcmPushSet.length?[2]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_PUSH_SET))]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_SENDER_ID))]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_SUBSCRIPTION))]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_VAPID_KEY))]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_SCOPE))]:[2,Promise.reject(this.errorFactory_.create(s.codes.BAD_TOKEN))]})})},t.prototype.getTokenDetailsFromToken=function(e){var t=this;return e?this.validateInputs_({fcmToken:e}).then(function(){return t.openDatabase()}).then(function(t){return new Promise(function(n,r){var o=t.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").index("fcmToken").get(e);o.onerror=function(e){r(e.target.error)},o.onsuccess=function(e){var t=e.target.result?e.target.result:null;n(t)}})}):Promise.reject(this.errorFactory_.create(s.codes.BAD_TOKEN))},t.prototype.getTokenDetailsFromSWScope=function(e){var t=this;return e?this.validateInputs_({swScope:e}).then(function(){return t.openDatabase()}).then(function(t){return new Promise(function(n,r){var o=t.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").get(e);o.onerror=function(e){r(e.target.error)},o.onsuccess=function(e){var t=e.target.result?e.target.result:null;n(t)}})}):Promise.reject(this.errorFactory_.create(s.codes.BAD_SCOPE))},t.prototype.saveTokenDetails=function(e){var t=this,n=e.swScope,r=e.vapidKey,o=e.subscription,i=e.fcmSenderId,a=e.fcmToken,u=e.fcmPushSet;return n?r?o?i?a?u?this.validateInputs_({swScope:n,vapidKey:r,subscription:o,fcmSenderId:i,fcmToken:a,fcmPushSet:u}).then(function(){return t.openDatabase()}).then(function(e){var s={swScope:n,vapidKey:c(r),endpoint:o.endpoint,auth:c(o.getKey("auth")),p256dh:c(o.getKey("p256dh")),fcmSenderId:i,fcmToken:a,fcmPushSet:u,createTime:Date.now()};return new Promise(function(n,r){var o=e.transaction(["fcm_token_object_Store"],t.TRANSACTION_READ_WRITE).objectStore("fcm_token_object_Store").put(s);o.onerror=function(e){r(e.target.error)},o.onsuccess=function(e){n()}})}):Promise.reject(this.errorFactory_.create(s.codes.BAD_PUSH_SET)):Promise.reject(this.errorFactory_.create(s.codes.BAD_TOKEN)):Promise.reject(this.errorFactory_.create(s.codes.BAD_SENDER_ID)):Promise.reject(this.errorFactory_.create(s.codes.BAD_SUBSCRIPTION)):Promise.reject(this.errorFactory_.create(s.codes.BAD_VAPID_KEY)):Promise.reject(this.errorFactory_.create(s.codes.BAD_SCOPE))},t.prototype.deleteToken=function(e){var t=this;return"string"!=typeof e||0===e.length?Promise.reject(this.errorFactory_.create(s.codes.INVALID_DELETE_TOKEN)):this.getTokenDetailsFromToken(e).then(function(e){if(!e)throw t.errorFactory_.create(s.codes.DELETE_TOKEN_NOT_FOUND);return t.openDatabase().then(function(n){return new Promise(function(r,o){var i=n.transaction(["fcm_token_object_Store"],t.TRANSACTION_READ_WRITE).objectStore("fcm_token_object_Store").delete(e.swScope);i.onerror=function(e){o(e.target.error)},i.onsuccess=function(n){0!==n.target.result?r(e):o(t.errorFactory_.create(s.codes.FAILED_TO_DELETE_TOKEN))}})})})},t}(u),b="fcm_vapid_details_db",w=1,E=function(e){function t(){return e.call(this,b,w)||this}return o.__extends(t,e),t.prototype.onDBUpgrade=function(e){e.createObjectStore("fcm_vapid_object_Store",{keyPath:"swScope"})},t.prototype.getVapidFromSWScope=function(e){return"string"!=typeof e||0===e.length?Promise.reject(this.errorFactory_.create(s.codes.BAD_SCOPE)):this.openDatabase().then(function(t){return new Promise(function(n,r){var o=t.transaction(["fcm_vapid_object_Store"]).objectStore("fcm_vapid_object_Store").get(e);o.onerror=function(){r(o.error)},o.onsuccess=function(){var e=o.result,t=null;e&&(t=e.vapidKey),n(t)}})})},t.prototype.saveVapidDetails=function(e,t){var n=this;if("string"!=typeof e||0===e.length)return Promise.reject(this.errorFactory_.create(s.codes.BAD_SCOPE));if(null===t||65!==t.length)return Promise.reject(this.errorFactory_.create(s.codes.BAD_VAPID_KEY));var r={swScope:e,vapidKey:t};return this.openDatabase().then(function(e){return new Promise(function(t,o){var i=e.transaction(["fcm_vapid_object_Store"],n.TRANSACTION_READ_WRITE).objectStore("fcm_vapid_object_Store").put(r);i.onerror=function(){o(i.error)},i.onsuccess=function(){t()}})})},t.prototype.deleteVapidDetails=function(e){var t=this;return this.getVapidFromSWScope(e).then(function(n){if(!n)throw t.errorFactory_.create(s.codes.DELETE_SCOPE_NOT_FOUND);return t.openDatabase().then(function(r){return new Promise(function(o,i){var a=r.transaction(["fcm_vapid_object_Store"],t.TRANSACTION_READ_WRITE).objectStore("fcm_vapid_object_Store").delete(e);a.onerror=function(){i(a.error)},a.onsuccess=function(){0!==a.result?o(n):i(t.errorFactory_.create(s.codes.FAILED_DELETE_VAPID_KEY))}})})})},t}(u),C="granted",T="denied",S="messagingSenderId",O=function(){function e(e){var t=this;if(this.errorFactory_=new i.ErrorFactory("messaging","Messaging",s.map),!e.options[S]||"string"!=typeof e.options[S])throw this.errorFactory_.create(s.codes.BAD_SENDER_ID);this.messagingSenderId_=e.options[S],this.tokenDetailsModel_=new _,this.vapidDetailsModel_=new E,this.iidModel_=new f,this.app=e,this.INTERNAL={},this.INTERNAL.delete=function(){return t.delete()}}return e.prototype.getToken=function(){var e,t=this,n=this.getNotificationPermission_();return n!==C?n===T?Promise.reject(this.errorFactory_.create(s.codes.NOTIFICATIONS_BLOCKED)):Promise.resolve(null):this.getSWRegistration_().then(function(n){return e=n,t.tokenDetailsModel_.getTokenDetailsFromSWScope(e.scope)}).then(function(n){return n?t.manageExistingToken(n,e):t.getNewToken(e)})},e.prototype.manageExistingToken=function(e,t){var n=this;return this.isTokenStillValid(e).then(function(r){return r?Date.now()<e.createTime+6048e5?e.fcmToken:n.updateToken(e,t):n.deleteToken(e.fcmToken).then(function(){return n.getNewToken(t)})})},e.prototype.isTokenStillValid=function(e){return this.getPublicVapidKey_().then(function(t){return c(t)===e.vapidKey})},e.prototype.updateToken=function(e,t){var n,r,o,i=this;return this.getPublicVapidKey_().then(function(e){return n=e,i.getPushSubscription_(t,n)}).then(function(t){return o=t,i.iidModel_.updateToken(i.messagingSenderId_,e.fcmToken,e.fcmPushSet,o,n)}).catch(function(t){return i.deleteToken(e.fcmToken).then(function(){throw t})}).then(function(a){r=a;var s={swScope:t.scope,vapidKey:n,subscription:o,fcmSenderId:i.messagingSenderId_,fcmToken:r,fcmPushSet:e.fcmPushSet};return i.tokenDetailsModel_.saveTokenDetails(s)}).then(function(){return i.vapidDetailsModel_.saveVapidDetails(t.scope,n)}).then(function(){return r})},e.prototype.getNewToken=function(e){var t,n,r,o=this;return this.getPublicVapidKey_().then(function(n){return t=n,o.getPushSubscription_(e,t)}).then(function(e){return n=e,o.iidModel_.getToken(o.messagingSenderId_,n,t)}).then(function(i){r=i;var a={swScope:e.scope,vapidKey:t,subscription:n,fcmSenderId:o.messagingSenderId_,fcmToken:r.token,fcmPushSet:r.pushSet};return o.tokenDetailsModel_.saveTokenDetails(a)}).then(function(){return o.vapidDetailsModel_.saveVapidDetails(e.scope,t)}).then(function(){return r.token})},e.prototype.deleteToken=function(e){var t=this;return this.tokenDetailsModel_.deleteToken(e).then(function(e){return t.iidModel_.deleteToken(e.fcmSenderId,e.fcmToken,e.fcmPushSet)}).then(function(){return t.getSWRegistration_().then(function(e){if(e)return e.pushManager.getSubscription()}).then(function(e){if(e)return e.unsubscribe()})})},e.prototype.getSWRegistration_=function(){throw this.errorFactory_.create(s.codes.SHOULD_BE_INHERITED)},e.prototype.getPublicVapidKey_=function(){throw this.errorFactory_.create(s.codes.SHOULD_BE_INHERITED)},e.prototype.requestPermission=function(){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.getPushSubscription_=function(e,t){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.useServiceWorker=function(e){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.usePublicVapidKey=function(e){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.onMessage=function(e,t,n){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.onTokenRefresh=function(e,t,n){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_WINDOW)},e.prototype.setBackgroundMessageHandler=function(e){throw this.errorFactory_.create(s.codes.AVAILABLE_IN_SW)},e.prototype.delete=function(){return Promise.all([this.tokenDetailsModel_.closeDatabase(),this.vapidDetailsModel_.closeDatabase()])},e.prototype.getNotificationPermission_=function(){return Notification.permission},e.prototype.getTokenDetailsModel=function(){return this.tokenDetailsModel_},e.prototype.getVapidDetailsModel=function(){return this.vapidDetailsModel_},e.prototype.getIIDModel=function(){return this.iidModel_},e}(),P={TYPE_OF_MSG:"firebase-messaging-msg-type",DATA:"firebase-messaging-msg-data"},N=P,I={PUSH_MSG_RECEIVED:"push-msg-received",NOTIFICATION_CLICKED:"notification-clicked"},k=function(e,t){var n;return(n={})[P.TYPE_OF_MSG]=e,n[P.DATA]=t,n},R="/firebase-messaging-sw.js",A="/firebase-cloud-messaging-push-scope",x=function(e){function t(t){var n=e.call(this,t)||this;return n.messageObserver_=null,n.onMessage_=Object(i.createSubscribe)(function(e){n.messageObserver_=e}),n.tokenRefreshObserver_=null,n.onTokenRefresh_=Object(i.createSubscribe)(function(e){n.tokenRefreshObserver_=e}),n.registrationToUse_,n.manifestCheckPromise_,n.messageObserver_=null,n.onMessage_=Object(i.createSubscribe)(function(e){n.messageObserver_=e}),n.tokenRefreshObserver_=null,n.onTokenRefresh_=Object(i.createSubscribe)(function(e){n.tokenRefreshObserver_=e}),n.setupSWMessageListener_(),n}return o.__extends(t,e),t.prototype.getToken=function(){var t=this;return this.isSupported_()?this.manifestCheck_().then(function(){return e.prototype.getToken.call(t)}):Promise.reject(this.errorFactory_.create(s.codes.UNSUPPORTED_BROWSER))},t.prototype.manifestCheck_=function(){var e=this;if(this.manifestCheckPromise_)return this.manifestCheckPromise_;var t=document.querySelector('link[rel="manifest"]');return this.manifestCheckPromise_=t?fetch(t.href).then(function(e){return e.json()}).catch(function(){}).then(function(t){if(t&&t.gcm_sender_id&&"103953800507"!==t.gcm_sender_id)throw e.errorFactory_.create(s.codes.INCORRECT_GCM_SENDER_ID)}):Promise.resolve(),this.manifestCheckPromise_},t.prototype.requestPermission=function(){return o.__awaiter(this,void 0,void 0,function(){var e=this;return o.__generator(this,function(t){return Notification.permission===C?[2]:[2,new Promise(function(t,n){var r=function(r){return r===C?t():n(r===T?e.errorFactory_.create(s.codes.PERMISSION_BLOCKED):e.errorFactory_.create(s.codes.PERMISSION_DEFAULT))},o=Notification.requestPermission(r);o&&o.then(r)})]})})},t.prototype.useServiceWorker=function(e){if(!(e instanceof ServiceWorkerRegistration))throw this.errorFactory_.create(s.codes.SW_REGISTRATION_EXPECTED);if(void 0!==this.registrationToUse_)throw this.errorFactory_.create(s.codes.USE_SW_BEFORE_GET_TOKEN);this.registrationToUse_=e},t.prototype.usePublicVapidKey=function(e){if("string"!=typeof e)throw this.errorFactory_.create(s.codes.INVALID_PUBLIC_VAPID_KEY);if(void 0!==this.publicVapidKeyToUse_)throw this.errorFactory_.create(s.codes.USE_PUBLIC_KEY_BEFORE_GET_TOKEN);var t=function(e){for(var t=(e+"=".repeat((4-e.length%4)%4)).replace(/\-/g,"+").replace(/_/g,"/"),n=window.atob(t),r=new Uint8Array(n.length),o=0;o<n.length;++o)r[o]=n.charCodeAt(o);return r}(e);if(65!==t.length)throw this.errorFactory_.create(s.codes.PUBLIC_KEY_DECRYPTION_FAILED);this.publicVapidKeyToUse_=t},t.prototype.onMessage=function(e,t,n){return this.onMessage_(e,t,n)},t.prototype.onTokenRefresh=function(e,t,n){return this.onTokenRefresh_(e,t,n)},t.prototype.waitForRegistrationToActivate_=function(e){var t=this,n=e.installing||e.waiting||e.active;return new Promise(function(r,o){if(n)if("activated"!==n.state)if("redundant"!==n.state){var i=function(){if("activated"===n.state)r(e);else{if("redundant"!==n.state)return;o(t.errorFactory_.create(s.codes.SW_REG_REDUNDANT))}n.removeEventListener("statechange",i)};n.addEventListener("statechange",i)}else o(t.errorFactory_.create(s.codes.SW_REG_REDUNDANT));else r(e);else o(t.errorFactory_.create(s.codes.NO_SW_IN_REG))})},t.prototype.getSWRegistration_=function(){var e=this;return this.registrationToUse_?this.waitForRegistrationToActivate_(this.registrationToUse_):(this.registrationToUse_=null,navigator.serviceWorker.register(R,{scope:A}).catch(function(t){throw e.errorFactory_.create(s.codes.FAILED_DEFAULT_REGISTRATION,{browserErrorMessage:t.message})}).then(function(t){return e.waitForRegistrationToActivate_(t).then(function(){return e.registrationToUse_=t,t.update(),t})}))},t.prototype.getPublicVapidKey_=function(){return this.publicVapidKeyToUse_?Promise.resolve(this.publicVapidKeyToUse_):Promise.resolve(h.DEFAULT_PUBLIC_VAPID_KEY)},t.prototype.getPushSubscription_=function(e,t){return e.pushManager.getSubscription().then(function(n){return n||e.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t})})},t.prototype.setupSWMessageListener_=function(){var e=this;"serviceWorker"in navigator&&navigator.serviceWorker.addEventListener("message",function(t){if(t.data&&t.data[N.TYPE_OF_MSG]){var n=t.data;switch(n[N.TYPE_OF_MSG]){case I.PUSH_MSG_RECEIVED:case I.NOTIFICATION_CLICKED:var r=n[N.DATA];e.messageObserver_&&e.messageObserver_.next(r)}}},!1)},t.prototype.isSupported_=function(){return"serviceWorker"in navigator&&"PushManager"in window&&"Notification"in window&&"fetch"in window&&ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification")&&PushSubscription.prototype.hasOwnProperty("getKey")},t}(O),D=function(e){function t(t){var n=e.call(this,t)||this;return self.addEventListener("push",function(e){return n.onPush_(e)},!1),self.addEventListener("pushsubscriptionchange",function(e){return n.onSubChange_(e)},!1),self.addEventListener("notificationclick",function(e){return n.onNotificationClick_(e)},!1),n.bgMessageHandler_=null,n}return o.__extends(t,e),t.prototype.onPush_=function(e){var t,n=this;try{t=e.data.json()}catch(e){return}var r=this.hasVisibleClients_().then(function(e){if(e)return t.notification||n.bgMessageHandler_?n.sendMessageToWindowClients_(t):void 0;var r=n.getNotificationData_(t);if(r){var o=r.title||"";return n.getSWRegistration_().then(function(e){return e.showNotification(o,r)})}return n.bgMessageHandler_?n.bgMessageHandler_(t):void 0});e.waitUntil(r)},t.prototype.onSubChange_=function(e){var t=this,n=this.getSWRegistration_().then(function(e){return e.pushManager.getSubscription().then(function(e){}).catch(function(n){return t.getTokenDetailsModel().getTokenDetailsFromSWScope(e.scope).then(function(e){if(!e)throw n;return t.deleteToken(e.fcmToken).then(function(){throw n})})})}).catch(function(e){throw t.errorFactory_.create(s.codes.UNABLE_TO_RESUBSCRIBE,{message:e})});e.waitUntil(n)},t.prototype.onNotificationClick_=function(e){var t=this;if(e.notification&&e.notification.data&&e.notification.data.FCM_MSG){e.stopImmediatePropagation(),e.notification.close();var n=e.notification.data.FCM_MSG;if(n.notification){var r=n.notification.click_action;if(r){var o=this.getWindowClient_(r).then(function(e){return e?e.focus():self.clients.openWindow(r)}).then(function(e){if(e){n.notification;delete n.notification;var r=k(I.NOTIFICATION_CLICKED,n);return t.attemptToMessageClient_(e,r)}});e.waitUntil(o)}}}},t.prototype.getNotificationData_=function(e){if(e&&"object"==typeof e.notification){var t,n=Object.assign({},e.notification);return n.data=((t={}).FCM_MSG=e,t),n}},t.prototype.setBackgroundMessageHandler=function(e){if(!e||"function"!=typeof e)throw this.errorFactory_.create(s.codes.BG_HANDLER_FUNCTION_EXPECTED);this.bgMessageHandler_=e},t.prototype.getWindowClient_=function(e){var t=new URL(e,self.location).href;return self.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(e){for(var n=null,r=0;r<e.length;r++){if(new URL(e[r].url,self.location).href===t){n=e[r];break}}return n||null})},t.prototype.attemptToMessageClient_=function(e,t){return o.__awaiter(this,void 0,void 0,function(){return o.__generator(this,function(n){return e?(e.postMessage(t),[2]):[2,Promise.reject(this.errorFactory_.create(s.codes.NO_WINDOW_CLIENT_TO_MSG))]})})},t.prototype.hasVisibleClients_=function(){return self.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(e){return e.some(function(e){return"visible"===e.visibilityState})})},t.prototype.sendMessageToWindowClients_=function(e){var t=this;return self.clients.matchAll({type:"window",includeUncontrolled:!0}).then(function(n){var r=k(I.PUSH_MSG_RECEIVED,e);return Promise.all(n.map(function(e){return t.attemptToMessageClient_(e,r)}))})},t.prototype.getSWRegistration_=function(){return Promise.resolve(self.registration)},t.prototype.getPublicVapidKey_=function(){var e=this;return this.getSWRegistration_().then(function(t){return e.getVapidDetailsModel().getVapidFromSWScope(t.scope)}).then(function(e){return null===e?h.DEFAULT_PUBLIC_VAPID_KEY:e})},t}(O),L=n(13);function M(e){var t={Messaging:x};e.INTERNAL.registerService("messaging",function(e){return self&&"ServiceWorkerGlobalScope"in self?new D(e):new x(e)},t)}n.d(t,"registerMessaging",function(){return M}),M(L.firebase)},function(e,t,n){"use strict";n.r(t);var r=n(13),o="https://firebasestorage.googleapis.com",i="https://firebasestorage.googleapis.com",a="/v0",s="/v0";var u="storageBucket",c=12e4,l=6e4,h=-9007199254740991,f=function(){function e(e,t){this.code_=d(e),this.message_="Firebase Storage: "+t,this.serverResponse_=null,this.name_="FirebaseError"}return e.prototype.codeProp=function(){return this.code},e.prototype.codeEquals=function(e){return d(e)===this.codeProp()},e.prototype.serverResponseProp=function(){return this.serverResponse_},e.prototype.setServerResponseProp=function(e){this.serverResponse_=e},Object.defineProperty(e.prototype,"name",{get:function(){return this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"code",{get:function(){return this.code_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"message",{get:function(){return this.message_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"serverResponse",{get:function(){return this.serverResponse_},enumerable:!0,configurable:!0}),e}(),p={UNKNOWN:"unknown",OBJECT_NOT_FOUND:"object-not-found",BUCKET_NOT_FOUND:"bucket-not-found",PROJECT_NOT_FOUND:"project-not-found",QUOTA_EXCEEDED:"quota-exceeded",UNAUTHENTICATED:"unauthenticated",UNAUTHORIZED:"unauthorized",RETRY_LIMIT_EXCEEDED:"retry-limit-exceeded",INVALID_CHECKSUM:"invalid-checksum",CANCELED:"canceled",INVALID_EVENT_NAME:"invalid-event-name",INVALID_URL:"invalid-url",INVALID_DEFAULT_BUCKET:"invalid-default-bucket",NO_DEFAULT_BUCKET:"no-default-bucket",CANNOT_SLICE_BLOB:"cannot-slice-blob",SERVER_FILE_WRONG_SIZE:"server-file-wrong-size",NO_DOWNLOAD_URL:"no-download-url",INVALID_ARGUMENT:"invalid-argument",INVALID_ARGUMENT_COUNT:"invalid-argument-count",APP_DELETED:"app-deleted",INVALID_ROOT_OPERATION:"invalid-root-operation",INVALID_FORMAT:"invalid-format",INTERNAL_ERROR:"internal-error"};function d(e){return"storage/"+e}function v(){return new f(p.UNKNOWN,"An unknown error occurred, please check the error payload for server response.")}function y(){return new f(p.CANCELED,"User canceled the upload/download.")}function m(){return new f(p.CANNOT_SLICE_BLOB,"Cannot slice blob for upload. Please retry the upload.")}function g(e,t,n){return new f(p.INVALID_ARGUMENT,"Invalid argument in `"+t+"` at index "+e+": "+n)}function _(){return new f(p.APP_DELETED,"The Firebase app was deleted.")}function b(e,t){return new f(p.INVALID_FORMAT,"String does not match format '"+e+"': "+t)}function w(e){throw new f(p.INTERNAL_ERROR,"Internal error: "+e)}var E={RAW:"raw",BASE64:"base64",BASE64URL:"base64url",DATA_URL:"data_url"};function C(e){switch(e){case E.RAW:case E.BASE64:case E.BASE64URL:case E.DATA_URL:return;default:throw"Expected one of the event types: ["+E.RAW+", "+E.BASE64+", "+E.BASE64URL+", "+E.DATA_URL+"]."}}var T=function(){return function(e,t){this.data=e,this.contentType=t||null}}();function S(e,t){switch(e){case E.RAW:return new T(O(t));case E.BASE64:case E.BASE64URL:return new T(P(e,t));case E.DATA_URL:return new T(function(e){var t=new N(e);return t.base64?P(E.BASE64,t.rest):function(e){var t;try{t=decodeURIComponent(e)}catch(e){throw b(E.DATA_URL,"Malformed data URL.")}return O(t)}(t.rest)}(t),function(e){return new N(e).contentType}(t))}throw v()}function O(e){for(var t=[],n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<=127)t.push(r);else if(r<=2047)t.push(192|r>>6,128|63&r);else if(55296==(64512&r))if(n<e.length-1&&56320==(64512&e.charCodeAt(n+1)))r=65536|(1023&r)<<10|1023&e.charCodeAt(++n),t.push(240|r>>18,128|r>>12&63,128|r>>6&63,128|63&r);else t.push(239,191,189);else 56320==(64512&r)?t.push(239,191,189):t.push(224|r>>12,128|r>>6&63,128|63&r)}return new Uint8Array(t)}function P(e,t){switch(e){case E.BASE64:var n=-1!==t.indexOf("-"),r=-1!==t.indexOf("_");if(n||r)throw b(e,"Invalid character '"+(n?"-":"_")+"' found: is it base64url encoded?");break;case E.BASE64URL:var o=-1!==t.indexOf("+"),i=-1!==t.indexOf("/");if(o||i)throw b(e,"Invalid character '"+(o?"+":"/")+"' found: is it base64 encoded?");t=t.replace(/-/g,"+").replace(/_/g,"/")}var a;try{a=atob(t)}catch(t){throw b(e,"Invalid character found")}for(var s=new Uint8Array(a.length),u=0;u<a.length;u++)s[u]=a.charCodeAt(u);return s}var N=function(){return function(e){this.base64=!1,this.contentType=null;var t=e.match(/^data:([^,]+)?,/);if(null===t)throw b(E.DATA_URL,"Must be formatted 'data:[<mediatype>][;base64],<data>");var n=t[1]||null;null!=n&&(this.base64=(r=n,o=";base64",r.length>=o.length&&r.substring(r.length-o.length)===o),this.contentType=this.base64?n.substring(0,n.length-";base64".length):n),this.rest=e.substring(e.indexOf(",")+1);var r,o}}();var I,k={STATE_CHANGED:"state_changed"},R={RUNNING:"running",PAUSING:"pausing",PAUSED:"paused",SUCCESS:"success",CANCELING:"canceling",CANCELED:"canceled",ERROR:"error"},A={RUNNING:"running",PAUSED:"paused",SUCCESS:"success",CANCELED:"canceled",ERROR:"error"};function x(e){switch(e){case R.RUNNING:case R.PAUSING:case R.CANCELING:return A.RUNNING;case R.PAUSED:return A.PAUSED;case R.SUCCESS:return A.SUCCESS;case R.CANCELED:return A.CANCELED;case R.ERROR:default:return A.ERROR}}function D(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function L(e,t){for(var n in e)D(e,n)&&t(n,e[n])}function M(e){if(null==e)return{};var t={};return L(e,function(e,n){t[e]=n}),t}function F(e){return new Promise(e)}function j(e){return Promise.resolve(e)}function U(e){return null!=e}function V(e){return void 0!==e}function W(e){return"function"==typeof e}function B(e){return"object"==typeof e}function H(e){return B(e)&&null!==e}function K(e){return"string"==typeof e||e instanceof String}function q(e){return z()&&e instanceof Blob}function z(){return"undefined"!=typeof Blob}!function(e){e[e.NO_ERROR=0]="NO_ERROR",e[e.NETWORK_ERROR=1]="NETWORK_ERROR",e[e.ABORT=2]="ABORT"}(I||(I={}));var G=function(){function e(){var e=this;this.sent_=!1,this.xhr_=new XMLHttpRequest,this.errorCode_=I.NO_ERROR,this.sendPromise_=F(function(t,n){e.xhr_.addEventListener("abort",function(n){e.errorCode_=I.ABORT,t(e)}),e.xhr_.addEventListener("error",function(n){e.errorCode_=I.NETWORK_ERROR,t(e)}),e.xhr_.addEventListener("load",function(n){t(e)})})}return e.prototype.send=function(e,t,n,r){var o=this;if(this.sent_)throw w("cannot .send() more than once");(this.sent_=!0,this.xhr_.open(t,e,!0),U(r))&&L(r,function(e,t){o.xhr_.setRequestHeader(e,t.toString())});return U(n)?this.xhr_.send(n):this.xhr_.send(),this.sendPromise_},e.prototype.getErrorCode=function(){if(!this.sent_)throw w("cannot .getErrorCode() before sending");return this.errorCode_},e.prototype.getStatus=function(){if(!this.sent_)throw w("cannot .getStatus() before sending");try{return this.xhr_.status}catch(e){return-1}},e.prototype.getResponseText=function(){if(!this.sent_)throw w("cannot .getResponseText() before sending");return this.xhr_.responseText},e.prototype.abort=function(){this.xhr_.abort()},e.prototype.getResponseHeader=function(e){return this.xhr_.getResponseHeader(e)},e.prototype.addUploadProgressListener=function(e){U(this.xhr_.upload)&&this.xhr_.upload.addEventListener("progress",e)},e.prototype.removeUploadProgressListener=function(e){U(this.xhr_.upload)&&this.xhr_.upload.removeEventListener("progress",e)},e}(),Q=function(){function e(){}return e.prototype.createXhrIo=function(){return new G},e}();function Y(e){var t,n;try{t=JSON.parse(e)}catch(e){return null}return B(n=t)&&!Array.isArray(n)?t:null}var X=function(){function e(e,t){this.bucket=e,this.path_=t}return Object.defineProperty(e.prototype,"path",{get:function(){return this.path_},enumerable:!0,configurable:!0}),e.prototype.fullServerUrl=function(){var e=encodeURIComponent;return"/b/"+e(this.bucket)+"/o/"+e(this.path)},e.prototype.bucketOnlyServerUrl=function(){return"/b/"+encodeURIComponent(this.bucket)+"/o"},e.makeFromBucketSpec=function(t){var n,r;try{n=e.makeFromUrl(t)}catch(n){return new e(t,"")}if(""===n.path)return n;throw r=t,new f(p.INVALID_DEFAULT_BUCKET,"Invalid default bucket '"+r+"'.")},e.makeFromUrl=function(t){var n=null;for(var r=[{regex:new RegExp("^gs://([A-Za-z0-9.\\-]+)(/(.*))?$","i"),indices:{bucket:1,path:3},postModify:function(e){"/"===e.path.charAt(e.path.length-1)&&(e.path_=e.path_.slice(0,-1))}},{regex:new RegExp("^https?://firebasestorage\\.googleapis\\.com/v[A-Za-z0-9_]+/b/([A-Za-z0-9.\\-]+)/o(/([^?#]*).*)?$","i"),indices:{bucket:1,path:3},postModify:function(e){e.path_=decodeURIComponent(e.path)}}],o=0;o<r.length;o++){var i=r[o],a=i.regex.exec(t);if(a){var s=a[i.indices.bucket],u=a[i.indices.path];u||(u=""),n=new e(s,u),i.postModify(n);break}}if(null==n)throw function(e){return new f(p.INVALID_URL,"Invalid URL '"+e+"'.")}(t);return n},e}();function $(e){var t=e.lastIndexOf("/",e.length-2);return-1===t?e:e.slice(t+1)}function J(e){return o+a+e}function Z(e){return o+s+e}function ee(e){var t=encodeURIComponent,n="?";return L(e,function(e,r){var o=t(e)+"="+t(r);n=n+o+"&"}),n=n.slice(0,-1)}function te(e,t){return t}var ne=function(){return function(e,t,n,r){this.server=e,this.local=t||e,this.writable=!!n,this.xform=r||te}}(),re=null;function oe(){if(re)return re;var e=[];e.push(new ne("bucket")),e.push(new ne("generation")),e.push(new ne("metageneration")),e.push(new ne("name","fullPath",!0));var t=new ne("name");t.xform=function(e,t){return function(e){return!K(e)||e.length<2?e:$(e=e)}(t)},e.push(t);var n=new ne("size");return n.xform=function(e,t){return U(t)?+t:t},e.push(n),e.push(new ne("timeCreated")),e.push(new ne("updated")),e.push(new ne("md5Hash",null,!0)),e.push(new ne("cacheControl",null,!0)),e.push(new ne("contentDisposition",null,!0)),e.push(new ne("contentEncoding",null,!0)),e.push(new ne("contentLanguage",null,!0)),e.push(new ne("contentType",null,!0)),e.push(new ne("metadata","customMetadata",!0)),e.push(new ne("downloadTokens","downloadURLs",!1,function(e,t){if(!(K(t)&&t.length>0))return[];var n=encodeURIComponent;return t.split(",").map(function(t){var r=e.bucket,o=e.fullPath;return function(e){return i+a+e}("/b/"+n(r)+"/o/"+n(o))+ee({alt:"media",token:t})})})),re=e}function ie(e,t,n){for(var r={type:"file"},o=n.length,i=0;i<o;i++){var a=n[i];r[a.local]=a.xform(r,t[a.server])}return function(e,t){Object.defineProperty(e,"ref",{get:function(){var n=e.bucket,r=e.fullPath,o=new X(n,r);return t.makeStorageReference(o)}})}(r,e),r}function ae(e,t){for(var n={},r=t.length,o=0;o<r;o++){var i=t[o];i.writable&&(n[i.server]=e[i.local])}return JSON.stringify(n)}function se(e){if(!(e&&B(e)))throw"Expected Metadata object.";for(var t in e){var n=e[t];if("customMetadata"===t){if(!B(n))throw"Expected object for 'customMetadata' mapping."}else if(H(n))throw"Mapping for '"+t+"' cannot be an object."}}function ue(e,t,n){for(var r=t.length,o=t.length,i=0;i<t.length;i++)if(t[i].optional){r=i;break}var a,s,u,c,l,h;if(!(r<=n.length&&n.length<=o))throw a=r,s=o,u=e,c=n.length,a===s?(l=a,h=1===a?"argument":"arguments"):(l="between "+a+" and "+s,h="arguments"),new f(p.INVALID_ARGUMENT_COUNT,"Invalid argument count in `"+u+"`: Expected "+l+" "+h+", received "+c+".");for(i=0;i<n.length;i++)try{t[i].validator(n[i])}catch(t){throw t instanceof Error?g(i,e,t.message):g(i,e,t)}}var ce=function(){return function(e,t){var n=this;this.validator=function(t){n.optional&&!V(t)||e(t)},this.optional=!!t}}();function le(e,t){function n(e){if(!K(e))throw"Expected string."}var r,o,i;return e?(o=n,i=e,r=function(e){o(e),i(e)}):r=n,new ce(r,t)}function he(e){return new ce(se,e)}function fe(){return new ce(function(e){if(!(function(e){return"number"==typeof e||e instanceof Number}(e)&&e>=0))throw"Expected a number 0 or greater."})}function pe(e,t){return new ce(function(t){if(!(null===t||U(t)&&t instanceof Object))throw"Expected an Object.";void 0!==e&&null!==e&&e(t)},t)}function de(e){return new ce(function(e){if(null!==e&&!W(e))throw"Expected a Function."},e)}function ve(){return"undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof WebKitBlobBuilder?WebKitBlobBuilder:void 0}var ye=function(){function e(e,t){var n=0,r="";q(e)?(this.data_=e,n=e.size,r=e.type):e instanceof ArrayBuffer?(t?this.data_=new Uint8Array(e):(this.data_=new Uint8Array(e.byteLength),this.data_.set(new Uint8Array(e))),n=this.data_.length):e instanceof Uint8Array&&(t?this.data_=e:(this.data_=new Uint8Array(e.length),this.data_.set(e)),n=e.length),this.size_=n,this.type_=r}return e.prototype.size=function(){return this.size_},e.prototype.type=function(){return this.type_},e.prototype.slice=function(t,n){if(q(this.data_)){var r=this.data_,o=(a=t,s=n,(i=r).webkitSlice?i.webkitSlice(a,s):i.mozSlice?i.mozSlice(a,s):i.slice?i.slice(a,s):null);return null===o?null:new e(o)}var i,a,s;return new e(new Uint8Array(this.data_.buffer,t,n-t),!0)},e.getBlob=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(z()){var r=t.map(function(t){return t instanceof e?t.data_:t});return new e(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=ve();if(void 0!==n){for(var r=new n,o=0;o<e.length;o++)r.append(e[o]);return r.getBlob()}if(z())return new Blob(e);throw Error("This browser doesn't seem to support creating Blobs")}.apply(null,r))}var o=t.map(function(e){return K(e)?S(E.RAW,e).data:e.data_}),i=0;o.forEach(function(e){i+=e.byteLength});var a=new Uint8Array(i),s=0;return o.forEach(function(e){for(var t=0;t<e.length;t++)a[s++]=e[t]}),new e(a,!0)},e.prototype.uploadData=function(){return this.data_},e}();function me(e,t){return-1!==e.indexOf(t)}var ge=function(){return function(e,t,n,r){this.url=e,this.method=t,this.handler=n,this.timeout=r,this.urlParams={},this.headers={},this.body=null,this.errorHandler=null,this.progressCallback=null,this.successCodes=[200],this.additionalRetryCodes=[]}}();function _e(e){if(!e)throw v()}function be(e,t){return function(n,r){var o=function(e,t,n){var r=Y(t);return null===r?null:ie(e,r,n)}(e,r,t);return _e(null!==o),o}}function we(e){return function(t,n){var r,o,i;return 401===t.getStatus()?r=new f(p.UNAUTHENTICATED,"User is not authenticated, please authenticate using Firebase Authentication and try again."):402===t.getStatus()?(i=e.bucket,r=new f(p.QUOTA_EXCEEDED,"Quota for bucket '"+i+"' exceeded, please view quota on https://firebase.google.com/pricing/.")):403===t.getStatus()?(o=e.path,r=new f(p.UNAUTHORIZED,"User does not have permission to access '"+o+"'.")):r=n,r.setServerResponseProp(n.serverResponseProp()),r}}function Ee(e){var t=we(e);return function(n,r){var o,i=t(n,r);return 404===n.getStatus()&&(o=e.path,i=new f(p.OBJECT_NOT_FOUND,"Object '"+o+"' does not exist.")),i.setServerResponseProp(r.serverResponseProp()),i}}function Ce(e,t,n){var r=J(t.fullServerUrl()),o=e.maxOperationRetryTime(),i=new ge(r,"GET",be(e,n),o);return i.errorHandler=Ee(t),i}function Te(e,t,n){var r=M(n);return r.fullPath=e.path,r.size=t.size(),r.contentType||(r.contentType=function(e,t){return e&&e.contentType||t&&t.type()||"application/octet-stream"}(null,t)),r}var Se=function(){return function(e,t,n,r){this.current=e,this.total=t,this.finalized=!!n,this.metadata=r||null}}();function Oe(e,t){var n;try{n=e.getResponseHeader("X-Goog-Upload-Status")}catch(e){_e(!1)}return _e(me(t||["active"],n)),n}function Pe(e,t,n,r,o,i,a,s){var u=new Se(0,0);if(a?(u.current=a.current,u.total=a.total):(u.current=0,u.total=r.size()),r.size()!==u.total)throw new f(p.SERVER_FILE_WRONG_SIZE,"Server recorded incorrect upload file size, please retry the upload.");var c=u.total-u.current,l=c;o>0&&(l=Math.min(l,o));var h=u.current,d=h+l,v={"X-Goog-Upload-Command":l===c?"upload, finalize":"upload","X-Goog-Upload-Offset":u.current},y=r.slice(h,d);if(null===y)throw m();var g=t.maxUploadRetryTime(),_=new ge(n,"POST",function(e,n){var o,a=Oe(e,["active","final"]),s=u.current+l,c=r.size();return o="final"===a?be(t,i)(e,n):null,new Se(s,c,"final"===a,o)},g);return _.headers=v,_.body=y.uploadData(),_.progressCallback=s||null,_.errorHandler=we(e),_}var Ne=function(){return function(e,t,n){if(W(e)||U(t)||U(n))this.next=e,this.error=t||null,this.complete=n||null;else{var r=e;this.next=r.next||null,this.error=r.error||null,this.complete=r.complete||null}}}(),Ie=function(){function e(e,t,n,r,o,i){this.bytesTransferred=e,this.totalBytes=t,this.state=n,this.metadata=r,this.task=o,this.ref=i}return Object.defineProperty(e.prototype,"downloadURL",{get:function(){if(null!==this.metadata){var e=this.metadata.downloadURLs;return null!=e&&null!=e[0]?e[0]:null}return null},enumerable:!0,configurable:!0}),e}();function ke(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];j(!0).then(function(){e.apply(null,t)})}}var Re=function(){function e(e,t,n,r,o,i){void 0===i&&(i=null);var a=this;this.transferred_=0,this.needToFetchStatus_=!1,this.needToFetchMetadata_=!1,this.observers_=[],this.error_=null,this.uploadUrl_=null,this.request_=null,this.chunkMultiplier_=1,this.resolve_=null,this.reject_=null,this.ref_=e,this.authWrapper_=t,this.location_=n,this.blob_=o,this.metadata_=i,this.mappings_=r,this.resumable_=this.shouldDoResumable_(this.blob_),this.state_=R.RUNNING,this.errorHandler_=function(e){a.request_=null,a.chunkMultiplier_=1,e.codeEquals(p.CANCELED)?(a.needToFetchStatus_=!0,a.completeTransitions_()):(a.error_=e,a.transition_(R.ERROR))},this.metadataErrorHandler_=function(e){a.request_=null,e.codeEquals(p.CANCELED)?a.completeTransitions_():(a.error_=e,a.transition_(R.ERROR))},this.promise_=F(function(e,t){a.resolve_=e,a.reject_=t,a.start_()}),this.promise_.then(null,function(){})}return e.prototype.makeProgressCallback_=function(){var e=this,t=this.transferred_;return function(n,r){e.updateProgress_(t+n)}},e.prototype.shouldDoResumable_=function(e){return e.size()>262144},e.prototype.start_=function(){this.state_===R.RUNNING&&null===this.request_&&(this.resumable_?null===this.uploadUrl_?this.createResumable_():this.needToFetchStatus_?this.fetchStatus_():this.needToFetchMetadata_?this.fetchMetadata_():this.continueUpload_():this.oneShotUpload_())},e.prototype.resolveToken_=function(e){var t=this;this.authWrapper_.getAuthToken().then(function(n){switch(t.state_){case R.RUNNING:e(n);break;case R.CANCELING:t.transition_(R.CANCELED);break;case R.PAUSING:t.transition_(R.PAUSED)}})},e.prototype.createResumable_=function(){var e=this;this.resolveToken_(function(t){var n=function(e,t,n,r,o){var i=t.bucketOnlyServerUrl(),a=Te(t,r,o),s={name:a.fullPath},u=Z(i),c={"X-Goog-Upload-Protocol":"resumable","X-Goog-Upload-Command":"start","X-Goog-Upload-Header-Content-Length":r.size(),"X-Goog-Upload-Header-Content-Type":a.contentType,"Content-Type":"application/json; charset=utf-8"},l=ae(a,n),h=e.maxUploadRetryTime(),f=new ge(u,"POST",function(e,t){var n;Oe(e);try{n=e.getResponseHeader("X-Goog-Upload-URL")}catch(e){_e(!1)}return _e(K(n)),n},h);return f.urlParams=s,f.headers=c,f.body=l,f.errorHandler=we(t),f}(e.authWrapper_,e.location_,e.mappings_,e.blob_,e.metadata_),r=e.authWrapper_.makeRequest(n,t);e.request_=r,r.getPromise().then(function(t){e.request_=null,e.uploadUrl_=t,e.needToFetchStatus_=!1,e.completeTransitions_()},e.errorHandler_)})},e.prototype.fetchStatus_=function(){var e=this,t=this.uploadUrl_;this.resolveToken_(function(n){var r=function(e,t,n,r){var o=e.maxUploadRetryTime(),i=new ge(n,"POST",function(e,t){var n,o=Oe(e,["active","final"]);try{n=e.getResponseHeader("X-Goog-Upload-Size-Received")}catch(e){_e(!1)}var i=parseInt(n,10);return _e(!isNaN(i)),new Se(i,r.size(),"final"===o)},o);return i.headers={"X-Goog-Upload-Command":"query"},i.errorHandler=we(t),i}(e.authWrapper_,e.location_,t,e.blob_),o=e.authWrapper_.makeRequest(r,n);e.request_=o,o.getPromise().then(function(t){t=t,e.request_=null,e.updateProgress_(t.current),e.needToFetchStatus_=!1,t.finalized&&(e.needToFetchMetadata_=!0),e.completeTransitions_()},e.errorHandler_)})},e.prototype.continueUpload_=function(){var e=this,t=262144*this.chunkMultiplier_,n=new Se(this.transferred_,this.blob_.size()),r=this.uploadUrl_;this.resolveToken_(function(o){var i;try{i=Pe(e.location_,e.authWrapper_,r,e.blob_,t,e.mappings_,n,e.makeProgressCallback_())}catch(t){return e.error_=t,void e.transition_(R.ERROR)}var a=e.authWrapper_.makeRequest(i,o);e.request_=a,a.getPromise().then(function(t){e.increaseMultiplier_(),e.request_=null,e.updateProgress_(t.current),t.finalized?(e.metadata_=t.metadata,e.transition_(R.SUCCESS)):e.completeTransitions_()},e.errorHandler_)})},e.prototype.increaseMultiplier_=function(){262144*this.chunkMultiplier_<33554432&&(this.chunkMultiplier_*=2)},e.prototype.fetchMetadata_=function(){var e=this;this.resolveToken_(function(t){var n=Ce(e.authWrapper_,e.location_,e.mappings_),r=e.authWrapper_.makeRequest(n,t);e.request_=r,r.getPromise().then(function(t){e.request_=null,e.metadata_=t,e.transition_(R.SUCCESS)},e.metadataErrorHandler_)})},e.prototype.oneShotUpload_=function(){var e=this;this.resolveToken_(function(t){var n=function(e,t,n,r,o){var i=t.bucketOnlyServerUrl(),a={"X-Goog-Upload-Protocol":"multipart"},s=function(){for(var e="",t=0;t<2;t++)e+=Math.random().toString().slice(2);return e}();a["Content-Type"]="multipart/related; boundary="+s;var u=Te(t,r,o),c="--"+s+"\r\nContent-Type: application/json; charset=utf-8\r\n\r\n"+ae(u,n)+"\r\n--"+s+"\r\nContent-Type: "+u.contentType+"\r\n\r\n",l="\r\n--"+s+"--",h=ye.getBlob(c,r,l);if(null===h)throw m();var f={name:u.fullPath},p=Z(i),d=e.maxUploadRetryTime(),v=new ge(p,"POST",be(e,n),d);return v.urlParams=f,v.headers=a,v.body=h.uploadData(),v.errorHandler=we(t),v}(e.authWrapper_,e.location_,e.mappings_,e.blob_,e.metadata_),r=e.authWrapper_.makeRequest(n,t);e.request_=r,r.getPromise().then(function(t){e.request_=null,e.metadata_=t,e.updateProgress_(e.blob_.size()),e.transition_(R.SUCCESS)},e.errorHandler_)})},e.prototype.updateProgress_=function(e){var t=this.transferred_;this.transferred_=e,this.transferred_!==t&&this.notifyObservers_()},e.prototype.transition_=function(e){if(this.state_!==e)switch(e){case R.CANCELING:case R.PAUSING:this.state_=e,null!==this.request_&&this.request_.cancel();break;case R.RUNNING:var t=this.state_===R.PAUSED;this.state_=e,t&&(this.notifyObservers_(),this.start_());break;case R.PAUSED:this.state_=e,this.notifyObservers_();break;case R.CANCELED:this.error_=y(),this.state_=e,this.notifyObservers_();break;case R.ERROR:case R.SUCCESS:this.state_=e,this.notifyObservers_()}},e.prototype.completeTransitions_=function(){switch(this.state_){case R.PAUSING:this.transition_(R.PAUSED);break;case R.CANCELING:this.transition_(R.CANCELED);break;case R.RUNNING:this.start_()}},Object.defineProperty(e.prototype,"snapshot",{get:function(){var e=x(this.state_);return new Ie(this.transferred_,this.blob_.size(),e,this.metadata_,this,this.ref_)},enumerable:!0,configurable:!0}),e.prototype.on=function(e,t,n,r){void 0===t&&(t=void 0),void 0===n&&(n=void 0),void 0===r&&(r=void 0);var o="Expected a function or an Object with one of `next`, `error`, `complete` properties.",i=de(!0).validator,a=pe(null,!0).validator;function s(e){try{return void i(e)}catch(e){}try{if(a(e),!(V(e.next)||V(e.error)||V(e.complete)))throw"";return}catch(e){throw o}}ue("on",[le(function(t){if(e!==k.STATE_CHANGED)throw"Expected one of the event types: ["+k.STATE_CHANGED+"]."}),pe(s,!0),de(!0),de(!0)],arguments);var u=this;function c(e){return function(t,n,o){null!==e&&ue("on",e,arguments);var i=new Ne(t,n,r);return u.addObserver_(i),function(){u.removeObserver_(i)}}}var l=[pe(function(e){if(null===e)throw o;s(e)}),de(!0),de(!0)];return!(V(t)||V(n)||V(r))?c(l):c(null)(t,n,r)},e.prototype.then=function(e,t){return this.promise_.then(e,t)},e.prototype.catch=function(e){return this.then(null,e)},e.prototype.addObserver_=function(e){this.observers_.push(e),this.notifyObserver_(e)},e.prototype.removeObserver_=function(e){var t,n,r;t=this.observers_,n=e,-1!==(r=t.indexOf(n))&&t.splice(r,1)},e.prototype.notifyObservers_=function(){var e,t=this;this.finishPromise_(),(e=this.observers_,Array.prototype.slice.call(e)).forEach(function(e){t.notifyObserver_(e)})},e.prototype.finishPromise_=function(){if(null!==this.resolve_){var e=!0;switch(x(this.state_)){case A.SUCCESS:ke(this.resolve_.bind(null,this.snapshot))();break;case A.CANCELED:case A.ERROR:ke(this.reject_.bind(null,this.error_))();break;default:e=!1}e&&(this.resolve_=null,this.reject_=null)}},e.prototype.notifyObserver_=function(e){switch(x(this.state_)){case A.RUNNING:case A.PAUSED:null!==e.next&&ke(e.next.bind(e,this.snapshot))();break;case A.SUCCESS:null!==e.complete&&ke(e.complete.bind(e))();break;case A.CANCELED:case A.ERROR:null!==e.error&&ke(e.error.bind(e,this.error_))();break;default:null!==e.error&&ke(e.error.bind(e,this.error_))()}},e.prototype.resume=function(){ue("resume",[],arguments);var e=this.state_===R.PAUSED||this.state_===R.PAUSING;return e&&this.transition_(R.RUNNING),e},e.prototype.pause=function(){ue("pause",[],arguments);var e=this.state_===R.RUNNING;return e&&this.transition_(R.PAUSING),e},e.prototype.cancel=function(){ue("cancel",[],arguments);var e=this.state_===R.RUNNING||this.state_===R.PAUSING;return e&&this.transition_(R.CANCELING),e},e}(),Ae=function(){function e(e,t){this.authWrapper=e,this.location=t instanceof X?t:X.makeFromUrl(t)}return e.prototype.toString=function(){return ue("toString",[],arguments),"gs://"+this.location.bucket+"/"+this.location.path},e.prototype.newRef=function(t,n){return new e(t,n)},e.prototype.mappings=function(){return oe()},e.prototype.child=function(e){ue("child",[le()],arguments);var t=function(e,t){var n=t.split("/").filter(function(e){return e.length>0}).join("/");return 0===e.length?n:e+"/"+n}(this.location.path,e),n=new X(this.location.bucket,t);return this.newRef(this.authWrapper,n)},Object.defineProperty(e.prototype,"parent",{get:function(){var e=function(e){if(0==e.length)return null;var t=e.lastIndexOf("/");return-1===t?"":e.slice(0,t)}(this.location.path);if(null===e)return null;var t=new X(this.location.bucket,e);return this.newRef(this.authWrapper,t)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"root",{get:function(){var e=new X(this.location.bucket,"");return this.newRef(this.authWrapper,e)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"bucket",{get:function(){return this.location.bucket},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"fullPath",{get:function(){return this.location.path},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return $(this.location.path)},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"storage",{get:function(){return this.authWrapper.service()},enumerable:!0,configurable:!0}),e.prototype.put=function(e,t){return void 0===t&&(t=null),ue("put",[new ce(function(e){if(!(e instanceof Uint8Array||e instanceof ArrayBuffer||z()&&e instanceof Blob))throw"Expected Blob or File."}),he(!0)],arguments),this.throwIfRoot_("put"),new Re(this,this.authWrapper,this.location,this.mappings(),new ye(e),t)},e.prototype.putString=function(e,t,n){void 0===t&&(t=E.RAW),ue("putString",[le(),le(C,!0),he(!0)],arguments),this.throwIfRoot_("putString");var r=S(t,e),o=M(n);return!U(o.contentType)&&U(r.contentType)&&(o.contentType=r.contentType),new Re(this,this.authWrapper,this.location,this.mappings(),new ye(r.data,!0),o)},e.prototype.delete=function(){ue("delete",[],arguments),this.throwIfRoot_("delete");var e=this;return this.authWrapper.getAuthToken().then(function(t){var n=function(e,t){var n=J(t.fullServerUrl()),r=e.maxOperationRetryTime(),o=new ge(n,"DELETE",function(e,t){},r);return o.successCodes=[200,204],o.errorHandler=Ee(t),o}(e.authWrapper,e.location);return e.authWrapper.makeRequest(n,t).getPromise()})},e.prototype.getMetadata=function(){ue("getMetadata",[],arguments),this.throwIfRoot_("getMetadata");var e=this;return this.authWrapper.getAuthToken().then(function(t){var n=Ce(e.authWrapper,e.location,e.mappings());return e.authWrapper.makeRequest(n,t).getPromise()})},e.prototype.updateMetadata=function(e){ue("updateMetadata",[he()],arguments),this.throwIfRoot_("updateMetadata");var t=this;return this.authWrapper.getAuthToken().then(function(n){var r=function(e,t,n,r){var o=J(t.fullServerUrl()),i=ae(n,r),a=e.maxOperationRetryTime(),s=new ge(o,"PATCH",be(e,r),a);return s.headers={"Content-Type":"application/json; charset=utf-8"},s.body=i,s.errorHandler=Ee(t),s}(t.authWrapper,t.location,e,t.mappings());return t.authWrapper.makeRequest(r,n).getPromise()})},e.prototype.getDownloadURL=function(){return ue("getDownloadURL",[],arguments),this.throwIfRoot_("getDownloadURL"),this.getMetadata().then(function(e){var t=e.downloadURLs[0];if(U(t))return t;throw new f(p.NO_DOWNLOAD_URL,"The given file does not have any download URLs.")})},e.prototype.throwIfRoot_=function(e){if(""===this.location.path)throw function(e){return new f(p.INVALID_ROOT_OPERATION,"The operation '"+e+"' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').")}(e)},e}(),xe=function(){function e(e){this.promise_=function(e){return Promise.reject(e)}(e)}return e.prototype.getPromise=function(){return this.promise_},e.prototype.cancel=function(e){void 0===e&&(e=!1)},e}(),De=function(){function e(){this.map_={},this.id_=h}return e.prototype.addRequest=function(e){var t=this.id_;this.id_++,this.map_[t]=e;var n=this;function r(){delete n.map_[t]}e.getPromise().then(r,r)},e.prototype.clear=function(){L(this.map_,function(e,t){t&&t.cancel(!0)}),this.map_={}},e}(),Le=function(){function e(t,n,r,o,i){if(this.bucket_=null,this.deleted_=!1,this.app_=t,null!==this.app_){var a=this.app_.options;U(a)&&(this.bucket_=e.extractBucket_(a))}this.storageRefMaker_=n,this.requestMaker_=r,this.pool_=i,this.service_=o,this.maxOperationRetryTime_=c,this.maxUploadRetryTime_=l,this.requestMap_=new De}return e.extractBucket_=function(e){var t=e[u]||null;return null==t?null:X.makeFromBucketSpec(t).bucket},e.prototype.getAuthToken=function(){return null!==this.app_&&U(this.app_.INTERNAL)&&U(this.app_.INTERNAL.getToken)?this.app_.INTERNAL.getToken().then(function(e){return null!==e?e.accessToken:null},function(e){return null}):j(null)},e.prototype.bucket=function(){if(this.deleted_)throw _();return this.bucket_},e.prototype.service=function(){return this.service_},e.prototype.makeStorageReference=function(e){return this.storageRefMaker_(this,e)},e.prototype.makeRequest=function(e,t){if(this.deleted_)return new xe(_());var n=this.requestMaker_(e,t,this.pool_);return this.requestMap_.addRequest(n),n},e.prototype.deleteApp=function(){this.deleted_=!0,this.app_=null,this.requestMap_.clear()},e.prototype.maxUploadRetryTime=function(){return this.maxUploadRetryTime_},e.prototype.setMaxUploadRetryTime=function(e){this.maxUploadRetryTime_=e},e.prototype.maxOperationRetryTime=function(){return this.maxOperationRetryTime_},e.prototype.setMaxOperationRetryTime=function(e){this.maxOperationRetryTime_=e},e}();var Me=function(){function e(e,t,n,r,o,i,a,s,u,c,l){this.pendingXhr_=null,this.backoffId_=null,this.resolve_=null,this.reject_=null,this.canceled_=!1,this.appDelete_=!1,this.url_=e,this.method_=t,this.headers_=n,this.body_=r,this.successCodes_=o.slice(),this.additionalRetryCodes_=i.slice(),this.callback_=a,this.errorCallback_=s,this.progressCallback_=c,this.timeout_=u,this.pool_=l;var h=this;this.promise_=F(function(e,t){h.resolve_=e,h.reject_=t,h.start_()})}return e.prototype.start_=function(){var e=this;function t(t,n){var r,o=e.resolve_,i=e.reject_,a=n.xhr;if(n.wasSuccessCode)try{var s=e.callback_(a,a.getResponseText());V(s)?o(s):o()}catch(e){i(e)}else null!==a?((r=v()).setServerResponseProp(a.getResponseText()),e.errorCallback_?i(e.errorCallback_(a,r)):i(r)):n.canceled?i(r=e.appDelete_?_():y()):i(r=new f(p.RETRY_LIMIT_EXCEEDED,"Max retry time for operation exceeded, please try again."))}this.canceled_?t(0,new Fe(!1,null,!0)):this.backoffId_=function(e,t,n){var r=1,o=null,i=!1,a=0;function s(){return 2===a}var u=!1;function c(){u||(u=!0,t.apply(null,arguments))}function l(t){o=setTimeout(function(){o=null,e(h,s())},t)}function h(e){for(var t,n=[],o=1;o<arguments.length;o++)n[o-1]=arguments[o];u||(e?c.apply(null,arguments):s()||i?c.apply(null,arguments):(r<64&&(r*=2),1===a?(a=2,t=0):t=1e3*(r+Math.random()),l(t)))}var f=!1;function p(e){f||(f=!0,u||(null!==o?(e||(a=2),clearTimeout(o),l(0)):e||(a=1)))}return l(0),setTimeout(function(){i=!0,p(!0)},n),p}(function(t,n){if(n)t(!1,new Fe(!1,null,!0));else{var r=e.pool_.createXhrIo();e.pendingXhr_=r,null!==e.progressCallback_&&r.addUploadProgressListener(o),r.send(e.url_,e.method_,e.body_,e.headers_).then(function(n){null!==e.progressCallback_&&n.removeUploadProgressListener(o),e.pendingXhr_=null;var r=(n=n).getErrorCode()===I.NO_ERROR,i=n.getStatus();if(r&&!e.isRetryStatusCode_(i)){var a=me(e.successCodes_,i);t(!0,new Fe(a,n))}else{var s=n.getErrorCode()===I.ABORT;t(!1,new Fe(!1,null,s))}})}function o(t){var n=t.loaded,r=t.lengthComputable?t.total:-1;null!==e.progressCallback_&&e.progressCallback_(n,r)}},t,this.timeout_)},e.prototype.getPromise=function(){return this.promise_},e.prototype.cancel=function(e){this.canceled_=!0,this.appDelete_=e||!1,null!==this.backoffId_&&(0,this.backoffId_)(!1),null!==this.pendingXhr_&&this.pendingXhr_.abort()},e.prototype.isRetryStatusCode_=function(e){var t=e>=500&&e<600,n=me([408,429],e),r=me(this.additionalRetryCodes_,e);return t||n||r},e}(),Fe=function(){return function(e,t,n){this.wasSuccessCode=e,this.xhr=t,this.canceled=!!n}}();function je(e,t,n){var o=ee(e.urlParams),i=e.url+o,a=M(e.headers);return function(e,t){null!==t&&t.length>0&&(e.Authorization="Firebase "+t)}(a,t),function(e){var t=void 0!==r.default?r.default.SDK_VERSION:"AppManager";e["X-Firebase-Storage-Version"]="webjs/"+t}(a),new Me(i,e.method,a,e.body,e.successCodes,e.additionalRetryCodes,e.handler,e.errorHandler,e.timeout,e.progressCallback,n)}var Ue=function(){function e(e,t,n){if(this.bucket_=null,this.authWrapper_=new Le(e,function(e,t){return new Ae(e,t)},je,this,t),this.app_=e,null!=n)this.bucket_=X.makeFromBucketSpec(n);else{var r=this.authWrapper_.bucket();null!=r&&(this.bucket_=new X(r,""))}this.internals_=new Ve(this)}return e.prototype.ref=function(e){if(ue("ref",[le(function(e){if(/^[A-Za-z]+:\/\//.test(e))throw"Expected child path but got a URL, use refFromURL instead."},!0)],arguments),null==this.bucket_)throw new Error("No Storage Bucket defined in Firebase Options.");var t=new Ae(this.authWrapper_,this.bucket_);return null!=e?t.child(e):t},e.prototype.refFromURL=function(e){return ue("refFromURL",[le(function(e){if(!/^[A-Za-z]+:\/\//.test(e))throw"Expected full URL but got a child path, use ref instead.";try{X.makeFromUrl(e)}catch(e){throw"Expected valid full URL but got an invalid one."}},!1)],arguments),new Ae(this.authWrapper_,e)},Object.defineProperty(e.prototype,"maxUploadRetryTime",{get:function(){return this.authWrapper_.maxUploadRetryTime()},enumerable:!0,configurable:!0}),e.prototype.setMaxUploadRetryTime=function(e){ue("setMaxUploadRetryTime",[fe()],arguments),this.authWrapper_.setMaxUploadRetryTime(e)},Object.defineProperty(e.prototype,"maxOperationRetryTime",{get:function(){return this.authWrapper_.maxOperationRetryTime()},enumerable:!0,configurable:!0}),e.prototype.setMaxOperationRetryTime=function(e){ue("setMaxOperationRetryTime",[fe()],arguments),this.authWrapper_.setMaxOperationRetryTime(e)},Object.defineProperty(e.prototype,"app",{get:function(){return this.app_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"INTERNAL",{get:function(){return this.internals_},enumerable:!0,configurable:!0}),e}(),Ve=function(){function e(e){this.service_=e}return e.prototype.delete=function(){return this.service_.authWrapper_.deleteApp(),j(void 0)},e}();n.d(t,"registerStorage",function(){return He});var We="storage";function Be(e,t,n){return new Ue(e,new Q,n)}function He(e){var t={TaskState:A,TaskEvent:k,StringFormat:E,Storage:Ue,Reference:Ae};e.INTERNAL.registerService(We,Be,t,void 0,!0)}He(r.default)},function(e,t,n){n(92)},function(e,t,n){n(91)},function(e,t,n){(function(e){(function(){var e,t=n(13).default,r=r||{},o=this;function i(e){return"string"==typeof e}function a(e){return"boolean"==typeof e}function s(){}function u(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t}function c(e){return null===e}function l(e){return"array"==u(e)}function h(e){var t=u(e);return"array"==t||"object"==t&&"number"==typeof e.length}function f(e){return"function"==u(e)}function p(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var d="closure_uid_"+(1e9*Math.random()>>>0),v=0;function y(e,t,n){return e.call.apply(e.bind,arguments)}function m(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function g(e,t,n){return(g=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:m).apply(null,arguments)}function _(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var b=Date.now||function(){return+new Date};function w(e,t){function n(){}n.prototype=t.prototype,e.lb=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.$c=function(e,n,r){for(var o=Array(arguments.length-2),i=2;i<arguments.length;i++)o[i-2]=arguments[i];return t.prototype[n].apply(e,o)}}function E(e){e.prototype.then=e.prototype.then,e.prototype.$goog_Thenable=!0}function C(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function T(e){if(Error.captureStackTrace)Error.captureStackTrace(this,T);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function S(e,t){for(var n="",r=(e=e.split("%s")).length-1,o=0;o<r;o++)n+=e[o]+(o<t.length?t[o]:"%s");T.call(this,n+e[r])}function O(e,t){throw new S("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function P(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function N(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function I(){this.b=this.a=null}w(T,Error),T.prototype.name="CustomError",w(S,T),S.prototype.name="AssertionError",P.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var k=new P(function(){return new A},function(e){e.reset()});function R(){var e=de,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function A(){this.next=this.b=this.a=null}I.prototype.add=function(e,t){var n=k.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},A.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},A.prototype.reset=function(){this.next=this.b=this.a=null};var x=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if(i(e))return i(t)&&1==t.length?e.indexOf(t,0):-1;for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},D=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,o=i(e)?e.split(""):e,a=0;a<r;a++)a in o&&t.call(n,o[a],a,e)};var L=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),o=i(e)?e.split(""):e,a=0;a<n;a++)a in o&&(r[a]=t.call(void 0,o[a],a,e));return r},M=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=i(e)?e.split(""):e,o=0;o<n;o++)if(o in r&&t.call(void 0,r[o],o,e))return!0;return!1};function F(e,t){return 0<=x(e,t)}function j(e,t){var n;return(n=0<=(t=x(e,t)))&&Array.prototype.splice.call(e,t,1),n}function U(e,t){!function(e,t){var n=e.length,r=i(e)?e.split(""):e;for(--n;0<=n;--n)n in r&&t.call(void 0,r[n],n,e)}(e,function(n,r){t.call(void 0,n,r,e)&&1==Array.prototype.splice.call(e,r,1).length&&0})}function V(e){return Array.prototype.concat.apply([],arguments)}function W(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}function B(e,t){for(var n=e.split("%s"),r="",o=Array.prototype.slice.call(arguments,1);o.length&&1<n.length;)r+=n.shift()+o.shift();return r+n.join("%s")}var H=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function K(e){return J.test(e)?(-1!=e.indexOf("&")&&(e=e.replace(z,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(G,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(Q,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(Y,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(X,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace($,"&#0;")),e):e}var q,z=/&/g,G=/</g,Q=/>/g,Y=/"/g,X=/'/g,$=/\x00/g,J=/[\x00&<>"']/;function Z(e,t){return-1!=e.indexOf(t)}function ee(e,t){return e<t?-1:e>t?1:0}e:{var te=o.navigator;if(te){var ne=te.userAgent;if(ne){q=ne;break e}}q=""}function re(e){return Z(q,e)}function oe(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function ie(e){for(var t in e)return!1;return!0}function ae(e){var t,n={};for(t in e)n[t]=e[t];return n}var se,ue,ce="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function le(e,t){for(var n,r,o=1;o<arguments.length;o++){for(n in r=arguments[o])e[n]=r[n];for(var i=0;i<ce.length;i++)n=ce[i],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function he(e){o.setTimeout(function(){throw e},0)}function fe(e,t){ue||function(){if(-1!=String(o.Promise).indexOf("[native code]")){var e=o.Promise.resolve(void 0);ue=function(){e.then(ve)}}else ue=function(){var e=ve;!f(o.setImmediate)||o.Window&&o.Window.prototype&&!re("Edge")&&o.Window.prototype.setImmediate==o.setImmediate?(se||(se=function(){var e=o.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!re("Presto")&&(e=function(){var e=document.createElement("IFRAME");e.style.display="none",e.src="",document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.write(""),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=g(function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()},this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!re("Trident")&&!re("MSIE")){var t=new e,n={},r=n;return t.port1.onmessage=function(){if(void 0!==n.next){var e=(n=n.next).rb;n.rb=null,e()}},function(e){r.next={rb:e},r=r.next,t.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(e){var t=document.createElement("SCRIPT");t.onreadystatechange=function(){t.onreadystatechange=null,t.parentNode.removeChild(t),t=null,e(),e=null},document.documentElement.appendChild(t)}:function(e){o.setTimeout(e,0)}}()),se(e)):o.setImmediate(e)}}(),pe||(ue(),pe=!0),de.add(e,t)}var pe=!1,de=new I;function ve(){for(var e;e=R();){try{e.a.call(e.b)}catch(e){he(e)}N(k,e)}pe=!1}function ye(e,t){if(this.a=me,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=s)try{var n=this;e.call(t,function(e){Ne(n,ge,e)},function(e){if(!(e instanceof Le))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}Ne(n,_e,e)})}catch(e){Ne(this,_e,e)}}var me=0,ge=2,_e=3;function be(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}be.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var we=new P(function(){return new be},function(e){e.reset()});function Ee(e,t,n){var r=we.get();return r.g=e,r.b=t,r.f=n,r}function Ce(e){if(e instanceof ye)return e;var t=new ye(s);return Ne(t,ge,e),t}function Te(e){return new ye(function(t,n){n(e)})}function Se(e,t,n){Ie(e,t,n,null)||fe(_(t,e))}function Oe(e,t){e.b||e.a!=ge&&e.a!=_e||ke(e),e.f?e.f.next=t:e.b=t,e.f=t}function Pe(e,t,n,r){var o=Ee(null,null,null);return o.a=new ye(function(e,i){o.g=t?function(n){try{var o=t.call(r,n);e(o)}catch(e){i(e)}}:e,o.b=n?function(t){try{var o=n.call(r,t);void 0===o&&t instanceof Le?i(t):e(o)}catch(e){i(e)}}:i}),o.a.c=e,Oe(e,o),o.a}function Ne(e,t,n){e.a==me&&(e===n&&(t=_e,n=new TypeError("Promise cannot resolve to itself")),e.a=1,Ie(n,e.Jc,e.Kc,e)||(e.i=n,e.a=t,e.c=null,ke(e),t!=_e||n instanceof Le||function(e,t){e.g=!0,fe(function(){e.g&&De.call(null,t)})}(e,n)))}function Ie(e,t,n,r){if(e instanceof ye)return Oe(e,Ee(t||s,n||null,r)),!0;if(C(e))return e.then(t,n,r),!0;if(p(e))try{var o=e.then;if(f(o))return function(e,t,n,r,o){function i(e){a||(a=!0,r.call(o,e))}var a=!1;try{t.call(e,function(e){a||(a=!0,n.call(o,e))},i)}catch(e){i(e)}}(e,o,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function ke(e){e.h||(e.h=!0,fe(e.Ub,e))}function Re(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function Ae(e,t,n,r){if(n==_e&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,xe(t,n,r);else try{t.c?t.g.call(t.f):xe(t,n,r)}catch(e){De.call(null,e)}N(we,t)}function xe(e,t,n){t==ge?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}ye.prototype.then=function(e,t,n){return Pe(this,f(e)?e:null,f(t)?t:null,n)},E(ye),(e=ye.prototype).ga=function(e,t){return(e=Ee(e,e,t)).c=!0,Oe(this,e),this},e.o=function(e,t){return Pe(this,null,e,t)},e.cancel=function(e){this.a==me&&fe(function(){!function e(t,n){if(t.a==me)if(t.c){var r=t.c;if(r.b){for(var o=0,i=null,a=null,s=r.b;s&&(s.c||(o++,s.a==t&&(i=s),!(i&&1<o)));s=s.next)i||(a=s);i&&(r.a==me&&1==o?e(r,n):(a?((o=a).next==r.f&&(r.f=o),o.next=o.next.next):Re(r),Ae(r,i,_e,n)))}t.c=null}else Ne(t,_e,n)}(this,new Le(e))},this)},e.Jc=function(e){this.a=me,Ne(this,ge,e)},e.Kc=function(e){this.a=me,Ne(this,_e,e)},e.Ub=function(){for(var e;e=Re(this);)Ae(this,e,this.a,this.i);this.h=!1};var De=he;function Le(e){T.call(this,e)}function Me(){0!=Fe&&(je[this[d]||(this[d]=++v)]=this),this.pa=this.pa,this.oa=this.oa}w(Le,T),Le.prototype.name="cancel";var Fe=0,je={};function Ue(e){if(!e.pa&&(e.pa=!0,e.ua(),0!=Fe)){var t=e[d]||(e[d]=++v);if(0!=Fe&&e.oa&&0<e.oa.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete je[t]}}function Ve(e){return Ve[" "](e),e}Me.prototype.pa=!1,Me.prototype.ua=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()},Ve[" "]=s;var We,Be,He=re("Opera"),Ke=re("Trident")||re("MSIE"),qe=re("Edge"),ze=qe||Ke,Ge=re("Gecko")&&!(Z(q.toLowerCase(),"webkit")&&!re("Edge"))&&!(re("Trident")||re("MSIE"))&&!re("Edge"),Qe=Z(q.toLowerCase(),"webkit")&&!re("Edge");function Ye(){var e=o.document;return e?e.documentMode:void 0}e:{var Xe="",$e=(Be=q,Ge?/rv:([^\);]+)(\)|;)/.exec(Be):qe?/Edge\/([\d\.]+)/.exec(Be):Ke?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Be):Qe?/WebKit\/(\S+)/.exec(Be):He?/(?:Version)[ \/]?(\S+)/.exec(Be):void 0);if($e&&(Xe=$e?$e[1]:""),Ke){var Je=Ye();if(null!=Je&&Je>parseFloat(Xe)){We=String(Je);break e}}We=Xe}var Ze,et={};function tt(e){return function(e,t){var n=et;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t(e)}(e,function(){for(var t=0,n=H(String(We)).split("."),r=H(String(e)).split("."),o=Math.max(n.length,r.length),i=0;0==t&&i<o;i++){var a=n[i]||"",s=r[i]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=ee(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ee(0==a[2].length,0==s[2].length)||ee(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t})}var nt=o.document;Ze=nt&&Ke?Ye()||("CSS1Compat"==nt.compatMode?parseInt(We,10):5):void 0;var rt=Object.freeze||function(e){return e},ot=!Ke||9<=Number(Ze),it=Ke&&!tt("9"),at=function(){if(!o.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});return o.addEventListener("test",s,t),o.removeEventListener("test",s,t),e}();function st(e,t){this.type=e,this.b=this.target=t,this.Eb=!0}function ut(e,t){if(st.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if(Ge){e:{try{Ve(t.nodeName);var o=!0;break e}catch(e){}o=!1}o||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,null===r?(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0):(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType=i(e.pointerType)?e.pointerType:ct[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.c()}}st.prototype.c=function(){this.Eb=!1},w(ut,st);var ct=rt({2:"touch",3:"pen",4:"mouse"});ut.prototype.c=function(){ut.lb.c.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,it)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},ut.prototype.g=function(){return this.a};var lt="closure_listenable_"+(1e6*Math.random()|0),ht=0;function ft(e){e.ma=!0,e.listener=null,e.proxy=null,e.src=null,e.La=null}function pt(e){this.src=e,this.a={},this.b=0}function dt(e,t){var n=t.type;n in e.a&&j(e.a[n],t)&&(ft(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function vt(e,t,n,r){for(var o=0;o<e.length;++o){var i=e[o];if(!i.ma&&i.listener==t&&i.capture==!!n&&i.La==r)return o}return-1}pt.prototype.add=function(e,t,n,r,o){var i=e.toString();(e=this.a[i])||(e=this.a[i]=[],this.b++);var a=vt(e,t,r,o);return-1<a?(t=e[a],n||(t.Ha=!1)):((t=new function(e,t,n,r,o){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.La=o,this.key=++ht,this.ma=this.Ha=!1}(t,this.src,i,!!r,o)).Ha=n,e.push(t)),t};var yt="closure_lm_"+(1e6*Math.random()|0),mt={};function gt(e,t,n,r,o){if(r&&r.once)bt(e,t,n,r,o);else if(l(t))for(var i=0;i<t.length;i++)gt(e,t[i],n,r,o);else n=It(n),e&&e[lt]?Rt(e,t,n,p(r)?!!r.capture:!!r,o):_t(e,t,n,!1,r,o)}function _t(e,t,n,r,o,i){if(!t)throw Error("Invalid event type");var a=p(o)?!!o.capture:!!o,s=Pt(e);if(s||(e[yt]=s=new pt(e)),!(n=s.add(t,n,r,a,i)).proxy){if(r=function(){var e=Ot,t=ot?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)at||(o=a),void 0===o&&(o=!1),e.addEventListener(t.toString(),r,o);else if(e.attachEvent)e.attachEvent(Ct(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}0}}function bt(e,t,n,r,o){if(l(t))for(var i=0;i<t.length;i++)bt(e,t[i],n,r,o);else n=It(n),e&&e[lt]?At(e,t,n,p(r)?!!r.capture:!!r,o):_t(e,t,n,!0,r,o)}function wt(e,t,n,r,o){if(l(t))for(var i=0;i<t.length;i++)wt(e,t[i],n,r,o);else r=p(r)?!!r.capture:!!r,n=It(n),e&&e[lt]?(e=e.u,(t=String(t).toString())in e.a&&(-1<(n=vt(i=e.a[t],n,r,o))&&(ft(i[n]),Array.prototype.splice.call(i,n,1),0==i.length&&(delete e.a[t],e.b--)))):e&&(e=Pt(e))&&(t=e.a[t.toString()],e=-1,t&&(e=vt(t,n,r,o)),(n=-1<e?t[e]:null)&&Et(n))}function Et(e){if("number"!=typeof e&&e&&!e.ma){var t=e.src;if(t&&t[lt])dt(t.u,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(Ct(n),r):t.addListener&&t.removeListener&&t.removeListener(r),0,(n=Pt(t))?(dt(n,e),0==n.b&&(n.src=null,t[yt]=null)):ft(e)}}}function Ct(e){return e in mt?mt[e]:mt[e]="on"+e}function Tt(e,t,n,r){var o=!0;if((e=Pt(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var i=t[e];i&&i.capture==n&&!i.ma&&(i=St(i,r),o=o&&!1!==i)}return o}function St(e,t){var n=e.listener,r=e.La||e.src;return e.Ha&&Et(e),n.call(r,t)}function Ot(e,t){if(e.ma)return!0;if(!ot){if(!t)e:{t=["window","event"];for(var n=o,r=0;r<t.length;r++)if(null==(n=n[t[r]])){t=null;break e}t=n}if(t=new ut(r=t,this),n=!0,!(0>r.keyCode||void 0!=r.returnValue)){e:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break e}catch(e){i=!0}(i||void 0==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=t.b;i;i=i.parentNode)r.push(i);for(e=e.type,i=r.length-1;0<=i;i--){t.b=r[i];var a=Tt(r[i],e,!0,t);n=n&&a}for(i=0;i<r.length;i++)t.b=r[i],a=Tt(r[i],e,!1,t),n=n&&a}return n}return St(e,new ut(t,this))}function Pt(e){return(e=e[yt])instanceof pt?e:null}var Nt="__closure_events_fn_"+(1e9*Math.random()>>>0);function It(e){return f(e)?e:(e[Nt]||(e[Nt]=function(t){return e.handleEvent(t)}),e[Nt])}function kt(){Me.call(this),this.u=new pt(this),this.Mb=this,this.Ta=null}function Rt(e,t,n,r,o){e.u.add(String(t),n,!1,r,o)}function At(e,t,n,r,o){e.u.add(String(t),n,!0,r,o)}function xt(e,t,n,r){if(!(t=e.u.a[String(t)]))return!0;t=t.concat();for(var o=!0,i=0;i<t.length;++i){var a=t[i];if(a&&!a.ma&&a.capture==n){var s=a.listener,u=a.La||a.src;a.Ha&&dt(e.u,a),o=!1!==s.call(u,r)&&o}}return o&&0!=r.Eb}function Dt(e,t,n){if(f(e))n&&(e=g(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=g(e.handleEvent,e)}return 2147483647<Number(t)?-1:o.setTimeout(e,t||0)}function Lt(e){var t=null;return new ye(function(n,r){-1==(t=Dt(function(){n(void 0)},e))&&r(Error("Failed to schedule timer."))}).o(function(e){throw o.clearTimeout(t),e})}function Mt(e){if(e.R&&"function"==typeof e.R)return e.R();if(i(e))return e.split("");if(h(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function Ft(e){if(e.T&&"function"==typeof e.T)return e.T();if(!e.R||"function"!=typeof e.R){if(h(e)||i(e)){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function jt(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof jt)for(n=e.T(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function Ut(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];Vt(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var o={};for(n=t=0;t<e.a.length;)Vt(o,r=e.a[t])||(e.a[n++]=r,o[r]=1),t++;e.a.length=n}}function Vt(e,t){return Object.prototype.hasOwnProperty.call(e,t)}w(kt,Me),kt.prototype[lt]=!0,kt.prototype.addEventListener=function(e,t,n,r){gt(this,e,t,n,r)},kt.prototype.removeEventListener=function(e,t,n,r){wt(this,e,t,n,r)},kt.prototype.dispatchEvent=function(e){var t,n=this.Ta;if(n)for(t=[];n;n=n.Ta)t.push(n);n=this.Mb;var r=e.type||e;if(i(e))e=new st(e,n);else if(e instanceof st)e.target=e.target||n;else{var o=e;le(e=new st(r,n),o)}if(o=!0,t)for(var a=t.length-1;0<=a;a--){var s=e.b=t[a];o=xt(s,r,!0,e)&&o}if(o=xt(s=e.b=n,r,!0,e)&&o,o=xt(s,r,!1,e)&&o,t)for(a=0;a<t.length;a++)o=xt(s=e.b=t[a],r,!1,e)&&o;return o},kt.prototype.ua=function(){if(kt.lb.ua.call(this),this.u){var e,t=this.u;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)0,ft(n[r]);delete t.a[e],t.b--}}this.Ta=null},(e=jt.prototype).R=function(){Ut(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},e.T=function(){return Ut(this),this.a.concat()},e.clear=function(){this.b={},this.c=this.a.length=0},e.get=function(e,t){return Vt(this.b,e)?this.b[e]:t},e.set=function(e,t){Vt(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},e.forEach=function(e,t){for(var n=this.T(),r=0;r<n.length;r++){var o=n[r],i=this.get(o);e.call(t,i,o,this)}};var Wt=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Bt(e,t){if(this.b=this.l=this.c="",this.i=null,this.h=this.g="",this.f=!1,e instanceof Bt){this.f=void 0!==t?t:e.f,Ht(this,e.c),this.l=e.l,this.b=e.b,Kt(this,e.i),this.g=e.g,t=e.a;var n=new on;n.c=t.c,t.a&&(n.a=new jt(t.a),n.b=t.b),qt(this,n),this.h=e.h}else e&&(n=String(e).match(Wt))?(this.f=!!t,Ht(this,n[1]||"",!0),this.l=Xt(n[2]||""),this.b=Xt(n[3]||"",!0),Kt(this,n[4]),this.g=Xt(n[5]||"",!0),qt(this,n[6]||"",!0),this.h=Xt(n[7]||"")):(this.f=!!t,this.a=new on(null,this.f))}function Ht(e,t,n){e.c=n?Xt(t,!0):t,e.c&&(e.c=e.c.replace(/:$/,""))}function Kt(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.i=t}else e.i=null}function qt(e,t,n){t instanceof on?(e.a=t,function(e,t){t&&!e.f&&(an(e),e.c=null,e.a.forEach(function(e,t){var n=t.toLowerCase();t!=n&&(un(this,t),ln(this,n,e))},e)),e.f=t}(e.a,e.f)):(n||(t=$t(t,nn)),e.a=new on(t,e.f))}function zt(e,t,n){e.a.set(t,n)}function Gt(e,t){return e.a.get(t)}function Qt(e){return e instanceof Bt?new Bt(e):new Bt(e,void 0)}function Yt(e,t){var n=new Bt(null,void 0);return Ht(n,"https"),e&&(n.b=e),t&&(n.g=t),n}function Xt(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function $t(e,t,n){return i(e)?(e=encodeURI(e).replace(t,Jt),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function Jt(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Bt.prototype.toString=function(){var e=[],t=this.c;t&&e.push($t(t,Zt,!0),":");var n=this.b;return(n||"file"==t)&&(e.push("//"),(t=this.l)&&e.push($t(t,Zt,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.i)&&e.push(":",String(n))),(n=this.g)&&(this.b&&"/"!=n.charAt(0)&&e.push("/"),e.push($t(n,"/"==n.charAt(0)?tn:en,!0))),(n=this.a.toString())&&e.push("?",n),(n=this.h)&&e.push("#",$t(n,rn)),e.join("")};var Zt=/[#\/\?@]/g,en=/[#\?:]/g,tn=/[#\?]/g,nn=/[#\?@]/g,rn=/#/g;function on(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function an(e){e.a||(e.a=new jt,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),o=null;if(0<=r){var i=e[n].substring(0,r);o=e[n].substring(r+1)}else i=e[n];t(i,o?decodeURIComponent(o.replace(/\+/g," ")):"")}}}(e.c,function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)}))}function sn(e){var t=Ft(e);if(void 0===t)throw Error("Keys are undefined");var n=new on(null,void 0);e=Mt(e);for(var r=0;r<t.length;r++){var o=t[r],i=e[r];l(i)?ln(n,o,i):n.add(o,i)}return n}function un(e,t){an(e),t=hn(e,t),Vt(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,Vt((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&Ut(e)))}function cn(e,t){return an(e),t=hn(e,t),Vt(e.a.b,t)}function ln(e,t,n){un(e,t),0<n.length&&(e.c=null,e.a.set(hn(e,t),W(n)),e.b+=n.length)}function hn(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}(e=on.prototype).add=function(e,t){an(this),this.c=null,e=hn(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},e.clear=function(){this.a=this.c=null,this.b=0},e.forEach=function(e,t){an(this),this.a.forEach(function(n,r){D(n,function(n){e.call(t,n,r,this)},this)},this)},e.T=function(){an(this);for(var e=this.a.R(),t=this.a.T(),n=[],r=0;r<t.length;r++)for(var o=e[r],i=0;i<o.length;i++)n.push(t[r]);return n},e.R=function(e){an(this);var t=[];if(i(e))cn(this,e)&&(t=V(t,this.a.get(hn(this,e))));else{e=this.a.R();for(var n=0;n<e.length;n++)t=V(t,e[n])}return t},e.set=function(e,t){return an(this),this.c=null,cn(this,e=hn(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},e.get=function(e,t){return 0<(e=e?this.R(e):[]).length?String(e[0]):t},e.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.T(),n=0;n<t.length;n++){var r=t[n],o=encodeURIComponent(String(r));r=this.R(r);for(var i=0;i<r.length;i++){var a=o;""!==r[i]&&(a+="="+encodeURIComponent(String(r[i]))),e.push(a)}}return this.c=e.join("&")};var fn=!Ke||9<=Number(Ze);function pn(){this.a="",this.b=vn}function dn(e){return e instanceof pn&&e.constructor===pn&&e.b===vn?e.a:(O("expected object of type Const, got '"+e+"'"),"type_error:Const")}pn.prototype.la=!0,pn.prototype.ja=function(){return this.a},pn.prototype.toString=function(){return"Const{"+this.a+"}"};var vn={};function yn(e){var t=new pn;return t.a=e,t}function mn(){this.a="",this.b=En}function gn(e){return e instanceof mn&&e.constructor===mn&&e.b===En?e.a:(O("expected object of type TrustedResourceUrl, got '"+e+"' of type "+u(e)),"type_error:TrustedResourceUrl")}function _n(e,t){var n=dn(e);if(!wn.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(e){var t=new mn;return t.a=e,t}(e=n.replace(bn,function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof pn?dn(e):encodeURIComponent(String(e))}))}yn(""),mn.prototype.la=!0,mn.prototype.ja=function(){return this.a},mn.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var bn=/%{(\w+)}/g,wn=/^(?:https:)?\/\/[0-9a-z.:[\]-]+\/|^\/[^\/\\]|^about:blank#/i,En={};function Cn(){this.a="",this.b=Pn}function Tn(e){return e instanceof Cn&&e.constructor===Cn&&e.b===Pn?e.a:(O("expected object of type SafeUrl, got '"+e+"' of type "+u(e)),"type_error:SafeUrl")}Cn.prototype.la=!0,Cn.prototype.ja=function(){return this.a},Cn.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Sn=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function On(e){return e instanceof Cn?e:(e=e.la?e.ja():String(e),Sn.test(e)||(e="about:invalid#zClosurez"),Nn(e))}var Pn={};function Nn(e){var t=new Cn;return t.a=e,t}function In(){this.a="",this.b=kn}Nn("about:blank"),In.prototype.la=!0,In.prototype.ja=function(){return this.a},In.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var kn={};function Rn(e){var t=new In;return t.a=e,t}function An(e){var t=document;return i(e)?t.getElementById(e):e}function xn(e,t){oe(t,function(t,n){t&&t.la&&(t=t.ja()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:Dn.hasOwnProperty(n)?e.setAttribute(Dn[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t})}Rn("<!DOCTYPE html>"),Rn(""),Rn("<br>");var Dn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Ln(e,t,n){var r=arguments,o=document,a=String(r[0]),s=r[1];if(!fn&&s&&(s.name||s.type)){if(a=["<",a],s.name&&a.push(' name="',K(s.name),'"'),s.type){a.push(' type="',K(s.type),'"');var u={};le(u,s),delete u.type,s=u}a.push(">"),a=a.join("")}return a=o.createElement(a),s&&(i(s)?a.className=s:l(s)?a.className=s.join(" "):xn(a,s)),2<r.length&&function(e,t,n){function r(n){n&&t.appendChild(i(n)?e.createTextNode(n):n)}for(var o=2;o<n.length;o++){var a=n[o];!h(a)||p(a)&&0<a.nodeType?r(a):D(Mn(a)?W(a):a,r)}}(o,a,r),a}function Mn(e){if(e&&"number"==typeof e.length){if(p(e))return"function"==typeof e.item||"string"==typeof e.item;if(f(e))return"function"==typeof e.item}return!1}function Fn(e){var t=[];return function e(t,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(l(n)){var o=n;n=o.length,r.push("[");for(var i="",a=0;a<n;a++)r.push(i),e(t,o[a],r),i=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(o in r.push("{"),i="",n)Object.prototype.hasOwnProperty.call(n,o)&&("function"!=typeof(a=n[o])&&(r.push(i),Vn(o,r),r.push(":"),e(t,a,r),i=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":Vn(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new function(){},e,t),t.join("")}var jn={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Un=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function Vn(e,t){t.push('"',e.replace(Un,function(e){var t=jn[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),jn[e]=t),t}),'"')}function Wn(){var e=ir();return Ke&&!!Ze&&11==Ze||/Edge\/\d+/.test(e)}function Bn(){return o.window&&o.window.location.href||self&&self.location&&self.location.href||""}function Hn(e,t){t=t||o.window;var n="about:blank";e&&(n=Tn(On(e))),t.location.href=n}function Kn(e){return!!((e=(e||ir()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function qn(e){e=e||o.window;try{e.close()}catch(e){}}function zn(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var o=(window.screen.availHeight-n)/2,i=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<o?o:0,left:0<i?i:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=ir().toLowerCase(),r&&(t.target=r,Z(n,"crios/")&&(t.target="_blank")),nr(ir())==er&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof Cn?n:On(void 0!==n.href?n.href:String(n)),n=e.target||n.target,o=[],e)switch(a){case"width":case"height":case"top":case"left":o.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:o.push(a+"="+(e[a]?1:0))}var a=o.join(",");if((re("iPhone")&&!re("iPod")&&!re("iPad")||re("iPad")||re("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(a=r.document.createElement("A"),t instanceof Cn||t instanceof Cn||(t=t.la?t.ja():String(t),Sn.test(t)||(t="about:invalid#zClosurez"),t=Nn(t)),a.href=Tn(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=r.open("",n,a),e=Tn(t),a&&(ze&&Z(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,yn("b/12014412, meta tag with sanitized URL"),e=Rn(e='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+K(e)+'">'),a.document.write(function(e){return e instanceof In&&e.constructor===In&&e.b===kn?e.a:(O("expected object of type SafeHtml, got '"+e+"' of type "+u(e)),"type_error:SafeHtml")}(e)),a.document.close())):(a=r.open(Tn(t),n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var Gn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/;function Qn(){var e=null;return new ye(function(t){"complete"==o.document.readyState?t():(e=function(){t()},bt(window,"load",e))}).o(function(t){throw wt(window,"load",e),t})}function Yn(e){return e=e||ir(),!("file:"!==lr()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function Xn(){var e=o.window;try{return!(!e||e==e.top)}catch(e){return!1}}function $n(){return"object"!=typeof o.window&&"function"==typeof o.importScripts}function Jn(){return t.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":t.INTERNAL.hasOwnProperty("node")?"Node":$n()?"Worker":"Browser"}function Zn(){var e=Jn();return"ReactNative"===e||"Node"===e}var er="Firefox",tr="Chrome";function nr(e){var t=e.toLowerCase();return Z(t,"opera/")||Z(t,"opr/")||Z(t,"opios/")?"Opera":Z(t,"iemobile")?"IEMobile":Z(t,"msie")||Z(t,"trident/")?"IE":Z(t,"edge/")?"Edge":Z(t,"firefox/")?er:Z(t,"silk/")?"Silk":Z(t,"blackberry")?"Blackberry":Z(t,"webos")?"Webos":!Z(t,"safari/")||Z(t,"chrome/")||Z(t,"crios/")||Z(t,"android")?!Z(t,"chrome/")&&!Z(t,"crios/")||Z(t,"edge/")?Z(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":tr:"Safari"}var rr={Pc:"FirebaseCore-web",Rc:"FirebaseUI-web"};function or(e,t){t=t||[];var n,r=[],o={};for(n in rr)o[rr[n]]=!0;for(n=0;n<t.length;n++)void 0!==o[t[n]]&&(delete o[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=Jn())?r=nr(o=ir()):"Worker"===r&&(r=nr(o=ir())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function ir(){return o.navigator&&o.navigator.userAgent||""}function ar(e,t){e=e.split("."),t=t||o;for(var n=0;n<e.length&&"object"==typeof t&&null!=t;n++)t=t[e[n]];return n!=e.length&&(t=void 0),t}function sr(){try{var e=o.localStorage,t=vr();if(e)return e.setItem(t,"1"),e.removeItem(t),!Wn()||!!o.indexedDB}catch(e){return $n()&&!!o.indexedDB}return!1}function ur(){return(cr()||"chrome-extension:"===lr()||Yn())&&!Zn()&&sr()&&!$n()}function cr(){return"http:"===lr()||"https:"===lr()}function lr(){return o.location&&o.location.protocol||null}function hr(e){return!Kn(e=e||ir())&&nr(e)!=er}function fr(e){return void 0===e?null:Fn(e)}function pr(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function dr(e){if(null!==e)return JSON.parse(e)}function vr(e){return e||Math.floor(1e9*Math.random()).toString()}function yr(e){return"Safari"!=nr(e=e||ir())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function mr(){var e=o.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var n=0;n<e.CP.length;n++)e.CP[n]=null}function gr(){var e=o.navigator;return!e||"boolean"!=typeof e.onLine||!cr()&&"chrome-extension:"!==lr()&&void 0===e.connection||e.onLine}function _r(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.c=e,this.b=t,e=ir(),t=Jn(),this.a=Kn(e)||"ReactNative"===t}function br(){var e=o.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function wr(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Er(){return!(!ar("fireauth.oauthhelper",o)&&!ar("fireauth.iframe",o))}_r.prototype.get=function(){return this.a?this.b:this.c};var Cr,Tr={};try{var Sr={};Object.defineProperty(Sr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Sr,"abcd",{configurable:!0,enumerable:!0,value:2}),Cr=2==Sr.abcd}catch(Be){Cr=!1}function Or(e,t,n){Cr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function Pr(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&Or(e,n,t[n])}function Nr(e){var t={};return Pr(t,e),t}function Ir(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)Or(t,n,Ir(e[n]));return t}var kr="EMAIL_SIGNIN",Rr="email",Ar="newEmail",xr="requestType",Dr="email",Lr="fromEmail",Mr="data",Fr="operation";function jr(e,t){this.code=Vr+e,this.message=t||Wr[e]||""}function Ur(e){var t=e&&e.code;return t?new jr(t.substring(Vr.length),e.message):null}w(jr,Error),jr.prototype.C=function(){return{code:this.code,message:this.message}},jr.prototype.toJSON=function(){return this.C()};var Vr="auth/",Wr={"argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","user-cancelled":"User did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function Br(e){var t=e[zr];if(void 0===t)throw new jr("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new jr("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[Hr];if(n&&"object"==typeof n){t=n[Yr];var r=n[Gr];if(n=n[Qr],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new jr("argument-error",Gr+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new jr("argument-error",Qr+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new jr("argument-error",Yr+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new jr("missing-android-pkg-name")}}else if(void 0!==n)throw new jr("argument-error",Hr+" property must be a non null object when specified.");if(this.f=null,(t=e[qr])&&"object"==typeof t){if("string"==typeof(t=t[Xr])&&t.length)this.f=t;else if(void 0!==t)throw new jr("argument-error",Xr+" property must be a non empty string when specified.")}else if(void 0!==t)throw new jr("argument-error",qr+" property must be a non null object when specified.");if(void 0!==(e=e[Kr])&&"boolean"!=typeof e)throw new jr("argument-error",Kr+" property must be a boolean when specified.");this.c=!!e}var Hr="android",Kr="handleCodeInApp",qr="iOS",zr="url",Gr="installApp",Qr="minimumVersion",Yr="packageName",Xr="bundleId";function $r(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t)null===t[n]&&delete t[n];return t}var Jr=null,Zr=null;function eo(e){var t="";return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),o=Zr[n];if(null!=o)return o;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!Jr){Jr={},Zr={};for(var e=0;65>e;e++)Jr[e]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e),Zr[Jr[e]]=e,62<=e&&(Zr["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(e)]=e)}}();for(var r=0;;){var o=n(-1),i=n(0),a=n(64),s=n(64);if(64===s&&-1===o)break;t(o<<2|i>>4),64!=a&&(t(i<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,function(e){t+=String.fromCharCode(e)}),t}function to(e){this.c=e.sub,b(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function no(e){if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{var r=JSON.parse(eo(e));if(r.sub&&r.iss&&r.aud&&r.exp)return new to(r)}catch(e){}return null}to.prototype.f=function(){return this.b};var ro="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),oo=["client_id","response_type","scope","redirect_uri","state"],io={Qc:{Ma:"locale",Aa:500,za:600,Na:"facebook.com",cb:oo},Sc:{Ma:null,Aa:500,za:620,Na:"github.com",cb:oo},Tc:{Ma:"hl",Aa:515,za:680,Na:"google.com",cb:oo},Zc:{Ma:"lang",Aa:485,za:705,Na:"twitter.com",cb:ro}};function ao(e){for(var t in io)if(io[t].Na==e)return io[t];return null}function so(e){var t={};t["facebook.com"]=fo,t["google.com"]=vo,t["github.com"]=po,t["twitter.com"]=yo;var n=e&&e[co];try{if(n)return t[n]?new t[n](e):new ho(e);if(void 0!==e[uo])return new lo(e)}catch(e){}return null}var uo="idToken",co="providerId";function lo(e){var t=e[co];if(!t&&e[uo]){var n=no(e[uo]);n&&n.a&&(t=n.a)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),Or(this,"providerId",t),Or(this,"isNewUser",n)}function ho(e){lo.call(this,e),Or(this,"profile",Ir((e=dr(e.rawUserInfo||"{}"))||{}))}function fo(e){if(ho.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function po(e){if(ho.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Or(this,"username",this.profile&&this.profile.login||null)}function vo(e){if(ho.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function yo(e){if(ho.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Or(this,"username",e.screenName||null)}function mo(e,t){return e.then(function(e){if(e[Xi]){var n=no(e[Xi]);if(!n||t!=n.c)throw new jr("user-mismatch");return e}throw new jr("user-mismatch")}).o(function(e){throw e&&e.code&&e.code==Vr+"user-not-found"?new jr("user-mismatch"):e})}function go(e,t,n){if(t.idToken||t.accessToken)t.idToken&&Or(this,"idToken",t.idToken),t.accessToken&&Or(this,"accessToken",t.accessToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new jr("internal-error","failed to construct a credential");Or(this,"accessToken",t.oauthToken),Or(this,"secret",t.oauthTokenSecret)}Or(this,"providerId",e),Or(this,"signInMethod",n)}function _o(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,{postBody:sn(t).toString(),requestUri:"http://localhost"}}function bo(e,t){this.zc=t||[],Pr(this,{providerId:e,isOAuthProvider:!0}),this.tb={},this.Za=(ao(e)||{}).Ma||null,this.Xa=null}function wo(e){bo.call(this,e,oo),this.a=[]}function Eo(){wo.call(this,"facebook.com")}function Co(e){if(!e)throw new jr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return p(e)&&(t=e.accessToken),(new Eo).credential(null,t)}function To(){wo.call(this,"github.com")}function So(e){if(!e)throw new jr("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return p(e)&&(t=e.accessToken),(new To).credential(null,t)}function Oo(){wo.call(this,"google.com"),this.ta("profile")}function Po(e,t){var n=e;return p(e)&&(n=e.idToken,t=e.accessToken),(new Oo).credential(n,t)}function No(){bo.call(this,"twitter.com",ro)}function Io(e,t){var n=e;if(p(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new jr("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new go("twitter.com",n,"twitter.com")}function ko(e,t,n){this.a=e,this.b=t,Or(this,"providerId","password"),Or(this,"signInMethod",n===Ro.EMAIL_LINK_SIGN_IN_METHOD?Ro.EMAIL_LINK_SIGN_IN_METHOD:Ro.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Ro(){Pr(this,{providerId:"password",isOAuthProvider:!1})}function Ao(e,t){if(!(t=xo(t)))throw new jr("argument-error","Invalid email link!");return new ko(e,t,Ro.EMAIL_LINK_SIGN_IN_METHOD)}function xo(e){var t=Gt((e=new function(e){this.a=Qt(e)}(e)).a,"oobCode")||null;return"signIn"===(Gt(e.a,"mode")||null)&&t?t:null}function Do(e){if(!(e.Ra&&e.Qa||e.Ea&&e.Y))throw new jr("internal-error");this.a=e,Or(this,"providerId","phone"),Or(this,"signInMethod","phone")}function Lo(e){return e.a.Ea&&e.a.Y?{temporaryProof:e.a.Ea,phoneNumber:e.a.Y}:{sessionInfo:e.a.Ra,code:e.a.Qa}}function Mo(e){try{this.a=e||t.auth()}catch(e){throw new jr("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}Pr(this,{providerId:"phone",isOAuthProvider:!1})}function Fo(e,t){if(!e)throw new jr("missing-verification-id");if(!t)throw new jr("missing-verification-code");return new Do({Ra:e,Qa:t})}function jo(e){if(e.temporaryProof&&e.phoneNumber)return new Do({Ea:e.temporaryProof,Y:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret;e=e&&e.oauthIdToken;try{switch(t){case"google.com":return Po(e,n);case"facebook.com":return Co(n);case"github.com":return So(n);case"twitter.com":return Io(n,r);default:return new wo(t).credential(e,n)}}catch(e){return null}}function Uo(e){if(!e.isOAuthProvider)throw new jr("invalid-oauth-provider")}function Vo(e,t,n,r,o){if(this.b=e,this.c=t||null,this.f=n||null,this.g=r||null,this.a=o||null,!this.f&&!this.a)throw new jr("invalid-auth-event");if(this.f&&this.a)throw new jr("invalid-auth-event");if(this.f&&!this.g)throw new jr("invalid-auth-event")}function Wo(e){return(e=e||{}).type?new Vo(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&Ur(e.error)):null}function Bo(){this.b=null,this.a=[]}w(ho,lo),w(fo,ho),w(po,ho),w(vo,ho),w(yo,ho),go.prototype.xa=function(e){return pa(e,_o(this))},go.prototype.c=function(e,t){var n=_o(this);return n.idToken=t,da(e,n)},go.prototype.f=function(e,t){return mo(va(e,_o(this)),t)},go.prototype.C=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),e},bo.prototype.Ca=function(e){return this.tb=ae(e),this},w(wo,bo),wo.prototype.ta=function(e){return F(this.a,e)||this.a.push(e),this},wo.prototype.yb=function(){return W(this.a)},wo.prototype.credential=function(e,t){if(!e&&!t)throw new jr("argument-error","credential failed: must provide the ID token and/or the access token.");return new go(this.providerId,{idToken:e||null,accessToken:t||null},this.providerId)},w(Eo,wo),Or(Eo,"PROVIDER_ID","facebook.com"),Or(Eo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),w(To,wo),Or(To,"PROVIDER_ID","github.com"),Or(To,"GITHUB_SIGN_IN_METHOD","github.com"),w(Oo,wo),Or(Oo,"PROVIDER_ID","google.com"),Or(Oo,"GOOGLE_SIGN_IN_METHOD","google.com"),w(No,bo),Or(No,"PROVIDER_ID","twitter.com"),Or(No,"TWITTER_SIGN_IN_METHOD","twitter.com"),ko.prototype.xa=function(e){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?Ka(e,Ca,{email:this.a,oobCode:this.b}):Ka(e,Va,{email:this.a,password:this.b})},ko.prototype.c=function(e,t){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?Ka(e,Ta,{idToken:t,email:this.a,oobCode:this.b}):Ka(e,Da,{idToken:t,email:this.a,password:this.b})},ko.prototype.f=function(e,t){return mo(this.xa(e),t)},ko.prototype.C=function(){return{email:this.a,password:this.b,signInMethod:this.signInMethod}},Pr(Ro,{PROVIDER_ID:"password"}),Pr(Ro,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),Pr(Ro,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Do.prototype.xa=function(e){return e.Sa(Lo(this))},Do.prototype.c=function(e,t){var n=Lo(this);return n.idToken=t,Ka(e,Ba,n)},Do.prototype.f=function(e,t){var n=Lo(this);return n.operation="REAUTH",mo(e=Ka(e,Ha,n),t)},Do.prototype.C=function(){var e={providerId:"phone"};return this.a.Ra&&(e.verificationId=this.a.Ra),this.a.Qa&&(e.verificationCode=this.a.Qa),this.a.Ea&&(e.temporaryProof=this.a.Ea),this.a.Y&&(e.phoneNumber=this.a.Y),e},Mo.prototype.Sa=function(e,t){var n=this.a.b;return Ce(t.verify()).then(function(r){if(!i(r))throw new jr("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":return function(e,t){return Ka(e,Aa,t)}(n,{phoneNumber:e,recaptchaToken:r}).then(function(e){return"function"==typeof t.reset&&t.reset(),e},function(e){throw"function"==typeof t.reset&&t.reset(),e});default:throw new jr("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}})},Pr(Mo,{PROVIDER_ID:"phone"}),Pr(Mo,{PHONE_SIGN_IN_METHOD:"phone"}),Vo.prototype.C=function(){return{type:this.b,eventId:this.c,urlResponse:this.f,sessionId:this.g,error:this.a&&this.a.C()}};var Ho=null;function Ko(e){var t="unauthorized-domain",n=void 0,r=Qt(e);e=r.b,"chrome-extension"==(r=r.c)?n=B("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=B("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",jr.call(this,t,n)}function qo(e,t,n){jr.call(this,e,n),(e=t||{}).ub&&Or(this,"email",e.ub),e.Y&&Or(this,"phoneNumber",e.Y),e.credential&&Or(this,"credential",e.credential)}function zo(e){if(e.code){var t=e.code||"";0==t.indexOf(Vr)&&(t=t.substring(Vr.length));var n={credential:jo(e)};if(e.email)n.ub=e.email;else{if(!e.phoneNumber)return new jr(t,e.message||void 0);n.Y=e.phoneNumber}return new qo(t,n,e.message)}return null}Bo.prototype.subscribe=function(e){var t=this;this.a.push(e),this.b||(this.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=ar("universalLinks.subscribe",o))&&e(null,this.b))},Bo.prototype.unsubscribe=function(e){U(this.a,function(t){return t==e})},w(Ko,jr),w(qo,jr),qo.prototype.C=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber);var t=this.credential&&this.credential.C();return t&&le(e,t),e},qo.prototype.toJSON=function(){return this.C()};var Go,Qo=/^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;function Yo(){}function Xo(e){return e.c||(e.c=e.b())}function $o(){}function Jo(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function Zo(){}function ei(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseText="",this.status=-1,this.statusText="",this.a.onload=g(this.ac,this),this.a.onerror=g(this.zb,this),this.a.onprogress=g(this.bc,this),this.a.ontimeout=g(this.ec,this)}function ti(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function ni(e,t,n){this.reset(e,t,n,void 0,void 0)}Yo.prototype.c=null,w($o,Yo),$o.prototype.a=function(){var e=Jo(this);return e?new ActiveXObject(e):new XMLHttpRequest},$o.prototype.b=function(){var e={};return Jo(this)&&(e[0]=!0,e[1]=!0),e},Go=new $o,w(Zo,Yo),Zo.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new ei;throw Error("Unsupported browser")},Zo.prototype.b=function(){return{}},(e=ei.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},e.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},e.abort=function(){this.a.abort()},e.setRequestHeader=function(){},e.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},e.ac=function(){this.status=200,this.responseText=this.a.responseText,ti(this,4)},e.zb=function(){this.status=500,this.responseText="",ti(this,4)},e.ec=function(){this.zb()},e.bc=function(){this.status=200,ti(this,1)},e.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},ni.prototype.a=null;function ri(e){this.f=e,this.b=this.c=this.a=null}function oi(e,t){this.name=e,this.value=t}ni.prototype.reset=function(e,t,n,r,o){"number"==typeof o||0,r||b(),delete this.a},oi.prototype.toString=function(){return this.name};var ii=new oi("SEVERE",1e3),ai=new oi("WARNING",900),si=new oi("CONFIG",700),ui=new oi("FINE",500);ri.prototype.log=function(e,t,n){if(e.value>=function e(t){return t.c?t.c:t.a?e(t.a):(O("Root logger has no level set."),null)}(this).value)for(f(t)&&(t=t()),e=new ni(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var ci={},li=null;function hi(e){var t;if(li||(li=new ri(""),ci[""]=li,li.c=si),!(t=ci[e])){t=new ri(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=hi(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,ci[e]=t}return t}function fi(e,t){e&&e.log(ui,t,void 0)}function pi(e){this.f=e}function di(e){kt.call(this),this.i=e,this.readyState=vi,this.status=0,this.responseText=this.statusText="",this.onreadystatechange=null,this.g=new Headers,this.b=null,this.h="GET",this.c="",this.a=!1,this.f=hi("goog.net.FetchXmlHttp")}w(pi,Yo),pi.prototype.a=function(){return new di(this.f)},pi.prototype.b=function(e){return function(){return e}}({}),w(di,kt);var vi=0;function yi(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function mi(e){kt.call(this),this.headers=new jt,this.D=e||null,this.c=!1,this.A=this.a=null,this.h=this.N=this.l="",this.f=this.I=this.i=this.G=!1,this.g=0,this.s=null,this.m=gi,this.v=this.O=!1}(e=di.prototype).open=function(e,t){if(this.readyState!=vi)throw this.abort(),Error("Error reopening a connection");this.h=e,this.c=t,this.readyState=1,yi(this)},e.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.g,method:this.h,credentials:void 0,cache:void 0};e&&(t.body=e),this.i.fetch(new Request(this.c,t)).then(this.dc.bind(this),this.Ab.bind(this))},e.abort=function(){this.responseText="",this.g=new Headers,this.status=0,1<=this.readyState&&this.a&&4!=this.readyState&&(this.readyState=4,this.a=!1,yi(this)),this.readyState=vi},e.dc=function(e){this.a&&(this.b||(this.b=e.headers,this.readyState=2,yi(this)),this.a&&(this.readyState=3,yi(this),this.a&&e.text().then(this.cc.bind(this,e),this.Ab.bind(this))))},e.cc=function(e,t){this.a&&(this.status=e.status,this.statusText=e.statusText,this.responseText=t,this.readyState=4,yi(this))},e.Ab=function(e){var t=this.f;t&&t.log(ai,"Failed to fetch url "+this.c,e instanceof Error?e:Error(e)),this.a&&(this.readyState=4,yi(this))},e.setRequestHeader=function(e,t){this.g.append(e,t)},e.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.f)&&e.log(ai,"Attempting to get response header but no headers have been received for url: "+this.c,void 0),"")},e.getAllResponseHeaders=function(){if(!this.b){var e=this.f;return e&&e.log(ai,"Attempting to get all response headers but no headers have been received for url: "+this.c,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},w(mi,kt);var gi="";mi.prototype.b=hi("goog.net.XhrIo");var _i=/^https?$/i,bi=["POST","PUT"];function wi(e,t,n,r,a){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.l+"; newUri="+t);n=n?n.toUpperCase():"GET",e.l=t,e.h="",e.N=n,e.G=!1,e.c=!0,e.a=e.D?e.D.a():Go.a(),e.A=e.D?Xo(e.D):Xo(Go),e.a.onreadystatechange=g(e.Db,e);try{fi(e.b,ki(e,"Opening Xhr")),e.I=!0,e.a.open(n,String(t),!0),e.I=!1}catch(t){return fi(e.b,ki(e,"Error opening Xhr: "+t.message)),void Ci(e,t)}t=r||"";var s=new jt(e.headers);a&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(h(e)||i(e))D(e,t,void 0);else for(var n=Ft(e),r=Mt(e),o=r.length,a=0;a<o;a++)t.call(void 0,r[a],n&&n[a],e)}(a,function(e,t){s.set(t,e)}),a=function(e){e:{for(var t=Ei,n=e.length,r=i(e)?e.split(""):e,o=0;o<n;o++)if(o in r&&t.call(void 0,r[o],o,e)){t=o;break e}t=-1}return 0>t?null:i(e)?e.charAt(t):e[t]}(s.T()),r=o.FormData&&t instanceof o.FormData,!F(bi,n)||a||r||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach(function(e,t){this.a.setRequestHeader(t,e)},e),e.m&&(e.a.responseType=e.m),"withCredentials"in e.a&&e.a.withCredentials!==e.O&&(e.a.withCredentials=e.O);try{Pi(e),0<e.g&&(e.v=function(e){return Ke&&tt(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),fi(e.b,ki(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.v)),e.v?(e.a.timeout=e.g,e.a.ontimeout=g(e.Fa,e)):e.s=Dt(e.Fa,e.g,e)),fi(e.b,ki(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){fi(e.b,ki(e,"Send error: "+t.message)),Ci(e,t)}}function Ei(e){return"content-type"==e.toLowerCase()}function Ci(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,Ti(e),Oi(e)}function Ti(e){e.G||(e.G=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function Si(e){if(e.c&&void 0!==r)if(e.A[1]&&4==Ni(e)&&2==Ii(e))fi(e.b,ki(e,"Local request error detected and ignored"));else if(e.i&&4==Ni(e))Dt(e.Db,0,e);else if(e.dispatchEvent("readystatechange"),4==Ni(e)){fi(e.b,ki(e,"Request complete")),e.c=!1;try{var t,n=Ii(e);e:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break e;default:i=!1}if(!(t=i)){var a;if(a=0===n){var s=String(e.l).match(Wt)[1]||null;if(!s&&o.self&&o.self.location){var u=o.self.location.protocol;s=u.substr(0,u.length-1)}a=!_i.test(s?s.toLowerCase():"")}t=a}if(t)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var c=2<Ni(e)?e.a.statusText:""}catch(t){fi(e.b,"Can not get status: "+t.message),c=""}e.h=c+" ["+Ii(e)+"]",Ti(e)}}finally{Oi(e)}}}function Oi(e,t){if(e.a){Pi(e);var n=e.a,r=e.A[0]?s:null;e.a=null,e.A=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(ii,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function Pi(e){e.a&&e.v&&(e.a.ontimeout=null),e.s&&(o.clearTimeout(e.s),e.s=null)}function Ni(e){return e.a?e.a.readyState:0}function Ii(e){try{return 2<Ni(e)?e.a.status:-1}catch(e){return-1}}function ki(e,t){return t+" ["+e.N+" "+e.l+" "+Ii(e)+"]"}function Ri(e,t){this.g=[],this.v=e,this.s=t||null,this.f=this.a=!1,this.c=void 0,this.u=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Ai(e,t,n){e.a=!0,e.c=n,e.f=!t,Mi(e)}function xi(e){if(e.a){if(!e.u)throw new Fi(e);e.u=!1}}function Di(e,t,n,r){e.g.push([t,n,r]),e.a&&Mi(e)}function Li(e){return M(e.g,function(e){return f(e[1])})}function Mi(e){if(e.h&&e.a&&Li(e)){var t=e.h,n=Vi[t];n&&(o.clearTimeout(n.a),delete Vi[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var r=n=!1;e.g.length&&!e.i;){var i=e.g.shift(),a=i[0],s=i[1];if(i=i[2],a=e.f?s:a)try{var u=a.call(i||e.s,t);void 0!==u&&(e.f=e.f&&(u==t||u instanceof Error),e.c=t=u),(C(t)||"function"==typeof o.Promise&&t instanceof o.Promise)&&(r=!0,e.i=!0)}catch(r){t=r,e.f=!0,Li(e)||(n=!0)}}e.c=t,r&&(u=g(e.m,e,!0),r=g(e.m,e,!1),t instanceof Ri?(Di(t,u,r),t.A=!0):t.then(u,r)),n&&(t=new Ui(t),Vi[t.a]=t,e.h=t.a)}function Fi(){T.call(this)}function ji(){T.call(this)}function Ui(e){this.a=o.setTimeout(g(this.c,this),0),this.b=e}(e=mi.prototype).Fa=function(){void 0!==r&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",fi(this.b,ki(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},e.abort=function(){this.a&&this.c&&(fi(this.b,ki(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Oi(this))},e.ua=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Oi(this,!0)),mi.lb.ua.call(this)},e.Db=function(){this.pa||(this.I||this.i||this.f?Si(this):this.sc())},e.sc=function(){Si(this)},e.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case gi:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(ii,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(e){return fi(this.b,"Can not get response: "+e.message),null}},Ri.prototype.cancel=function(e){if(this.a)this.c instanceof Ri&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.v?this.v.call(this.s,this):this.u=!0,this.a||(e=new ji(this),xi(this),Ai(this,!1,e))}},Ri.prototype.m=function(e,t){this.i=!1,Ai(this,e,t)},Ri.prototype.D=function(){xi(this),Ai(this,!0,null)},Ri.prototype.then=function(e,t,n){var r,o,i=new ye(function(e,t){r=e,o=t});return Di(this,r,function(e){e instanceof ji?i.cancel():o(e)}),i.then(e,t,n)},E(Ri),w(Fi,T),Fi.prototype.message="Deferred has already fired",Fi.prototype.name="AlreadyCalledError",w(ji,T),ji.prototype.message="Deferred was canceled",ji.prototype.name="CanceledError",Ui.prototype.c=function(){throw delete Vi[this.a],this.b};var Vi={};function Wi(e){var t={},n=t.document||document,r=gn(e),o=document.createElement("SCRIPT"),i={Fb:o,Fa:void 0},a=new Ri(Bi,i),s=null,u=null!=t.timeout?t.timeout:5e3;return 0<u&&(s=window.setTimeout(function(){Hi(o,!0);var e=new zi(qi,"Timeout reached for loading script "+r);xi(a),Ai(a,!1,e)},u),i.Fa=s),o.onload=o.onreadystatechange=function(){o.readyState&&"loaded"!=o.readyState&&"complete"!=o.readyState||(Hi(o,t.ad||!1,s),a.D())},o.onerror=function(){Hi(o,!0,s);var e=new zi(Ki,"Error while loading script "+r);xi(a),Ai(a,!1,e)},le(i=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),xn(o,i),o.src=gn(e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(o),a}function Bi(){if(this&&this.Fb){var e=this.Fb;e&&"SCRIPT"==e.tagName&&Hi(e,!0,this.Fa)}}function Hi(e,t,n){null!=n&&o.clearTimeout(n),e.onload=s,e.onerror=s,e.onreadystatechange=s,t&&window.setTimeout(function(){e&&e.parentNode&&e.parentNode.removeChild(e)},0)}var Ki=0,qi=1;function zi(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),T.call(this,n),this.code=e}function Gi(e){this.f=e}function Qi(e,n,r){if(this.b=e,e=n||{},this.i=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.l=e.secureTokenTimeout||$i,this.f=ae(e.secureTokenHeaders||Ji),this.g=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.h=e.firebaseTimeout||Zi,this.a=ae(e.firebaseHeaders||ea),r&&(this.a["X-Client-Version"]=r,this.f["X-Client-Version"]=r),r="Node"==Jn(),!(r=o.XMLHttpRequest||r&&t.INTERNAL.node&&t.INTERNAL.node.XMLHttpRequest)&&!$n())throw new jr("internal-error","The XMLHttpRequest compatibility library was not found.");this.c=void 0,$n()?this.c=new pi(self):Zn()?this.c=new Gi(r):this.c=new Zo}w(zi,T),w(Gi,Yo),Gi.prototype.a=function(){return new this.f},Gi.prototype.b=function(){return{}};var Yi,Xi="idToken",$i=new _r(3e4,6e4),Ji={"Content-Type":"application/x-www-form-urlencoded"},Zi=new _r(3e4,6e4),ea={"Content-Type":"application/json"};function ta(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function na(e,t){t?(e.a["X-Client-Version"]=t,e.f["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.f["X-Client-Version"])}function ra(e,t,n,r,i,a,s){gr()?(function(){var e=ir();return!((e=nr(e)!=tr?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e||Ke&&Ze&&!(9<Ze))}()||$n()?e=g(e.m,e):(Yi||(Yi=new ye(function(e,t){!function(e,t){if(((window.gapi||{}).client||{}).request)e();else{o[ia]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))};var n=_n(oa,{onload:ia});!function(e,t){Di(e,null,t,void 0)}(Wi(n),function(){t(Error("CORS_UNSUPPORTED"))})}}(e,t)})),e=g(e.u,e)),e(t,n,r,i,a,s)):n&&n(null)}Qi.prototype.m=function(e,t,n,r,o,i){var a=new mi(this.c);if(i){a.g=Math.max(0,i);var s=setTimeout(function(){a.dispatchEvent("timeout")},i)}Rt(a,"complete",function(){s&&clearTimeout(s);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return fi(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)}),At(a,"ready",function(){s&&clearTimeout(s),Ue(this)}),At(a,"timeout",function(){s&&clearTimeout(s),Ue(this),t&&t(null)}),wi(a,e,n,r,o)};var oa=yn("https://apis.google.com/js/client.js?onload=%{onload}"),ia="__fcb"+Math.floor(1e6*Math.random()).toString();function aa(e){if(!Qo.test(e.email))throw new jr("invalid-email")}function sa(e){"email"in e&&aa(e)}function ua(e){if(!e[Xi])throw new jr("internal-error")}function ca(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new jr("internal-error")}else{if(!e.sessionInfo)throw new jr("missing-verification-id");if(!e.code)throw new jr("missing-verification-code")}}Qi.prototype.u=function(e,t,n,r,o){var i=this;Yi.then(function(){window.gapi.client.setApiKey(i.b);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:o,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})}).o(function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})})},Qi.prototype.jb=function(){return Ka(this,La,{})},Qi.prototype.mb=function(e,t){return Ka(this,xa,{idToken:e,email:t})},Qi.prototype.nb=function(e,t){return Ka(this,Da,{idToken:e,password:t})};var la={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function ha(e){if(!e.requestUri||!e.sessionId&&!e.postBody)throw new jr("internal-error")}function fa(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=zo(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=zo(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=zo(e)):e.errorMessage&&(t=qa(e.errorMessage)),t)throw t;if(!e[Xi])throw new jr("internal-error")}function pa(e,t){return t.returnIdpCredential=!0,Ka(e,Ma,t)}function da(e,t){return t.returnIdpCredential=!0,Ka(e,ja,t)}function va(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,Ka(e,Fa,t)}function ya(e){if(!e.oobCode)throw new jr("invalid-action-code")}(e=Qi.prototype).ob=function(e,t){var n={idToken:e},r=[];return oe(la,function(e,o){var i=t[o];null===i?r.push(e):o in t&&(n[o]=i)}),r.length&&(n.deleteAttribute=r),Ka(this,xa,n)},e.gb=function(e,t){return le(e={requestType:"PASSWORD_RESET",email:e},t),Ka(this,Na,e)},e.hb=function(e,t){return le(e={requestType:"EMAIL_SIGNIN",email:e},t),Ka(this,Oa,e)},e.fb=function(e,t){return le(e={requestType:"VERIFY_EMAIL",idToken:e},t),Ka(this,Pa,e)},e.Sa=function(e){return Ka(this,Wa,e)},e.Wa=function(e,t){return Ka(this,Ra,{oobCode:e,newPassword:t})},e.Ia=function(e){return Ka(this,ga,{oobCode:e})},e.Ua=function(e){return Ka(this,ma,{oobCode:e})};var ma={endpoint:"setAccountInfo",w:ya,$:"email"},ga={endpoint:"resetPassword",w:ya,J:function(e){if(!e.email||!e.requestType)throw new jr("internal-error")}},_a={endpoint:"signupNewUser",w:function(e){if(aa(e),!e.password)throw new jr("weak-password")},J:ua,P:!0},ba={endpoint:"createAuthUri"},wa={endpoint:"deleteAccount",S:["idToken"]},Ea={endpoint:"setAccountInfo",S:["idToken","deleteProvider"],w:function(e){if(!l(e.deleteProvider))throw new jr("internal-error")}},Ca={endpoint:"emailLinkSignin",S:["email","oobCode"],w:aa,J:ua,P:!0},Ta={endpoint:"emailLinkSignin",S:["idToken","email","oobCode"],w:aa,J:ua,P:!0},Sa={endpoint:"getAccountInfo"},Oa={endpoint:"getOobConfirmationCode",S:["requestType"],w:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new jr("internal-error");aa(e)},$:"email"},Pa={endpoint:"getOobConfirmationCode",S:["idToken","requestType"],w:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new jr("internal-error")},$:"email"},Na={endpoint:"getOobConfirmationCode",S:["requestType"],w:function(e){if("PASSWORD_RESET"!=e.requestType)throw new jr("internal-error");aa(e)},$:"email"},Ia={pb:!0,endpoint:"getProjectConfig",Cb:"GET"},ka={pb:!0,endpoint:"getRecaptchaParam",Cb:"GET",J:function(e){if(!e.recaptchaSiteKey)throw new jr("internal-error")}},Ra={endpoint:"resetPassword",w:ya,$:"email"},Aa={endpoint:"sendVerificationCode",S:["phoneNumber","recaptchaToken"],$:"sessionInfo"},xa={endpoint:"setAccountInfo",S:["idToken"],w:sa,P:!0},Da={endpoint:"setAccountInfo",S:["idToken"],w:function(e){if(sa(e),!e.password)throw new jr("weak-password")},J:ua,P:!0},La={endpoint:"signupNewUser",J:ua,P:!0},Ma={endpoint:"verifyAssertion",w:ha,J:fa,P:!0},Fa={endpoint:"verifyAssertion",w:ha,J:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new jr("user-not-found");if(e.errorMessage)throw qa(e.errorMessage);if(!e[Xi])throw new jr("internal-error")},P:!0},ja={endpoint:"verifyAssertion",w:function(e){if(ha(e),!e.idToken)throw new jr("internal-error")},J:fa,P:!0},Ua={endpoint:"verifyCustomToken",w:function(e){if(!e.token)throw new jr("invalid-custom-token")},J:ua,P:!0},Va={endpoint:"verifyPassword",w:function(e){if(aa(e),!e.password)throw new jr("wrong-password")},J:ua,P:!0},Wa={endpoint:"verifyPhoneNumber",w:ca,J:ua},Ba={endpoint:"verifyPhoneNumber",w:function(e){if(!e.idToken)throw new jr("internal-error");ca(e)},J:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",zo(e);ua(e)}},Ha={Tb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",w:ca,J:ua};function Ka(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(void 0===r||null===r||""===r)return!1}return!0}(n,t.S))return Te(new jr("internal-error"));var r,o=t.Cb||"POST";return Ce(n).then(t.w).then(function(){return t.P&&(n.returnSecureToken=!0),function(e,t,n,r,o,i){var a=Qt(e.g+t);zt(a,"key",e.b),i&&zt(a,"cb",b().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&zt(a,u,r[u]);return new ye(function(t,i){ra(e,a.toString(),function(e){e?e.error?i(za(e,o||{})):t(e):i(new jr("network-request-failed"))},n,s?void 0:Fn(pr(r)),e.a,e.h.get())})}(e,t.endpoint,o,n,t.Tb,t.pb||!1)}).then(function(e){return r=e}).then(t.J).then(function(){if(!t.$)return r;if(!(t.$ in r))throw new jr("internal-error");return r[t.$]})}function qa(e){return za({error:{errors:[{message:e}],code:400,message:e}})}function za(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new jr(r[n]):null)return n;for(var o in n=e.error&&e.error.message||"",le(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*(.*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(o))return new jr(r[o],t);return!t&&e&&(t=fr(e)),new jr("internal-error",t)}var Ga,Qa={Vc:{Ya:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://securetoken.googleapis.com/v1/token",id:"p"},Xc:{Ya:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",eb:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},Yc:{Ya:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",eb:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Ya(e){for(var t in Qa)if(Qa[t].id===e)return{firebaseEndpoint:(e=Qa[t]).Ya,secureTokenEndpoint:e.eb};return null}function Xa(e){this.b=e,this.a=null,this.ab=function(e){return(ts||(ts=new ye(function(e,t){if(gr()){var n=function(){mr(),ar("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){mr(),t(Error("Network Error"))},timeout:Za.get()})};if(ar("gapi.iframes.Iframe"))e();else if(ar("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();o[r]=function(){ar("gapi.load")?n():t(Error("Network Error"))},Ce(Wi(r=_n(Ja,{onload:r}))).o(function(){t(Error("Network Error"))})}}else t(Error("Network Error"))}).o(function(e){throw ts=null,e}))).then(function(){return new ye(function(t,n){ar("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},function(r){function o(){clearTimeout(i),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var i=setTimeout(function(){n(Error("Network Error"))},es.get());r.ping(o).then(o,function(){n(Error("Network Error"))})})})})}(this)}Ga=Ya("__EID__")?"__EID__":void 0;var $a,Ja=yn("https://apis.google.com/js/api.js?onload=%{onload}"),Za=new _r(3e4,6e4),es=new _r(5e3,15e3),ts=null;function ns(e,t,n){this.i=e,this.g=t,this.h=n,this.f=null,this.a=Yt(this.i,"/__/auth/iframe"),zt(this.a,"apiKey",this.g),zt(this.a,"appName",this.h),this.b=null,this.c=[]}function rs(e,t,n,r,o){this.m=e,this.u=t,this.c=n,this.l=r,this.h=this.g=this.i=null,this.a=o,this.f=null}function os(e){try{return t.app(e).auth().Ka()}catch(e){return[]}}function is(e,t,n,r,o){this.u=e,this.f=t,this.b=n,this.c=r||null,this.h=o||null,this.m=this.s=this.v=null,this.g=[],this.l=this.a=null}function as(e){var t=Bn();return function(e){return Ka(e,Ia,{}).then(function(e){return e.authorizedDomains||[]})}(e).then(function(e){e:{var n=Qt(t),r=n.c;n=n.b;for(var o=0;o<e.length;o++){var i=e[o],a=n,s=r;if(0==i.indexOf("chrome-extension://")?a=Qt(i).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:Gn.test(i)?a=a==i:(i=i.split(".").join("\\."),a=new RegExp("^(.+\\."+i+"|"+i+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new Ko(Bn())})}function ss(e){return e.l?e.l:(e.l=Qn().then(function(){if(!e.s){var t=e.c,n=e.h,r=os(e.b),o=new ns(e.u,e.f,e.b);o.f=t,o.b=n,o.c=W(r||[]),e.s=o.toString()}e.i=new Xa(e.s),function(e){if(!e.i)throw Error("IfcHandler must be initialized!");!function(e,t){e.ab.then(function(){e.a.register("authEvent",t,ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})}(e.i,function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=Wo(t.authEvent),n=0;n<e.g.length;n++)r=e.g[n](t)||r;return(n={}).status=r?"ACK":"ERROR",Ce(n)}return n.status="ERROR",Ce(n)})}(e)}),e.l)}function us(e){return e.m||(e.v=e.c?or(e.c,os(e.b)):null,e.m=new Qi(e.f,Ya(e.h),e.v)),e.m}function cs(e,t,n,r,o,i,a,s,u,c){return(e=new rs(e,t,n,r,o)).i=i,e.g=a,e.h=s,e.b=ae(u||null),e.f=c,e.toString()}function ls(e){if(this.a=e||t.INTERNAL.reactNative&&t.INTERNAL.reactNative.AsyncStorage,!this.a)throw new jr("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function hs(){this.a={},this.type="inMemory"}function fs(){try{var e=!!o.indexedDB}catch(t){e=!1}if(!e)throw new jr("web-storage-unsupported");this.f={},this.c=[],this.a=0,this.h=o.indexedDB,this.type="indexedDB"}function ps(e){return e.g||(e.g=function(e){return new ye(function(t,n){var r=e.h.open("firebaseLocalStorageDb",1);r.onerror=function(e){n(Error(e.target.errorCode))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){n(e)}},r.onsuccess=function(e){t(e.target.result)}})}(e)),e.g}function ds(e){return e.objectStore("firebaseLocalStorage")}function vs(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function ys(e){return new ye(function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(Error(e.target.errorCode))}})}function ms(){if(!function(){var e="Node"==Jn();if(!(e=gs()||e&&t.INTERNAL.node&&t.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==Jn())throw new jr("internal-error","The LocalStorage compatibility library was not found.");throw new jr("web-storage-unsupported")}this.a=gs()||t.INTERNAL.node.localStorage,this.type="localStorage"}function gs(){try{var e=o.localStorage,t=vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function _s(){this.type="nullStorage"}function bs(){if(!function(){var e="Node"==Jn();if(!(e=ws()||e&&t.INTERNAL.node&&t.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==Jn())throw new jr("internal-error","The SessionStorage compatibility library was not found.");throw new jr("web-storage-unsupported")}this.a=ws()||t.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function ws(){try{var e=o.sessionStorage,t=vr();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}ns.prototype.toString=function(){return this.f?zt(this.a,"v",this.f):un(this.a.a,"v"),this.b?zt(this.a,"eid",this.b):un(this.a.a,"eid"),this.c.length?zt(this.a,"fw",this.c.join(",")):un(this.a.a,"fw"),this.a.toString()},rs.prototype.toString=function(){var e=Yt(this.m,"/__/auth/handler");if(zt(e,"apiKey",this.u),zt(e,"appName",this.c),zt(e,"authType",this.l),this.a.isOAuthProvider){var n=this.a;try{var r=t.app(this.c).auth().aa()}catch(e){r=null}for(var o in n.Xa=r,zt(e,"providerId",this.a.providerId),r=pr((n=this.a).tb))r[o]=r[o].toString();o=n.zc,r=ae(r);for(var i=0;i<o.length;i++){var a=o[i];a in r&&delete r[a]}n.Za&&n.Xa&&!r[n.Za]&&(r[n.Za]=n.Xa),ie(r)||zt(e,"customParameters",fr(r))}if("function"==typeof this.a.yb&&((n=this.a.yb()).length&&zt(e,"scopes",n.join(","))),this.i?zt(e,"redirectUrl",this.i):un(e.a,"redirectUrl"),this.g?zt(e,"eventId",this.g):un(e.a,"eventId"),this.h?zt(e,"v",this.h):un(e.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Gt(e,s)&&zt(e,s,this.b[s]);return this.f?zt(e,"eid",this.f):un(e.a,"eid"),(s=os(this.c)).length&&zt(e,"fw",s.join(",")),e.toString()},(e=is.prototype).Da=function(e,t,n){var r=new jr("popup-closed-by-user"),o=new jr("web-storage-unsupported"),i=this,a=!1;return this.ca().then(function(){(function(e){var t={type:"webStorageSupport"};return ss(e).then(function(){return function(e,t){return e.ab.then(function(){return new ye(function(n){e.a.send(t.type,t,n,ar("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))})})}(e.i,t)}).then(function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()})})(i).then(function(n){n||(e&&qn(e),t(o),a=!0)})}).o(function(){}).then(function(){if(!a)return function(e){return new ye(function(t){return function n(){Lt(2e3).then(function(){if(e&&!e.closed)return n();t()})}()})}(e)}).then(function(){if(!a)return Lt(n).then(function(){t(r)})})},e.Gb=function(){var e=ir();return!hr(e)&&!yr(e)},e.Bb=function(){return!1},e.xb=function(e,t,n,r,o,i,a){if(!e)return Te(new jr("popup-blocked"));if(a&&!hr())return this.ca().o(function(t){qn(e),o(t)}),r(),Ce();this.a||(this.a=as(us(this)));var s=this;return this.a.then(function(){var t=s.ca().o(function(t){throw qn(e),o(t),t});return r(),t}).then(function(){(Uo(n),a)||Hn(cs(s.u,s.f,s.b,t,n,null,i,s.c,void 0,s.h),e)}).o(function(e){throw"auth/network-request-failed"==e.code&&(s.a=null),e})},e.Ba=function(e,t,n){this.a||(this.a=as(us(this)));var r=this;return this.a.then(function(){Uo(t),Hn(cs(r.u,r.f,r.b,e,t,Bn(),n,r.c,void 0,r.h))}).o(function(e){throw"auth/network-request-failed"==e.code&&(r.a=null),e})},e.ca=function(){var e=this;return ss(this).then(function(){return e.i.ab}).o(function(){throw e.a=null,new jr("network-request-failed")})},e.Lb=function(){return!0},e.va=function(e){this.g.push(e)},e.Ja=function(e){U(this.g,function(t){return t==e})},(e=ls.prototype).get=function(e){return Ce(this.a.getItem(e)).then(function(e){return e&&dr(e)})},e.set=function(e,t){return Ce(this.a.setItem(e,fr(t)))},e.X=function(e){return Ce(this.a.removeItem(e))},e.ia=function(){},e.ea=function(){},(e=hs.prototype).get=function(e){return Ce(this.a[e])},e.set=function(e,t){return this.a[e]=t,Ce()},e.X=function(e){return delete this.a[e],Ce()},e.ia=function(){},e.ea=function(){},(e=fs.prototype).set=function(e,t){var n,r=!1,o=this;return ps(this).then(function(t){return ys((t=ds(vs(n=t,!0))).get(e))}).then(function(i){var a=ds(vs(n,!0));return i?(i.value=t,ys(a.put(i))):(o.a++,r=!0,(i={}).fbase_key=e,i.value=t,ys(a.add(i)))}).then(function(){o.f[e]=t}).ga(function(){r&&o.a--})},e.get=function(e){return ps(this).then(function(t){return ys(ds(vs(t,!1)).get(e))}).then(function(e){return e&&e.value})},e.X=function(e){var t=!1,n=this;return ps(this).then(function(r){return t=!0,n.a++,ys(ds(vs(r,!0)).delete(e))}).then(function(){delete n.f[e]}).ga(function(){t&&n.a--})},e.Ic=function(){var e=this;return ps(this).then(function(e){var t=ds(vs(e,!1));return t.getAll?ys(t.getAll()):new ye(function(e,n){var r=[],o=t.openCursor();o.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},o.onerror=function(e){n(Error(e.target.errorCode))}})}).then(function(t){var n={},r=[];if(0==e.a){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=function e(t,n){var r,o=[];for(r in t)if(r in n)if(typeof t[r]!=typeof n[r])o.push(r);else if(l(t[r])){e:{var i=void 0,a=t[r],s=n[r];for(i in a)if(!(i in s)||a[i]!==s[i]){i=!1;break e}for(i in s)if(!(i in a)){i=!1;break e}i=!0}i||o.push(r)}else"object"==typeof t[r]&&null!=t[r]&&null!=n[r]?0<e(t[r],n[r]).length&&o.push(r):t[r]!==n[r]&&o.push(r);else o.push(r);for(r in n)r in t||o.push(r);return o}(e.f,n),e.f=n}return r})},e.ia=function(e){0==this.c.length&&function(e){e.b&&e.b.cancel("STOP_EVENT"),function t(){e.b=Lt(800).then(g(e.Ic,e)).then(function(t){0<t.length&&D(e.c,function(e){e(t)})}).then(t).o(function(e){"STOP_EVENT"!=e.message&&t()});return e.b}()}(this),this.c.push(e)},e.ea=function(e){U(this.c,function(t){return t==e}),0==this.c.length&&this.b&&this.b.cancel("STOP_EVENT")},(e=ms.prototype).get=function(e){var t=this;return Ce().then(function(){return dr(t.a.getItem(e))})},e.set=function(e,t){var n=this;return Ce().then(function(){var r=fr(t);null===r?n.X(e):n.a.setItem(e,r)})},e.X=function(e){var t=this;return Ce().then(function(){t.a.removeItem(e)})},e.ia=function(e){o.window&&gt(o.window,"storage",e)},e.ea=function(e){o.window&&wt(o.window,"storage",e)},(e=_s.prototype).get=function(){return Ce(null)},e.set=function(){return Ce()},e.X=function(){return Ce()},e.ia=function(){},e.ea=function(){},(e=bs.prototype).get=function(e){var t=this;return Ce().then(function(){return dr(t.a.getItem(e))})},e.set=function(e,t){var n=this;return Ce().then(function(){var r=fr(t);null===r?n.X(e):n.a.setItem(e,r)})},e.X=function(e){var t=this;return Ce().then(function(){t.a.removeItem(e)})},e.ia=function(){},e.ea=function(){};var Es,Cs,Ts={B:ms,Pa:bs},Ss={B:ms,Pa:bs},Os={B:ls,Pa:_s},Ps={B:ms,Pa:_s},Ns={Uc:"local",NONE:"none",Wc:"session"};function Is(){var e=!(yr(ir())||!Xn()),t=hr(),n=sr();this.m=e,this.h=t,this.l=n,this.a={},Es||(Es=new function(){var e={};e.Browser=Ts,e.Node=Ss,e.ReactNative=Os,e.Worker=Ps,this.a=e[Jn()]}),e=Es;try{if(!Wn()&&Er()||!o.indexedDB)var r=new e.a.B;else $a||($a=new fs),r=$a;this.g=r}catch(e){this.g=new hs,this.h=!0}try{this.i=new e.a.Pa}catch(e){this.i=new hs}this.u=new hs,this.f=g(this.Kb,this),this.b={}}function ks(){return Cs||(Cs=new Is),Cs}function Rs(e,t){switch(t){case"session":return e.i;case"none":return e.u;default:return e.g}}function As(e,t){return"firebase:"+e.name+(t?":"+t:"")}function xs(e,t,n){return n=As(t,n),"local"==t.B&&(e.b[n]=null),Rs(e,t.B).X(n)}function Ds(e){e.c&&(clearInterval(e.c),e.c=null)}(e=Is.prototype).get=function(e,t){return Rs(this,e.B).get(As(e,t))},e.set=function(e,t,n){var r=As(e,n),o=this,i=Rs(this,e.B);return i.set(r,t).then(function(){return i.get(r)}).then(function(t){"local"==e.B&&(o.b[r]=t)})},e.addListener=function(e,t,n){e=As(e,t),this.l&&(this.b[e]=o.localStorage.getItem(e)),ie(this.a)&&(Rs(this,"local").ia(this.f),this.h||(Wn()||!Er())&&o.indexedDB||!this.l||function(e){Ds(e),e.c=setInterval(function(){for(var t in e.a){var n=o.localStorage.getItem(t),r=e.b[t];n!=r&&(e.b[t]=n,n=new ut({type:"storage",key:t,target:window,oldValue:r,newValue:n,a:!0}),e.Kb(n))}},1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(n)},e.removeListener=function(e,t,n){e=As(e,t),this.a[e]&&(U(this.a[e],function(e){return e==n}),0==this.a[e].length&&delete this.a[e]),ie(this.a)&&(Rs(this,"local").ea(this.f),Ds(this))},e.Kb=function(e){if(e&&e.g){var t=e.a.key;if(null==t)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=o.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.Va(n))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?Rs(this,"local").ea(this.f):Ds(this),this.m)if(n=o.localStorage.getItem(t),(r=e.a.newValue)!==n)null!==r?o.localStorage.setItem(t,r):o.localStorage.removeItem(t);else if(this.b[t]===r&&void 0===e.a.a)return;var a=this;n=function(){void 0===e.a.a&&a.b[t]===o.localStorage.getItem(t)||(a.b[t]=o.localStorage.getItem(t),a.Va(t))},Ke&&Ze&&10==Ze&&o.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(n,10):n()}}else D(e,g(this.Va,this))},e.Va=function(e){this.a[e]&&D(this.a[e],function(e){e()})};var Ls,Ms={name:"authEvent",B:"local"};function Fs(e,t){this.b=-1,this.b=js,this.f=o.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=o.Int32Array?new Int32Array(64):Array(64),void 0!==Ls||(Ls=o.Int32Array?new Int32Array(qs):qs),this.reset()}w(Fs,function(){this.b=-1});for(var js=64,Us=js-1,Vs=[],Ws=0;Ws<Us;Ws++)Vs[Ws]=0;var Bs=V(128,Vs);function Hs(e){for(var t=e.f,n=e.l,r=0,o=0;o<t.length;)n[r++]=t[o]<<24|t[o+1]<<16|t[o+2]<<8|t[o+3],o=4*r;for(t=16;64>t;t++){o=0|n[t-15],r=0|n[t-2];var i=(0|n[t-16])+((o>>>7|o<<25)^(o>>>18|o<<14)^o>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=i+a|0}r=0|e.a[0],o=0|e.a[1];var s=0|e.a[2],u=0|e.a[3],c=0|e.a[4],l=0|e.a[5],h=0|e.a[6];for(i=0|e.a[7],t=0;64>t;t++){var f=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&o^r&s^o&s)|0;a=(i=i+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&l^~c&h)+(0|Ls[t])|0)+(0|n[t])|0)|0,i=h,h=l,l=c,c=u+a|0,u=s,s=o,o=r,r=a+f|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+o|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+u|0,e.a[4]=e.a[4]+c|0,e.a[5]=e.a[5]+l|0,e.a[6]=e.a[6]+h|0,e.a[7]=e.a[7]+i|0}function Ks(e,t,n){void 0===n&&(n=t.length);var r=0,o=e.c;if(i(t))for(;r<n;)e.f[o++]=t.charCodeAt(r++),o==e.b&&(Hs(e),o=0);else{if(!h(t))throw Error("message must be string or array");for(;r<n;){var a=t[r++];if(!("number"==typeof a&&0<=a&&255>=a&&a==(0|a)))throw Error("message must be a byte array");e.f[o++]=a,o==e.b&&(Hs(e),o=0)}}e.c=o,e.g+=n}Fs.prototype.reset=function(){this.g=this.c=0,this.a=o.Int32Array?new Int32Array(this.h):W(this.h)};var qs=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function zs(){Fs.call(this,8,Gs)}w(zs,Fs);var Gs=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Qs(e,t,n,r,o){this.u=e,this.i=t,this.l=n,this.m=r||null,this.s=o||null,this.h=t+":"+n,this.v=new function(){this.a=ks()},this.g=new function(e){this.a=e,this.b=ks()}(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ys(e){return new jr("invalid-cordova-configuration",e)}function Xs(e){var t=new zs;Ks(t,e),e=[];var n=8*t.g;56>t.c?Ks(t,Bs,56-t.c):Ks(t,Bs,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(Hs(t),r=n=0;r<t.i;r++)for(var o=24;0<=o;o-=8)e[n++]=t.a[r]>>o&255;return function(e){return L(e,function(e){return 1<(e=e.toString(16)).length?e:"0"+e}).join("")}(e)}function $s(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function Js(e){return e.f||(e.f=e.ca().then(function(){return new ye(function(t){e.va(function n(r){return t(r),e.Ja(n),!1}),function(e){function t(t){r=!0,i&&i.cancel(),Zs(e).then(function(r){var o=n;if(r&&t&&t.url){o=null;var i=t.url,a=Qt(i),s=Gt(a,"link"),u=Gt(Qt(s),"link");a=Gt(a,"deep_link_id"),-1!=(i=Gt(Qt(a),"link")||a||u||s||i).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=dr(Gt(o=Qt(i),"firebaseError")||null))?Ur(o):null)?new Vo(r.b,r.c,null,null,o):new Vo(r.b,r.c,i,r.g)),o=o||n}$s(e,o)})}var n=new Vo("unknown",null,null,null,new jr("no-auth-event")),r=!1,i=Lt(500).then(function(){return Zs(e).then(function(){r||$s(e,n)})}),a=o.handleOpenURL;o.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(ar("BuildInfo.packageName",o).toLowerCase()+"://")&&t({url:e}),"function"==typeof a)try{a(e)}catch(e){console.error(e)}},Ho||(Ho=new Bo),Ho.subscribe(t)}(e)})})),e.f}function Zs(e){var t=null;return function(e){return e.b.get(Ms,e.a).then(function(e){return Wo(e)})}(e.g).then(function(n){return t=n,xs((n=e.g).b,Ms,n.a)}).then(function(){return t})}(e=Qs.prototype).ca=function(){return this.ya?this.ya:this.ya=(Yn(void 0)?Qn().then(function(){return new ye(function(e,t){var n=o.document,r=setTimeout(function(){t(Error("Cordova framework is not ready."))},1e3);n.addEventListener("deviceready",function(){clearTimeout(r),e()},!1)})}):Te(Error("Cordova must run in an Android or iOS file scheme."))).then(function(){if("function"!=typeof ar("universalLinks.subscribe",o))throw Ys("cordova-universal-links-plugin is not installed");if(void 0===ar("BuildInfo.packageName",o))throw Ys("cordova-plugin-buildinfo is not installed");if("function"!=typeof ar("cordova.plugins.browsertab.openUrl",o))throw Ys("cordova-plugin-browsertab is not installed");if("function"!=typeof ar("cordova.InAppBrowser.open",o))throw Ys("cordova-plugin-inappbrowser is not installed")},function(){throw new jr("cordova-not-ready")})},e.Da=function(e,t){return t(new jr("operation-not-supported-in-this-environment")),Ce()},e.xb=function(){return Te(new jr("operation-not-supported-in-this-environment"))},e.Lb=function(){return!1},e.Gb=function(){return!0},e.Bb=function(){return!0},e.Ba=function(e,t,n){if(this.c)return Te(new jr("redirect-operation-pending"));var r=this,i=o.document,a=null,s=null,u=null,c=null;return this.c=Ce().then(function(){return Uo(t),Js(r)}).then(function(){return function(e,t,n,r){var i=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new Vo(t,r,null,i,new jr("no-auth-event")),s=ar("BuildInfo.packageName",o);if("string"!=typeof s)throw new jr("invalid-cordova-configuration");var u=ar("BuildInfo.displayName",o),c={};if(ir().toLowerCase().match(/iphone|ipad|ipod/))c.ibi=s;else{if(!ir().toLowerCase().match(/android/))return Te(new jr("operation-not-supported-in-this-environment"));c.apn=s}u&&(c.appDisplayName=u),i=Xs(i),c.sessionId=i;var l=cs(e.u,e.i,e.l,t,n,null,r,e.m,c,e.s);return e.ca().then(function(){var t=e.h;return e.v.a.set(Ms,a.C(),t)}).then(function(){var t=ar("cordova.plugins.browsertab.isAvailable",o);if("function"!=typeof t)throw new jr("invalid-cordova-configuration");var n=null;t(function(t){if(t){if("function"!=typeof(n=ar("cordova.plugins.browsertab.openUrl",o)))throw new jr("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=ar("cordova.InAppBrowser.open",o)))throw new jr("invalid-cordova-configuration");t=!(!(t=ir()).match(/(iPad|iPhone|iPod).*OS 7_\d/i)&&!t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)),e.a=n(l,t?"_blank":"_system","location=yes")}})})}(r,e,t,n)}).then(function(){return new ye(function(e,t){s=function(){var t=ar("cordova.plugins.browsertab.close",o);return e(),"function"==typeof t&&t(),r.a&&"function"==typeof r.a.close&&(r.a.close(),r.a=null),!1},r.va(s),u=function(){a||(a=Lt(2e3).then(function(){t(new jr("redirect-cancelled-by-user"))}))},c=function(){br()&&u()},i.addEventListener("resume",u,!1),ir().toLowerCase().match(/android/)||i.addEventListener("visibilitychange",c,!1)}).o(function(e){return Zs(r).then(function(){throw e})})}).ga(function(){u&&i.removeEventListener("resume",u,!1),c&&i.removeEventListener("visibilitychange",c,!1),a&&a.cancel(),s&&r.Ja(s),r.c=null})},e.va=function(e){this.b.push(e),Js(this).o(function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new Vo("unknown",null,null,null,new jr("no-auth-event")),e(t))})},e.Ja=function(e){U(this.b,function(t){return t==e})};var eu={name:"pendingRedirect",B:"session"};function tu(e){return xs(e.b,eu,e.a)}function nu(e,t,n){this.v=e,this.l=t,this.u=n,this.h=[],this.f=!1,this.i=g(this.m,this),this.c=new fu,this.s=new yu,this.g=new function(e){this.a=e,this.b=ks()}(this.l+":"+this.u),this.b={},this.b.unknown=this.c,this.b.signInViaRedirect=this.c,this.b.linkViaRedirect=this.c,this.b.reauthViaRedirect=this.c,this.b.signInViaPopup=this.s,this.b.linkViaPopup=this.s,this.b.reauthViaPopup=this.s,this.a=ru(this.v,this.l,this.u,Ga)}function ru(e,n,r,o){var i=t.SDK_VERSION||null;return Yn()?new Qs(e,n,r,i,o):new is(e,n,r,i,o)}function ou(e){e.f||(e.f=!0,e.a.va(e.i));var t=e.a;return e.a.ca().o(function(n){throw e.a==t&&e.reset(),n})}function iu(e){e.a.Gb()&&ou(e).o(function(t){var n=new Vo("unknown",null,null,null,new jr("operation-not-supported-in-this-environment"));cu(t)&&e.m(n)}),e.a.Bb()||pu(e.c)}nu.prototype.reset=function(){this.f=!1,this.a.Ja(this.i),this.a=ru(this.v,this.l,this.u)},nu.prototype.subscribe=function(e){if(F(this.h,e)||this.h.push(e),!this.f){var t=this;(function(e){return e.b.get(eu,e.a).then(function(e){return"pending"==e})})(this.g).then(function(e){e?tu(t.g).then(function(){ou(t).o(function(e){var n=new Vo("unknown",null,null,null,new jr("operation-not-supported-in-this-environment"));cu(e)&&t.m(n)})}):iu(t)}).o(function(){iu(t)})}},nu.prototype.unsubscribe=function(e){U(this.h,function(t){return t==e})},nu.prototype.m=function(e){if(!e)throw new jr("invalid-auth-event");for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.qb(e.b,e.c)){(t=this.b[e.b])&&t.h(e,r),t=!0;break}}return pu(this.c),t};var au=new _r(2e3,1e4),su=new _r(3e4,6e4);function uu(e,t,n,r,o,i){return e.a.xb(t,n,r,function(){e.f||(e.f=!0,e.a.va(e.i))},function(){e.reset()},o,i)}function cu(e){return!(!e||"auth/cordova-not-ready"!=e.code)}nu.prototype.ba=function(){return this.c.ba()},nu.prototype.Ba=function(e,t,n){var r,o=this;return function(e){return e.b.set(eu,"pending",e.a)}(this.g).then(function(){return o.a.Ba(e,t,n).o(function(e){if(cu(e))throw new jr("operation-not-supported-in-this-environment");return r=e,tu(o.g).then(function(){throw r})}).then(function(){return o.a.Lb()?new ye(function(){}):tu(o.g).then(function(){return o.ba()}).then(function(){}).o(function(){})})})},nu.prototype.Da=function(e,t,n,r){return this.a.Da(n,function(n){e.fa(t,null,n,r)},au.get())};var lu={};function hu(e,t,n){var r=t+":"+n;return lu[r]||(lu[r]=new nu(e,t,n)),lu[r]}function fu(){this.b=null,this.f=[],this.c=[],this.a=null,this.g=!1}function pu(e){e.g||(e.g=!0,vu(e,!1,null,null))}function du(e,t){if(e.b=function(){return Ce(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function vu(e,t,n,r){t?r?function(e,t){if(e.b=function(){return Te(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):du(e,n):du(e,{user:null}),e.f=[],e.c=[]}function yu(){}function mu(e,t){this.a=t,Or(this,"verificationId",e)}function gu(e,t,n,r){return new Mo(e).Sa(t,n).then(function(e){return new mu(e,r)})}function _u(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function bu(e){this.f=e,this.b=this.a=null,this.c=0}function wu(e,t){var n=t[Xi],r=t.refreshToken;t=Eu(t.expiresIn),e.b=n,e.c=t,e.a=r}function Eu(e){return b()+1e3*parseInt(e,10)}function Cu(e,t){return function(e,t){return new ye(function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?ra(e,e.i+"?key="+encodeURIComponent(e.b),function(e){e?e.error?r(za(e)):e.access_token&&e.refresh_token?n(e):r(new jr("internal-error")):r(new jr("network-request-failed"))},"POST",sn(t).toString(),e.f,e.l.get()):r(new jr("internal-error"))})}(e.f,t).then(function(t){return e.b=t.access_token,e.c=Eu(t.expires_in),e.a=t.refresh_token,{accessToken:e.b,expirationTime:e.c,refreshToken:e.a}}).o(function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t})}function Tu(e,t){this.a=e||null,this.b=t||null,Pr(this,{lastSignInTime:wr(t||null),creationTime:wr(e||null)})}function Su(e,t){for(var n in st.call(this,e),t)this[n]=t[n]}function Ou(e,n,r){this.D=[],this.G=e.apiKey,this.s=e.appName,this.A=e.authDomain||null,e=t.SDK_VERSION?or(t.SDK_VERSION):null,this.b=new Qi(this.G,Ya(Ga),e),this.h=new bu(this.b),xu(this,n[Xi]),wu(this.h,n),Or(this,"refreshToken",this.h.a),Mu(this,r||{}),kt.call(this),this.I=!1,this.A&&ur()&&(this.a=hu(this.A,this.G,this.s)),this.N=[],this.i=null,this.l=function(e){return new _u(function(){return e.F(!0)},function(e){return!(!e||"auth/network-request-failed"!=e.code)},function(){var t=e.h.c-b()-3e5;return 0<t?t:0})}(this),this.U=g(this.Ga,this);var o=this;this.ha=null,this.sa=function(e){o.na(e.h)},this.W=null,this.O=[],this.ra=function(e){Nu(o,e.f)},this.V=null}function Pu(e,t){e.W&&wt(e.W,"languageCodeChanged",e.sa),(e.W=t)&&gt(t,"languageCodeChanged",e.sa)}function Nu(e,n){e.O=n,na(e.b,t.SDK_VERSION?or(t.SDK_VERSION,e.O):null)}function Iu(e,t){e.V&&wt(e.V,"frameworkChanged",e.ra),(e.V=t)&&gt(t,"frameworkChanged",e.ra)}function ku(e){try{return t.app(e.s).auth()}catch(t){throw new jr("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.s+"'!")}}function Ru(e){e.m||e.l.b||(e.l.start(),wt(e,"tokenChanged",e.U),gt(e,"tokenChanged",e.U))}function Au(e){wt(e,"tokenChanged",e.U),e.l.stop()}function xu(e,t){e.qa=t,Or(e,"_lat",t)}function Du(e){for(var t=[],n=0;n<e.N.length;n++)t.push(e.N[n](e));return function(e){return new ye(function(t){var n=e.length,r=[];if(n)for(var o=function(e,o,i){n--,r[e]=o?{Zb:!0,value:i}:{Zb:!1,reason:i},0==n&&t(r)},i=0;i<e.length;i++)Se(e[i],_(o,i,!0),_(o,i,!1));else t(r)})}(t).then(function(){return e})}function Lu(e){e.a&&!e.I&&(e.I=!0,e.a.subscribe(e))}function Mu(e,t){Pr(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,metadata:new Tu(t.createdAt,t.lastLoginAt),providerData:[]})}function Fu(){}function ju(e){return Ce().then(function(){if(e.m)throw new jr("app-deleted")})}function Uu(e){return L(e.providerData,function(e){return e.providerId})}function Vu(e,t){t&&(Wu(e,t.providerId),e.providerData.push(t))}function Wu(e,t){U(e.providerData,function(e){return e.providerId==t})}function Bu(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&Or(e,t,n)}function Hu(e,t){e!=t&&(Pr(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,providerData:[]}),t.metadata?Or(e,"metadata",function(e){return new Tu(e.a,e.b)}(t.metadata)):Or(e,"metadata",new Tu),D(t.providerData,function(t){Vu(e,t)}),e.h=t.h,Or(e,"refreshToken",e.h.a))}function Ku(e){return e.F().then(function(t){var n=e.isAnonymous;return function(e,t){return Ka(e.b,Sa,{idToken:t}).then(g(e.tc,e))}(e,t).then(function(){return n||Bu(e,"isAnonymous",!1),t})})}function qu(e,t){t[Xi]&&e.qa!=t[Xi]&&(wu(e.h,t),e.dispatchEvent(new Su("tokenChanged")),xu(e,t[Xi]),Bu(e,"refreshToken",e.h.a))}function zu(e,t){return Ku(e).then(function(){if(F(Uu(e),t))return Du(e).then(function(){throw new jr("provider-already-linked")})})}function Gu(e,t,n){return Nr({user:e,credential:jo(t),additionalUserInfo:t=so(t),operationType:n})}function Qu(e,t){return qu(e,t),e.reload().then(function(){return e})}function Yu(e,n,r,o,i){if(!ur())return Te(new jr("operation-not-supported-in-this-environment"));if(e.i&&!i)return Te(e.i);var a=ao(r.providerId),s=vr(e.uid+":::"),u=null;(!hr()||Xn())&&e.A&&r.isOAuthProvider&&(u=cs(e.A,e.G,e.s,n,r,null,s,t.SDK_VERSION||null));var c=zn(u,a&&a.Aa,a&&a.za);return o=o().then(function(){if($u(e),!i)return e.F().then(function(){})}).then(function(){return uu(e.a,c,n,r,s,!!u)}).then(function(){return new ye(function(t,r){e.fa(n,null,new jr("cancelled-popup-request"),e.g||null),e.f=t,e.v=r,e.g=s,e.c=e.a.Da(e,n,c,s)})}).then(function(e){return c&&qn(c),e?Nr(e):null}).o(function(e){throw c&&qn(c),e}),Ju(e,o,i)}function Xu(e,t,n,r,o){if(!ur())return Te(new jr("operation-not-supported-in-this-environment"));if(e.i&&!o)return Te(e.i);var i=null,a=vr(e.uid+":::");return r=r().then(function(){if($u(e),!o)return e.F().then(function(){})}).then(function(){return e.Z=a,Du(e)}).then(function(t){return e.da&&(t=(t=e.da).b.set(ec,e.C(),t.a)),t}).then(function(){return e.a.Ba(t,n,a)}).o(function(t){if(i=t,e.da)return tc(e.da);throw i}).then(function(){if(i)throw i}),Ju(e,r,o)}function $u(e){if(!e.a||!e.I){if(e.a&&!e.I)throw new jr("internal-error");throw new jr("auth-domain-config-required")}}function Ju(e,t,n){var r=function(e,t,n){return e.i&&!n?(t.cancel(),Te(e.i)):t.o(function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.i||e.dispatchEvent(new Su("userInvalidated")),e.i=t),t})}(e,t,n);return e.D.push(r),r.ga(function(){j(e.D,r)}),r}function Zu(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName},n={};if(!(e.stsTokenManager&&e.stsTokenManager.accessToken&&e.stsTokenManager.expirationTime))return null;n[Xi]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null,n.expiresIn=(e.stsTokenManager.expirationTime-b())/1e3;var r=new Ou(t,n,e);return e.providerData&&D(e.providerData,function(e){e&&Vu(r,Nr(e))}),e.redirectEventId&&(r.Z=e.redirectEventId),r}fu.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},fu.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.b,r=e.c,o=e.a&&"auth/web-storage-unsupported"==e.a.code,i=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;"unknown"!=n||o||i?e.a?(vu(this,!0,null,e.a),Ce()):t.wa(n,r)?function(e,t,n){n=n.wa(t.b,t.c);var r=t.f,o=t.g,i=!!t.b.match(/Redirect$/);n(r,o).then(function(t){vu(e,i,t,null)}).o(function(t){vu(e,i,null,t)})}(this,e,t):Te(new jr("invalid-auth-event")):(vu(this,!1,null,null),Ce())}else Te(new jr("invalid-auth-event"))},fu.prototype.ba=function(){var e=this;return new ye(function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new jr("timeout");e.a&&e.a.cancel(),e.a=Lt(su.get()).then(function(){e.b||vu(e,!0,null,t)})}(e))})},yu.prototype.h=function(e,t){if(e){var n=e.b,r=e.c;e.a?(t.fa(e.b,null,e.a,e.c),Ce()):t.wa(n,r)?function(e,t){var n=e.c,r=e.b;t.wa(r,n)(e.f,e.g).then(function(e){t.fa(r,e,null,n)}).o(function(e){t.fa(r,null,e,n)})}(e,t):Te(new jr("invalid-auth-event"))}else Te(new jr("invalid-auth-event"))},mu.prototype.confirm=function(e){return e=Fo(this.verificationId,e),this.a(e)},_u.prototype.start=function(){this.a=this.c,function e(t,n){t.stop();t.b=Lt(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(t,n)).then(function(){return e=o.document,t=null,br()||!e?Ce():new ye(function(n){t=function(){br()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)}).o(function(n){throw e.removeEventListener("visibilitychange",t,!1),n});var e,t}).then(function(){return t.h()}).then(function(){e(t,!0)}).o(function(n){t.i(n)&&e(t,!1)})}(this,!0)},_u.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},bu.prototype.C=function(){return{apiKey:this.f.b,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},bu.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?Te(new jr("user-token-expired")):e||!this.b||b()>this.c-3e4?this.a?Cu(this,{grant_type:"refresh_token",refresh_token:this.a}):Ce(null):Ce({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Tu.prototype.C=function(){return{lastLoginAt:this.b,createdAt:this.a}},w(Su,st),w(Ou,kt),Ou.prototype.na=function(e){this.ha=e,ta(this.b,e)},Ou.prototype.aa=function(){return this.ha},Ou.prototype.Ka=function(){return W(this.O)},Ou.prototype.Ga=function(){this.l.b&&(this.l.stop(),this.l.start())},Or(Ou.prototype,"providerId","firebase"),(e=Ou.prototype).reload=function(){var e=this;return Ju(this,ju(this).then(function(){return Ku(e).then(function(){return Du(e)}).then(Fu)}))},e.F=function(e){var t=this;return Ju(this,ju(this).then(function(){return t.h.getToken(e)}).then(function(e){if(!e)throw new jr("internal-error");return e.accessToken!=t.qa&&(xu(t,e.accessToken),t.dispatchEvent(new Su("tokenChanged"))),Bu(t,"refreshToken",e.refreshToken),e.accessToken}))},e.getToken=function(e){return Tr["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]||(Tr["firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead."]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn("firebase.User.prototype.getToken is deprecated. Please use firebase.User.prototype.getIdToken instead.")),this.F(e)},e.tc=function(e){if(!(e=e.users)||!e.length)throw new jr("internal-error");Mu(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?L(e,function(e){return new function(e,t,n,r,o,i){Pr(this,{uid:e,displayName:r||null,photoURL:o||null,email:n||null,phoneNumber:i||null,providerId:t})}(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)}):[]}(e),n=0;n<t.length;n++)Vu(this,t[n]);Bu(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length))},e.bb=function(e){var t=this,n=null;return Ju(this,e.f(this.b,this.uid).then(function(e){return qu(t,e),n=Gu(t,e,"reauthenticate"),t.i=null,t.reload()}).then(function(){return n}),!0)},e.uc=function(e){return this.bb(e).then(function(){})},e.$a=function(e){var t=this,n=null;return Ju(this,zu(this,e.providerId).then(function(){return t.F()}).then(function(n){return e.c(t.b,n)}).then(function(e){return n=Gu(t,e,"link"),Qu(t,e)}).then(function(){return n}))},e.kc=function(e){return this.$a(e).then(function(e){return e.user})},e.mc=function(e,t){var n=this;return Ju(this,zu(this,"phone").then(function(){return gu(ku(n),e,t,g(n.$a,n))}))},e.vc=function(e,t){var n=this;return Ju(this,Ce().then(function(){return gu(ku(n),e,t,g(n.bb,n))}),!0)},e.mb=function(e){var t=this;return Ju(this,this.F().then(function(n){return t.b.mb(n,e)}).then(function(e){return qu(t,e),t.reload()}))},e.Mc=function(e){var t=this;return Ju(this,this.F().then(function(n){return e.c(t.b,n)}).then(function(e){return qu(t,e),t.reload()}))},e.nb=function(e){var t=this;return Ju(this,this.F().then(function(n){return t.b.nb(n,e)}).then(function(e){return qu(t,e),t.reload()}))},e.ob=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return ju(this);var t=this;return Ju(this,this.F().then(function(n){return t.b.ob(n,{displayName:e.displayName,photoUrl:e.photoURL})}).then(function(e){return qu(t,e),Bu(t,"displayName",e.displayName||null),Bu(t,"photoURL",e.photoUrl||null),D(t.providerData,function(e){"password"===e.providerId&&(Or(e,"displayName",t.displayName),Or(e,"photoURL",t.photoURL))}),Du(t)}).then(Fu))},e.Lc=function(e){var t=this;return Ju(this,Ku(this).then(function(n){return F(Uu(t),e)?function(e,t,n){return Ka(e,Ea,{idToken:t,deleteProvider:n})}(t.b,n,[e]).then(function(e){var n={};return D(e.providerUserInfo||[],function(e){n[e.providerId]=!0}),D(Uu(t),function(e){n[e]||Wu(t,e)}),n[Mo.PROVIDER_ID]||Or(t,"phoneNumber",null),Du(t)}):Du(t).then(function(){throw new jr("no-such-provider")})}))},e.delete=function(){var e=this;return Ju(this,this.F().then(function(t){return Ka(e.b,wa,{idToken:t})}).then(function(){e.dispatchEvent(new Su("userDeleted"))})).then(function(){for(var t=0;t<e.D.length;t++)e.D[t].cancel("app-deleted");Pu(e,null),Iu(e,null),e.D=[],e.m=!0,Au(e),Or(e,"refreshToken",null),e.a&&e.a.unsubscribe(e)})},e.qb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.Z||null)==t||"reauthViaRedirect"==e&&(this.Z||null)==t)},e.fa=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.wa=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?g(this.vb,this):"reauthViaPopup"==e&&t==(this.g||null)?g(this.wb,this):"linkViaRedirect"==e&&(this.Z||null)==t?g(this.vb,this):"reauthViaRedirect"==e&&(this.Z||null)==t?g(this.wb,this):null},e.nc=function(e){var t=this;return Yu(this,"linkViaPopup",e,function(){return zu(t,e.providerId).then(function(){return Du(t)})},!1)},e.wc=function(e){return Yu(this,"reauthViaPopup",e,function(){return Ce()},!0)},e.oc=function(e){var t=this;return Xu(this,"linkViaRedirect",e,function(){return zu(t,e.providerId)},!1)},e.xc=function(e){return Xu(this,"reauthViaRedirect",e,function(){return Ce()},!0)},e.vb=function(e,t){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return Ju(this,this.F().then(function(r){return da(n.b,{requestUri:e,sessionId:t,idToken:r})}).then(function(e){return r=Gu(n,e,"link"),Qu(n,e)}).then(function(){return r}))},e.wb=function(e,t){var n=this;this.c&&(this.c.cancel(),this.c=null);var r=null;return Ju(this,Ce().then(function(){return mo(va(n.b,{requestUri:e,sessionId:t}),n.uid)}).then(function(e){return r=Gu(n,e,"reauthenticate"),qu(n,e),n.i=null,n.reload()}).then(function(){return r}),!0)},e.fb=function(e){var t=this,n=null;return Ju(this,this.F().then(function(t){return n=t,void 0===e||ie(e)?{}:$r(new Br(e))}).then(function(e){return t.b.fb(n,e)}).then(function(e){if(t.email!=e)return t.reload()}).then(function(){}))},e.toJSON=function(){return this.C()},e.C=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,providerData:[],apiKey:this.G,appName:this.s,authDomain:this.A,stsTokenManager:this.h.C(),redirectEventId:this.Z||null};return this.metadata&&le(e,this.metadata.C()),D(this.providerData,function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))}),e};var ec={name:"redirectUser",B:"session"};function tc(e){return xs(e.b,ec,e.a)}function nc(e){this.a=e,this.b=ks(),this.c=null,this.f=function(e){var t=ic("local"),n=ic("session"),r=ic("none");return function(e,t,n){var r=As(t,n),i=Rs(e,t.B);return e.get(t,n).then(function(a){var s=null;try{s=dr(o.localStorage.getItem(r))}catch(e){}if(s&&!a)return o.localStorage.removeItem(r),e.set(t,s,n);s&&a&&"localStorage"!=i.type&&o.localStorage.removeItem(r)})}(e.b,t,e.a).then(function(){return e.b.get(n,e.a)}).then(function(o){return o?n:e.b.get(r,e.a).then(function(n){return n?r:e.b.get(t,e.a).then(function(n){return n?t:e.b.get(oc,e.a).then(function(e){return e?ic(e):t})})})}).then(function(t){return e.c=t,rc(e,t.B)}).o(function(){e.c||(e.c=t)})}(this),this.b.addListener(ic("local"),this.a,g(this.g,this))}function rc(e,t){var n,r=[];for(n in Ns)Ns[n]!==t&&r.push(xs(e.b,ic(Ns[n]),e.a));return r.push(xs(e.b,oc,e.a)),function(e){return new ye(function(t,n){var r=e.length,o=[];if(r)for(var i=function(e,n){r--,o[e]=n,0==r&&t(o)},a=function(e){n(e)},s=0;s<e.length;s++)Se(e[s],_(i,s),a);else t(o)})}(r)}nc.prototype.g=function(){var e=this,t=ic("local");cc(this,function(){return Ce().then(function(){return e.c&&"local"!=e.c.B?e.b.get(t,e.a):null}).then(function(n){if(n)return rc(e,"local").then(function(){e.c=t})})})};var oc={name:"persistence",B:"session"};function ic(e){return{name:"authUser",B:e}}function ac(e,t){return cc(e,function(){return e.b.set(e.c,t.C(),e.a)})}function sc(e){return cc(e,function(){return xs(e.b,e.c,e.a)})}function uc(e,t){return cc(e,function(){return e.b.get(e.c,e.a).then(function(e){return e&&t&&(e.authDomain=t),Zu(e||{})})})}function cc(e,t){return e.f=e.f.then(t,t),e.f}function lc(e){if(this.l=!1,Or(this,"app",e),!mc(this).options||!mc(this).options.apiKey)throw new jr("invalid-api-key");e=t.SDK_VERSION?or(t.SDK_VERSION):null,this.b=new Qi(mc(this).options&&mc(this).options.apiKey,Ya(Ga),e),this.N=[],this.m=[],this.I=[],this.Ob=t.INTERNAL.createSubscribe(g(this.hc,this)),this.O=void 0,this.Pb=t.INTERNAL.createSubscribe(g(this.ic,this)),vc(this,null),this.h=new nc(mc(this).options.apiKey+":"+mc(this).name),this.G=new function(e){this.a=e,this.b=ks()}(mc(this).options.apiKey+":"+mc(this).name),this.U=wc(this,function(e){var t=mc(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(ec,e.a).then(function(e){return e&&t&&(e.authDomain=t),Zu(e||{})})}(e.G,mc(e).options.authDomain).then(function(t){return(e.A=t)&&(t.da=e.G),tc(e.G)});return wc(e,t)}(e).then(function(){return uc(e.h,t)}).then(function(t){return t?(t.da=e.G,e.A&&(e.A.Z||null)==(t.Z||null)?t:t.reload().then(function(){return ac(e.h,t).then(function(){return t})}).o(function(n){return"auth/network-request-failed"==n.code?t:sc(e.h)})):null}).then(function(t){vc(e,t||null)});return wc(e,n)}(this)),this.i=wc(this,function(e){return e.U.then(function(){return e.ba()}).o(function(){}).then(function(){if(!e.l)return e.ha()}).o(function(){}).then(function(){if(!e.l){e.W=!0;var t=e.h;t.b.addListener(ic("local"),t.a,e.ha)}})}(this)),this.W=!1,this.ha=g(this.Hc,this),this.Ga=g(this.ka,this),this.qa=g(this.Yb,this),this.ra=g(this.fc,this),this.sa=g(this.gc,this),function(e){var t=mc(e).options.authDomain,n=mc(e).options.apiKey;t&&ur()&&(e.Nb=e.U.then(function(){if(!e.l){if(e.a=hu(t,n,mc(e).name),e.a.subscribe(e),gc(e)&&Lu(gc(e)),e.A){Lu(e.A);var r=e.A;r.na(e.aa()),Pu(r,e),Nu(r=e.A,e.D),Iu(r,e),e.A=null}return e.a}}))}(this),this.INTERNAL={},this.INTERNAL.delete=g(this.delete,this),this.INTERNAL.logFramework=g(this.pc,this),this.s=0,kt.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.aa()},set:function(e){this.na(e)},enumerable:!1}),e.V=null}(this),this.D=[]}function hc(e){st.call(this,"languageCodeChanged"),this.h=e}function fc(e){st.call(this,"frameworkChanged"),this.f=e}function pc(e){return e.Nb||Te(new jr("auth-domain-config-required"))}function dc(e,t){var n={};return n.apiKey=mc(e).options.apiKey,n.authDomain=mc(e).options.authDomain,n.appName=mc(e).name,e.U.then(function(){return function(e,t,n,r){var o=new Ou(e,t);return n&&(o.da=n),r&&Nu(o,r),o.reload().then(function(){return o})}(n,t,e.G,e.Ka())}).then(function(t){return gc(e)&&t.uid==gc(e).uid?(Hu(gc(e),t),e.ka(t)):(vc(e,t),Lu(t),e.ka(t))}).then(function(){bc(e)})}function vc(e,t){gc(e)&&(function(e,t){U(e.N,function(e){return e==t})}(gc(e),e.Ga),wt(gc(e),"tokenChanged",e.qa),wt(gc(e),"userDeleted",e.ra),wt(gc(e),"userInvalidated",e.sa),Au(gc(e))),t&&(t.N.push(e.Ga),gt(t,"tokenChanged",e.qa),gt(t,"userDeleted",e.ra),gt(t,"userInvalidated",e.sa),0<e.s&&Ru(t)),Or(e,"currentUser",t),t&&(t.na(e.aa()),Pu(t,e),Nu(t,e.D),Iu(t,e))}function yc(e,t){var n=null,r=null;return wc(e,t.then(function(t){return n=jo(t),r=so(t),dc(e,t)}).then(function(){return Nr({user:gc(e),credential:n,additionalUserInfo:r,operationType:"signIn"})}))}function mc(e){return e.app}function gc(e){return e.currentUser}function _c(e){return gc(e)&&gc(e)._lat||null}function bc(e){if(e.W){for(var t=0;t<e.m.length;t++)e.m[t]&&e.m[t](_c(e));if(e.O!==e.getUid()&&e.I.length)for(e.O=e.getUid(),t=0;t<e.I.length;t++)e.I[t]&&e.I[t](_c(e))}}function wc(e,t){return e.N.push(t),t.ga(function(){j(e.N,t)}),t}function Ec(e,t,n,r,i,a){if(Or(this,"type","recaptcha"),this.b=this.c=null,this.m=!1,this.l=t,this.a=n||{theme:"light",type:"image"},this.g=[],this.a[Sc])throw new jr("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.h="invisible"===this.a[Oc],!o.document)throw new jr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!An(t)||!this.h&&An(t).hasChildNodes())throw new jr("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.u=new Qi(e,a||null,i||null),this.s=r||function(){return null};var s=this;this.i=[];var u=this.a[Cc];this.a[Cc]=function(e){if(Pc(s,e),"function"==typeof u)u(e);else if("string"==typeof u){var t=ar(u,o);"function"==typeof t&&t(e)}};var c=this.a[Tc];this.a[Tc]=function(){if(Pc(s,null),"function"==typeof c)c();else if("string"==typeof c){var e=ar(c,o);"function"==typeof e&&e()}}}nc.prototype.ib=function(e){var t=null,n=this;return function(e){var t=new jr("invalid-persistence-type"),n=new jr("unsupported-persistence-type");e:{for(r in Ns)if(Ns[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(Jn()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;default:if(!sr()&&"none"!==e)throw n}}(e),cc(this,function(){return e!=n.c.B?n.b.get(n.c,n.a).then(function(r){return t=r,rc(n,e)}).then(function(){if(n.c=ic(e),t)return n.b.set(n.c,t,n.a)}):Ce()})},w(lc,kt),w(hc,st),w(fc,st),(e=lc.prototype).ib=function(e){return wc(this,e=this.h.ib(e))},e.na=function(e){this.V===e||this.l||(this.V=e,ta(this.b,this.V),this.dispatchEvent(new hc(this.aa())))},e.aa=function(){return this.V},e.Nc=function(){var e=o.navigator;this.na(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},e.pc=function(e){this.D.push(e),na(this.b,t.SDK_VERSION?or(t.SDK_VERSION,this.D):null),this.dispatchEvent(new fc(this.D))},e.Ka=function(){return W(this.D)},e.toJSON=function(){return{apiKey:mc(this).options.apiKey,authDomain:mc(this).options.authDomain,appName:mc(this).name,currentUser:gc(this)&&gc(this).C()}},e.qb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},e.fa=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},e.wa=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?g(this.Xb,this):null},e.Xb=function(e,t){var n=this;e={requestUri:e,sessionId:t},this.c&&(this.c.cancel(),this.c=null);var r=null,o=null,i=pa(n.b,e).then(function(e){return r=jo(e),o=so(e),e});return wc(this,e=n.U.then(function(){return i}).then(function(e){return dc(n,e)}).then(function(){return Nr({user:gc(n),credential:r,additionalUserInfo:o,operationType:"signIn"})}))},e.Fc=function(e){if(!ur())return Te(new jr("operation-not-supported-in-this-environment"));var n=this,r=ao(e.providerId),o=vr(),i=null;(!hr()||Xn())&&mc(this).options.authDomain&&e.isOAuthProvider&&(i=cs(mc(this).options.authDomain,mc(this).options.apiKey,mc(this).name,"signInViaPopup",e,null,o,t.SDK_VERSION||null));var a=zn(i,r&&r.Aa,r&&r.za);return wc(this,r=pc(this).then(function(t){return uu(t,a,"signInViaPopup",e,o,!!i)}).then(function(){return new ye(function(e,t){n.fa("signInViaPopup",null,new jr("cancelled-popup-request"),n.g),n.f=e,n.v=t,n.g=o,n.c=n.a.Da(n,"signInViaPopup",a,o)})}).then(function(e){return a&&qn(a),e?Nr(e):null}).o(function(e){throw a&&qn(a),e}))},e.Gc=function(e){if(!ur())return Te(new jr("operation-not-supported-in-this-environment"));var t=this;return wc(this,pc(this).then(function(){return cc(e=t.h,function(){return e.b.set(oc,e.c.B,e.a)});var e}).then(function(){return t.a.Ba("signInViaRedirect",e)}))},e.ba=function(){if(!ur())return Te(new jr("operation-not-supported-in-this-environment"));var e=this;return wc(this,pc(this).then(function(){return e.a.ba()}).then(function(e){return e?Nr(e):null}))},e.kb=function(){var e=this;return wc(this,this.i.then(function(){return gc(e)?(vc(e,null),sc(e.h).then(function(){bc(e)})):Ce()}))},e.Hc=function(){var e=this;return uc(this.h,mc(this).options.authDomain).then(function(t){if(!e.l){var n;if(n=gc(e)&&t){n=gc(e).uid;var r=t.uid;n=void 0!==n&&null!==n&&""!==n&&void 0!==r&&null!==r&&""!==r&&n==r}if(n)return Hu(gc(e),t),gc(e).F();(gc(e)||t)&&(vc(e,t),t&&(Lu(t),t.da=e.G),e.a&&e.a.subscribe(e),bc(e))}})},e.ka=function(e){return ac(this.h,e)},e.Yb=function(){bc(this),this.ka(gc(this))},e.fc=function(){this.kb()},e.gc=function(){this.kb()},e.hc=function(e){var t=this;this.addAuthTokenListener(function(){e.next(gc(t))})},e.ic=function(e){var t=this;!function(e,t){e.I.push(t),wc(e,e.i.then(function(){!e.l&&F(e.I,t)&&e.O!==e.getUid()&&(e.O=e.getUid(),t(_c(e)))}))}(this,function(){e.next(gc(t))})},e.rc=function(e,n,r){var o=this;return this.W&&t.Promise.resolve().then(function(){f(e)?e(gc(o)):f(e.next)&&e.next(gc(o))}),this.Ob(e,n,r)},e.qc=function(e,n,r){var o=this;return this.W&&t.Promise.resolve().then(function(){o.O=o.getUid(),f(e)?e(gc(o)):f(e.next)&&e.next(gc(o))}),this.Pb(e,n,r)},e.$b=function(e){var t=this;return wc(this,this.i.then(function(){return gc(t)?gc(t).F(e).then(function(e){return{accessToken:e}}):null}))},e.Bc=function(e){return this.Hb(e).then(function(e){return e.user})},e.Hb=function(e){var t=this;return this.i.then(function(){return yc(t,Ka(t.b,Ua,{token:e}))}).then(function(e){var n=e.user;return Bu(n,"isAnonymous",!1),t.ka(n),e})},e.Ib=function(e,t){var n=this;return this.i.then(function(){return yc(n,Ka(n.b,Va,{email:e,password:t}))})},e.Cc=function(e,t){return this.Ib(e,t).then(function(e){return e.user})},e.Sb=function(e,t){return this.sb(e,t).then(function(e){return e.user})},e.sb=function(e,t){var n=this;return this.i.then(function(){return yc(n,Ka(n.b,_a,{email:e,password:t}))})},e.Ac=function(e){return this.Oa(e).then(function(e){return e.user})},e.Oa=function(e){var t=this;return this.i.then(function(){return yc(t,e.xa(t.b))})},e.jb=function(){return this.Jb().then(function(e){return e.user})},e.Jb=function(){var e=this;return this.i.then(function(){var t=gc(e);return t&&t.isAnonymous?Nr({user:t,credential:null,additionalUserInfo:Nr({providerId:null,isNewUser:!1}),operationType:"signIn"}):yc(e,e.b.jb()).then(function(t){var n=t.user;return Bu(n,"isAnonymous",!0),e.ka(n),t})})},e.getUid=function(){return gc(this)&&gc(this).uid||null},e.Qb=function(e){this.addAuthTokenListener(e),this.s++,0<this.s&&gc(this)&&Ru(gc(this))},e.yc=function(e){var t=this;D(this.m,function(n){n==e&&t.s--}),0>this.s&&(this.s=0),0==this.s&&gc(this)&&Au(gc(this)),this.removeAuthTokenListener(e)},e.addAuthTokenListener=function(e){var t=this;this.m.push(e),wc(this,this.i.then(function(){t.l||F(t.m,e)&&e(_c(t))}))},e.removeAuthTokenListener=function(e){U(this.m,function(t){return t==e})},e.delete=function(){this.l=!0;for(var e=0;e<this.N.length;e++)this.N[e].cancel("app-deleted");return this.N=[],this.h&&(e=this.h).b.removeListener(ic("local"),e.a,this.ha),this.a&&this.a.unsubscribe(this),t.Promise.resolve()},e.Vb=function(e){return wc(this,function(e,t){return Ka(e,ba,{identifier:t,continueUri:cr()?Bn():"http://localhost"}).then(function(e){return e.allProviders||[]})}(this.b,e))},e.Wb=function(e){return wc(this,function(e,t){return Ka(e,ba,{identifier:t,continueUri:cr()?Bn():"http://localhost"}).then(function(e){return e.signinMethods||[]})}(this.b,e))},e.jc=function(e){return!!xo(e)},e.hb=function(e,t){var n=this;return wc(this,Ce().then(function(){var e=new Br(t);if(!e.c)throw new jr("argument-error",Kr+" must be true when sending sign in link to email");return $r(e)}).then(function(t){return n.b.hb(e,t)}).then(function(){}))},e.Oc=function(e){return this.Ia(e).then(function(e){return e.data.email})},e.Wa=function(e,t){return wc(this,this.b.Wa(e,t).then(function(){}))},e.Ia=function(e){return wc(this,this.b.Ia(e).then(function(e){return new function(e){var t={},n=e[Rr],r=e[Ar];if(!(e=e[xr])||e!=kr&&!n)throw Error("Invalid provider user info!");t[Lr]=r||null,t[Dr]=n||null,Or(this,Fr,e),Or(this,Mr,Ir(t))}(e)}))},e.Ua=function(e){return wc(this,this.b.Ua(e).then(function(){}))},e.gb=function(e,t){var n=this;return wc(this,Ce().then(function(){return void 0===t||ie(t)?{}:$r(new Br(t))}).then(function(t){return n.b.gb(e,t)}).then(function(){}))},e.Ec=function(e,t){return wc(this,gu(this,e,t,g(this.Oa,this)))},e.Dc=function(e,t){var n=this;return wc(this,Ce().then(function(){var r=Ao(e,t||Bn());return n.Oa(r)}))};var Cc="callback",Tc="expired-callback",Sc="sitekey",Oc="size";function Pc(e,t){for(var n=0;n<e.i.length;n++)try{e.i[n](t)}catch(e){}}function Nc(e,t){return e.g.push(t),t.ga(function(){j(e.g,t)}),t}function Ic(e){if(e.m)throw new jr("internal-error","RecaptchaVerifier instance has been destroyed.")}(e=Ec.prototype).ya=function(){var e=this;return this.c?this.c:this.c=Nc(this,Ce().then(function(){if(cr()&&!$n())return Qn();throw new jr("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")}).then(function(){return function(e,t){return new ye(function(n,r){if(gr())if(!o.grecaptcha||t!==e.c&&!e.b){o[e.a]=function(){if(o.grecaptcha){e.c=t;var i=o.grecaptcha.render;o.grecaptcha.render=function(t,n){return t=i(t,n),e.b++,t},n()}else r(new jr("internal-error"));delete o[e.a]};var i=_n(kc,{onload:e.a,hl:t||""});Ce(Wi(i)).o(function(){r(new jr("internal-error","Unable to load external reCAPTCHA dependencies!"))})}else n();else r(new jr("network-request-failed"))})}(Ac(),e.s())}).then(function(){return Ka(e.u,ka,{})}).then(function(t){e.a[Sc]=t.recaptchaSiteKey}).o(function(t){throw e.c=null,t}))},e.render=function(){Ic(this);var e=this;return Nc(this,this.ya().then(function(){if(null===e.b){var t=e.l;if(!e.h){var n=An(t);t=Ln("DIV"),n.appendChild(t)}e.b=grecaptcha.render(t,e.a)}return e.b}))},e.verify=function(){Ic(this);var e=this;return Nc(this,this.render().then(function(t){return new ye(function(n){var r=grecaptcha.getResponse(t);if(r)n(r);else{var o=function(t){t&&(function(e,t){U(e.i,function(e){return e==t})}(e,o),n(t))};e.i.push(o),e.h&&grecaptcha.execute(e.b)}})}))},e.reset=function(){Ic(this),null!==this.b&&grecaptcha.reset(this.b)},e.clear=function(){Ic(this),this.m=!0,Ac().b--;for(var e=0;e<this.g.length;e++)this.g[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.h){e=An(this.l);for(var t;t=e.firstChild;)e.removeChild(t)}};var kc=yn("https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}");var Rc=null;function Ac(){return Rc||(Rc=new function(){this.b=o.grecaptcha?1/0:0,this.c=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}),Rc}function xc(e,n,r){try{this.f=r||t.app()}catch(e){throw new jr("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.f.options||!this.f.options.apiKey)throw new jr("invalid-api-key");r=this.f.options.apiKey;var o=this,i=null;try{i=this.f.auth().Ka()}catch(e){}i=t.SDK_VERSION?or(t.SDK_VERSION,i):null,Ec.call(this,r,e,n,function(){try{var e=o.f.auth().aa()}catch(t){e=null}return e},i,Ya(Ga))}function Dc(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var o=0,i=!1,a=0;a<t.length;a++)if(t[a].optional)i=!0;else{if(i)throw new jr("internal-error","Argument validator encountered a required argument after an optional argument.");o++}if(i=t.length,n.length<o||i<n.length)r="Expected "+(o==i?1==o?"1 argument":o+" arguments":o+"-"+i+" arguments")+" but got "+n.length+".";else{for(o=0;o<n.length;o++)if(i=t[o].optional&&void 0===n[o],!t[o].M(n[o])&&!i){if(t=t[o],0>o||o>=Lc.length)throw new jr("internal-error","Argument validator received an unsupported number of arguments.");n=Lc[o],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.K+".";break e}r=null}}if(r)throw new jr("argument-error",e+" failed: "+r)}w(xc,Ec);var Lc="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Mc(e,t){return{name:e||"",K:"a valid string",optional:!!t,M:i}}function Fc(){return{name:"opt_forceRefresh",K:"a boolean",optional:!0,M:a}}function jc(e,t){return{name:e||"",K:"a valid object",optional:!!t,M:p}}function Uc(e,t){return{name:e||"",K:"a function",optional:!!t,M:f}}function Vc(e,t){return{name:e||"",K:"null",optional:!!t,M:c}}function Wc(e){return{name:e?e+"Credential":"credential",K:e?"a valid "+e+" credential":"a valid credential",optional:!1,M:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.xa||!n)}}}function Bc(){return{name:"applicationVerifier",K:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,M:function(e){return!!(e&&i(e.type)&&f(e.verify))}}}function Hc(e,t,n,r){return{name:n||"",K:e.K+" or "+t.K,optional:!!r,M:function(n){return e.M(n)||t.M(n)}}}function Kc(e,t){for(var n in t){var r=t[n].name;e[r]=zc(r,e[n],t[n].j)}}function qc(e,t,n,r){e[t]=zc(t,n,r)}function zc(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return Dc(i,n,e),t.apply(this,e)}if(!n)return t;var o,i=function(e){return(e=e.split("."))[e.length-1]}(e);for(o in t)r[o]=t[o];for(o in t.prototype)r.prototype[o]=t.prototype[o];return r}Kc(lc.prototype,{Ua:{name:"applyActionCode",j:[Mc("code")]},Ia:{name:"checkActionCode",j:[Mc("code")]},Wa:{name:"confirmPasswordReset",j:[Mc("code"),Mc("newPassword")]},Sb:{name:"createUserWithEmailAndPassword",j:[Mc("email"),Mc("password")]},sb:{name:"createUserAndRetrieveDataWithEmailAndPassword",j:[Mc("email"),Mc("password")]},Vb:{name:"fetchProvidersForEmail",j:[Mc("email")]},Wb:{name:"fetchSignInMethodsForEmail",j:[Mc("email")]},ba:{name:"getRedirectResult",j:[]},jc:{name:"isSignInWithEmailLink",j:[Mc("emailLink")]},qc:{name:"onAuthStateChanged",j:[Hc(jc(),Uc(),"nextOrObserver"),Uc("opt_error",!0),Uc("opt_completed",!0)]},rc:{name:"onIdTokenChanged",j:[Hc(jc(),Uc(),"nextOrObserver"),Uc("opt_error",!0),Uc("opt_completed",!0)]},gb:{name:"sendPasswordResetEmail",j:[Mc("email"),Hc(jc("opt_actionCodeSettings",!0),Vc(null,!0),"opt_actionCodeSettings",!0)]},hb:{name:"sendSignInLinkToEmail",j:[Mc("email"),jc("actionCodeSettings")]},ib:{name:"setPersistence",j:[Mc("persistence")]},Oa:{name:"signInAndRetrieveDataWithCredential",j:[Wc()]},jb:{name:"signInAnonymously",j:[]},Jb:{name:"signInAnonymouslyAndRetrieveData",j:[]},Ac:{name:"signInWithCredential",j:[Wc()]},Bc:{name:"signInWithCustomToken",j:[Mc("token")]},Hb:{name:"signInAndRetrieveDataWithCustomToken",j:[Mc("token")]},Cc:{name:"signInWithEmailAndPassword",j:[Mc("email"),Mc("password")]},Dc:{name:"signInWithEmailLink",j:[Mc("email"),Mc("emailLink",!0)]},Ib:{name:"signInAndRetrieveDataWithEmailAndPassword",j:[Mc("email"),Mc("password")]},Ec:{name:"signInWithPhoneNumber",j:[Mc("phoneNumber"),Bc()]},Fc:{name:"signInWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Gc:{name:"signInWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},kb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Mc(null,!0)]},Nc:{name:"useDeviceLanguage",j:[]},Oc:{name:"verifyPasswordResetCode",j:[Mc("code")]}}),function(e,t){for(var n in t){var r=t[n].name;if(r!==n){var o=t[n].Rb;Object.defineProperty(e,r,{get:function(){return this[n]},set:function(e){Dc(r,[o],[e],!0),this[n]=e},enumerable:!0})}}}(lc.prototype,{lc:{name:"languageCode",Rb:Hc(Mc(),Vc(),"languageCode")}}),lc.Persistence=Ns,lc.Persistence.LOCAL="local",lc.Persistence.SESSION="session",lc.Persistence.NONE="none",Kc(Ou.prototype,{delete:{name:"delete",j:[]},F:{name:"getIdToken",j:[Fc()]},getToken:{name:"getToken",j:[Fc()]},$a:{name:"linkAndRetrieveDataWithCredential",j:[Wc()]},kc:{name:"linkWithCredential",j:[Wc()]},mc:{name:"linkWithPhoneNumber",j:[Mc("phoneNumber"),Bc()]},nc:{name:"linkWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},oc:{name:"linkWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},bb:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Wc()]},uc:{name:"reauthenticateWithCredential",j:[Wc()]},vc:{name:"reauthenticateWithPhoneNumber",j:[Mc("phoneNumber"),Bc()]},wc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},xc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",K:"a valid Auth provider",optional:!1,M:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},fb:{name:"sendEmailVerification",j:[Hc(jc("opt_actionCodeSettings",!0),Vc(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Mc(null,!0)]},Lc:{name:"unlink",j:[Mc("provider")]},mb:{name:"updateEmail",j:[Mc("email")]},nb:{name:"updatePassword",j:[Mc("password")]},Mc:{name:"updatePhoneNumber",j:[Wc("phone")]},ob:{name:"updateProfile",j:[jc("profile")]}}),Kc(ye.prototype,{ga:{name:"finally"},o:{name:"catch"},then:{name:"then"}}),Kc(mu.prototype,{confirm:{name:"confirm",j:[Mc("verificationCode")]}}),qc(Ro,"credential",function(e,t){return new ko(e,t)},[Mc("email"),Mc("password")]),Kc(Eo.prototype,{ta:{name:"addScope",j:[Mc("scope")]},Ca:{name:"setCustomParameters",j:[jc("customOAuthParameters")]}}),qc(Eo,"credential",Co,[Hc(Mc(),jc(),"token")]),qc(Ro,"credentialWithLink",Ao,[Mc("email"),Mc("emailLink")]),Kc(To.prototype,{ta:{name:"addScope",j:[Mc("scope")]},Ca:{name:"setCustomParameters",j:[jc("customOAuthParameters")]}}),qc(To,"credential",So,[Hc(Mc(),jc(),"token")]),Kc(Oo.prototype,{ta:{name:"addScope",j:[Mc("scope")]},Ca:{name:"setCustomParameters",j:[jc("customOAuthParameters")]}}),qc(Oo,"credential",Po,[Hc(Mc(),Hc(jc(),Vc()),"idToken"),Hc(Mc(),Vc(),"accessToken",!0)]),Kc(No.prototype,{Ca:{name:"setCustomParameters",j:[jc("customOAuthParameters")]}}),qc(No,"credential",Io,[Hc(Mc(),jc(),"token"),Mc("secret",!0)]),Kc(wo.prototype,{ta:{name:"addScope",j:[Mc("scope")]},credential:{name:"credential",j:[Hc(Mc(),Vc(),"idToken",!0),Hc(Mc(),Vc(),"accessToken",!0)]},Ca:{name:"setCustomParameters",j:[jc("customOAuthParameters")]}}),qc(Mo,"credential",Fo,[Mc("verificationId"),Mc("verificationCode")]),Kc(Mo.prototype,{Sa:{name:"verifyPhoneNumber",j:[Mc("phoneNumber"),Bc()]}}),Kc(jr.prototype,{toJSON:{name:"toJSON",j:[Mc(null,!0)]}}),Kc(qo.prototype,{toJSON:{name:"toJSON",j:[Mc(null,!0)]}}),Kc(Ko.prototype,{toJSON:{name:"toJSON",j:[Mc(null,!0)]}}),Kc(xc.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),function(){if(void 0===t||!t.INTERNAL||!t.INTERNAL.registerService)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={Auth:lc,Error:jr};qc(e,"EmailAuthProvider",Ro,[]),qc(e,"FacebookAuthProvider",Eo,[]),qc(e,"GithubAuthProvider",To,[]),qc(e,"GoogleAuthProvider",Oo,[]),qc(e,"TwitterAuthProvider",No,[]),qc(e,"OAuthProvider",wo,[Mc("providerId")]),qc(e,"PhoneAuthProvider",Mo,[{name:"auth",K:"an instance of Firebase Auth",optional:!0,M:function(e){return!!(e&&e instanceof lc)}}]),qc(e,"RecaptchaVerifier",xc,[Hc(Mc(),{name:"",K:"an HTML element",optional:!1,M:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),jc("recaptchaParameters",!0),{name:"app",K:"an instance of Firebase App",optional:!0,M:function(e){return!!(e&&e instanceof t.app.App)}}]),t.INTERNAL.registerService("auth",function(e,t){return t({INTERNAL:{getUid:g((e=new lc(e)).getUid,e),getToken:g(e.$b,e),addAuthTokenListener:g(e.Qb,e),removeAuthTokenListener:g(e.yc,e)}}),e},e,function(e,t){if("create"===e)try{t.auth()}catch(e){}}),t.INTERNAL.extendNamespace({User:Ou})}()}).call(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(22))},function(e,t,n){n(95)},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){var n=[];function r(t,r){n.push(r),e[t].table=r;var o=e[t].pairId;e[o].table=r}for(var o in e){var i=t[o];i.expert&&r(o,i.table)}var a=1;for(var s in e)if(void 0===e[s].table){for(;n.includes(a);)a++;r(s,a)}}function i(e,t,n,r){var o=r[e],i=r[t];if(o.expert&&i.expert)return-1e3;if(o.expert)return 100;var a=0;return(t===e||i.expert)&&(a+=100),n.includes(t)&&(a-=1e3),void 0!==o.group&&o.group===i.group&&(a-=10),void 0!==i.group&&n.some(function(e){return r[e].group===i.group})&&(a-=1),a}function a(e,t){var n=Number.MAX_VALUE,r=0,o=!0,i=!1,a=void 0;try{for(var u,c=l(t)[Symbol.iterator]();!(o=(u=c.next()).done);o=!0){var h=s(+u.value,e,t);r+=h,h<n&&(n=h)}}catch(e){i=!0,a=e}finally{try{!o&&c.return&&c.return()}finally{if(i)throw a}}return n+r/l(t).length/100/e.length}function s(e,t,n){var r=n[e].initialScore||0,o=[],a=!0,s=!1,u=void 0;try{for(var c,l=t[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var h=c.value;void 0!==h[e]&&(r+=i(e,h[e].pairId,o,n),o.push(h[e].pairId))}}catch(e){s=!0,u=e}finally{try{!a&&l.return&&l.return()}finally{if(s)throw u}}return r}function u(e,t,n,r){var o=Number.NEGATIVE_INFINITY,a=void 0,s=l(n).filter(function(t){return!r.includes(+t)&&t!=e});h(s);var u=!0,c=!1,f=void 0;try{for(var p,d=s[Symbol.iterator]();!(u=(p=d.next()).done);u=!0){var v=p.value,y=i(e,v,t,n);y>o&&(a=v,o=y)}}catch(e){c=!0,f=e}finally{try{!u&&d.return&&d.return()}finally{if(c)throw f}}return{pairId:a,score:o}}function c(e,t){t=t||[];var n={},r=h(l(e)).sort(function(n,r){return s(n,t,e)-s(r,t,e)}),a=[],c=function(r){if(n[r])return"continue";var o=t.filter(function(e){return void 0!==e[r]}).map(function(e){return e[r].pairId}),s=u(r,o,e,a),c=s.pairId||r,l=t.filter(function(e){return void 0!==e[c]}).map(function(e){return e[c].pairId});a.push(c),a.push(r),n[r]={pairId:c,score:s.score},n[c]={pairId:r,score:i(c,r,l,e)}},f=!0,p=!1,d=void 0;try{for(var v,y=r[Symbol.iterator]();!(f=(v=y.next()).done);f=!0)c(v.value)}catch(e){p=!0,d=e}finally{try{!f&&y.return&&y.return()}finally{if(p)throw d}}return o(n,e),n}function l(e){return Object.keys(e).filter(function(t){return e[t].present}).map(function(e){return+e})}function h(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(Math.random()*(t+1)),r=[e[n],e[t]];e[t]=r[0],e[n]=r[1]}return e}Object.defineProperty(t,"__esModule",{value:!0}),t.parseGuests=function(e){function t(e,t){return"present"===t?[!0,"true","TRUE","1"].includes(e)||e.startsWith("да"):e||""}function n(e,n){for(var r={},o=-1,i=0;i<n.length;i++){var a=n[i];"id"===a?o=t(e[i],a):r[a]=t(e[i],a)}return function(e,t,n){t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n;return e}({},o,r)}var r=e.split(/\n\r?/).map(function(e){return e.split("\t")}),o=r.slice(1).map(function(e){return n(e,r[0])}),i={},a=!0,s=!1,u=void 0;try{for(var c,l=o[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){var h=c.value;Object.assign(i,h)}}catch(e){s=!0,u=e}finally{try{!a&&l.return&&l.return()}finally{if(s)throw u}}return i},t.assignTables=o,t.generateExperts=function(e,t){for(var n={},r=0;r<e;r++)n[t++]={present:!0,expert:!0,table:r+1};return n},t.getGuestPairScore=i,t.getSessionScore=a,t.getGuestScore=s,t.getBestPairFor=u,t.generateNextSession=function(e,t){for(var n=c(e,t),o=a([].concat(r(t),[n]),e),i=0;i<20;i++){var s=c(e,t),u=a([].concat(r(t),[s]),e);u>o&&(o=u,n=s)}return n},t.tryGenerateNextSession=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=c(n(2)),o=n(41),i=n(19),a=n(97),s=n(33),u=c(n(47));function c(e){return e&&e.__esModule?e:{default:e}}var l=function(e){var t=e.event_id,n=e.event,o=e.replaceGuests,c=e.replaceSession,l=e.setSessionIndex;if(n){var h=n.currentSessionIndex,f=0;n.sessions&&(f=n.sessions.length);var p=n.guests||{},d=Object.keys(p).filter(function(e){return!p[e].expert&&p[e].present}).length,v=Object.keys(p).filter(function(e){return p[e].expert&&p[e].present}).length;return r.default.createElement("div",null,r.default.createElement("h1",null,"Code Retreat ",t),r.default.createElement("div",null,r.default.createElement(i.Link,{to:"/"}," К списку мероприятий")),r.default.createElement("div",null,r.default.createElement(i.Link,{to:"/event/"+t}," Сессии")),r.default.createElement("div",null,r.default.createElement("a",{href:"https://console.firebase.google.com/project/code-reatreat/database/code-reatreat/data/"+t},"Firebase DB Console")),r.default.createElement("div",null,r.default.createElement("button",{className:"btn",onClick:function(){return e=new u.default.auth.GoogleAuthProvider,void u.default.auth().signInWithPopup(e);var e}},"Sign in")),r.default.createElement("h2",null,"Гости"),r.default.createElement("p",null,"Количество студентов: ",d),r.default.createElement("p",null,"Количество экспертов: ",v),r.default.createElement("p",null,"Укажите количество экспертов, вставьте список участников в формате TSV (Tab separated values) и нажмите «Replace Guests». После этого можно будет генерировать сессии."),r.default.createElement("div",null,"Количество экспертов:"),r.default.createElement("div",null,r.default.createElement("input",{id:"experts-count",type:"text",defaultValue:"10"})),r.default.createElement("div",null,"guests.tsv:"),r.default.createElement("div",null,r.default.createElement("textarea",{id:"guests-tsv",defaultValue:"id\tpresent\tname\tgroup\texpert",cols:"80",rows:"5"})),r.default.createElement("button",{className:"btn btn-danger",onClick:function(){return function(e,t,n){var r=(0,a.parseGuests)(t),o=(0,a.generateExperts)(n,100);e(r=Object.assign(r,o))}(o,document.getElementById("guests-tsv").value,document.getElementById("experts-count").value)}},"Replace Guests"),r.default.createElement("h2",null,"Управление сессиями"),r.default.createElement("p",null,"Текущая сессия:"),r.default.createElement("div",{className:"btn-group-toggle","data-toggle":"buttons"},n.sessions&&n.sessions.map(function(e,t){return r.default.createElement("button",{key:t,className:"btn "+(h==t?"btn-primary active":""),onClick:function(){return l(t)}},t)}),"  ",r.default.createElement("button",{className:"btn btn-primary",onClick:function(){return c(f,(0,a.generateNextSession)(n.guests,n.sessions))}},"Сгенерировать новую сессию")))}return r.default.createElement("div",{className:"loader"},r.default.createElement(s.RiseLoader,null))};t.default=function(e){var t=e.match.params.event_id,n=(0,o.connect)(function(e,n){return{event:t,replaceGuests:function(e){return n(t+"/guests").set(e)},replaceSession:function(e,r){return n(t+"/sessions/"+e).set(r)},setSessionIndex:function(e){return n(t+"/currentSessionIndex").set(e)}}})(l);return r.default.createElement(n,{event_id:t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r},a=n(41),s=n(19),u=n(33);var c=function(e){var t=e.event;return i.default.createElement("div",{className:"session-history"},i.default.createElement("h1",null,"История"),i.default.createElement("table",{className:"table table-striped table-sm"},i.default.createElement("tr",null,i.default.createElement("th",null,"Id"),i.default.createElement("th",null,"Name"),t.sessions.map(function(e,t){return i.default.createElement("th",{key:"session"+t},t+1)})),Object.keys(t.guests).map(function(e){return i.default.createElement("tr",{key:"guest-"+e},i.default.createElement("th",null,e),i.default.createElement("th",null,t.guests[e].name),t.sessions.map(function(n,r){return n[e]?(o=n[e].pairId,a=r,s=t.guests[o].expert?"with-expert":"",t.guests[o].group==t.guests[e].group&&void 0!=t.guests[e].group&&(s+=" same-group"),i.default.createElement("td",{key:"guest-"+e+"-"+a,className:s},o)):i.default.createElement("td",null,"—");var o,a,s}))})))},l=function(e){var t,n=e.event,r=[];n.sessions&&n.sessions.length>n.currentSessionIndex&&function(){var e=n.sessions.slice(0,n.currentSessionIndex+1),o=n.guests,a=n.sessions[n.currentSessionIndex],s=function(n){if(o[n].expert)return"continue";var s=a[n].pairId,u=o[s],c=a[n].score,l="пара: "+(u.expert?"Эксперт "+s:s)+" score: "+c;t="guest-info",u.expert&&(t+=" with-expert"),s==n&&(t+=" nopair"),e.some(function(e){return o[e[n].pairId].expert})&&(t+=" lucky"),r.push(i.default.createElement("div",{key:n,className:t,title:l},"№",n," → стол ",a[n].table))},u=!0,c=!1,l=void 0;try{for(var h,f=Object.keys(a)[Symbol.iterator]();!(u=(h=f.next()).done);u=!0)s(h.value)}catch(e){c=!0,l=e}finally{try{!u&&f.return&&f.return()}finally{if(c)throw l}}}();return console.log(r),i.default.createElement("div",null,i.default.createElement("h1",null,"Сессия № ",n.currentSessionIndex+1," ",i.default.createElement(s.Link,{to:"/",className:"hidden-link"}," назад ")),n.feedbackUrl&&i.default.createElement("h3",null,"Заполни анкету ",i.default.createElement("a",{href:n.feedbackUrl},n.feedbackUrl)),i.default.createElement("div",{className:"guests-distribution"},r),i.default.createElement("div",{className:"clearfix"}),i.default.createElement(c,{event:n}))},h=function(e){var t=e.event;return t?i.default.createElement(l,{event:t}):i.default.createElement("div",{className:"loader"},i.default.createElement(u.RiseLoader,null))};t.default=function(e){var t=e.match.params.event_id,n=(0,a.connect)({event:t})(h);return i.default.createElement(n,{event_id:t})}},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:scale(1)}50%{transform:scale(0.5);opacity:0.7}100%{transform:scale(1);opacity:1}"),h=function(e){return Math.random()*e},f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,";height:",o.props.size,";margin:",o.props.margin,";border-radius:100%;animation-fill-mode:'both';animation:",l," ",e/100+.6,"s ",e/100-.2,"s infinite ease;}")},o.wrapper=function(){return(0,r.css)("{width:",3*parseFloat(o.props.size)+6*parseFloat(o.props.margin),"px;font-size:0;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))}),i.default.createElement("div",{className:this.style(h(100))})):null}}]),t}(i.default.Component);f.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:scaley(1.0)}50%{transform:scaley(0.4)}100%{transform:scaley(1.0)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.width,"px;height:",o.props.height,"px;margin:",o.props.margin,";border-radius:",o.props.radius,"px;display:inline-block;animation:",l," 1s ",.1*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",null,i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)}),i.default.createElement("div",{className:this.style(4)}),i.default.createElement("div",{className:this.style(5)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,height:a.default.number,width:a.default.number,margin:a.default.string,radius:a.default.number},h.defaultProps={loading:!0,color:"#000000",height:35,width:4,margin:"2px",radius:2};var f=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{opacity:0.8;position:absolute;top:0;left:",e%2?-28:25,"px;}")},o.ball=function(){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("composes:",o.ball(),";display:inline-block;position:relative;animation-fill-mode:both;animation:",l," 1s 0s infinite cubic-bezier(.7,-.13,.22,.86);")},o.long=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(1),";")},o.short=function(){return(0,r.css)("composes:",o.ball(),";composes:",o.style(2),";")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.long()}),i.default.createElement("div",{className:this.short()})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},h.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:scale(1.1)}25%{translateY(-",30,"px)}50%{transform:scale(0.4)}75%{transform:translateY(",30,"px)}100%{transform:translateY(0) scale(1.0)}"),h=(0,r.keyframes)("0%{transform:scale(0.4)}25%{translateY(",30,"px)}50%{transform:scale(1.1)}75%{transform:translateY(",-30,"px)}100%{transform:translateY(0) scale(0.75)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",e%2==0?l:h," 1s 0s infinite cubic-bezier(.15,.46,.9,.6);animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",null,i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)}),i.default.createElement("div",{className:this.style(4)}),i.default.createElement("div",{className:this.style(5)})):null}}]),t}(i.default.Component);f.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},f.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(180deg) rotateY(360deg) rotateZ(360deg)}"),h=(0,r.keyframes)("0%{transform:rotateX(0deg) rotateY(0deg) rotateZ(0deg)}100%{transform:rotateX(360deg) rotateY(180deg) rotateZ(360deg)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:0;left:0;width:",o.props.size,"px;height:",o.props.size,"px;border:",o.props.size/10,"px solid ",o.props.color,";opacity:0.4;border-radius:100%;animation-fill-mode:forwards;perspective:800px;animation:",1===e?l:h," 2s 0s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{width:",o.props.size,"px;height:",o.props.size,"px;position:relative;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);f.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:scale(1);opacity:1}45%{transform:scale(0.1);opacity:0.7}80%{transform:scale(1);opacity:1}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",l," 0.75s ",.12*e,"s infinite cubic-bezier(.2,.68,.18,1.08);animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",null,i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},h.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=[1,3,5],h=[(0,r.keyframes)("25%{transform:translateX(-",l[0],"rem) scale(0.75)}50%{transform:translateX(-",l[1],"rem) scale(0.6)}75%{transform:translateX(-",l[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",l[0],"rem) scale(0.75)}50%{transform:translateX(-",l[1],"rem) scale(0.6)}75%{transform:translateX(-",l[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(-",l[0],"rem) scale(0.75)}75%{transform:translateX(-",l[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",l[0],"rem) scale(0.75)}75%{transform:translateX(",l[0],"rem) scale(0.75)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",l[0],"rem) scale(0.75)}50%{transform:translateX(",l[1],"rem) scale(0.6)}75%{transform:translateX(",l[1],"rem) scale(0.6)}95%{transform:translateX(0rem) scale(1)}"),(0,r.keyframes)("25%{transform:translateX(",l[0],"rem) scale(0.75)}50%{transform:translateX(",l[1],"rem) scale(0.6)}75%{transform:translateX(",l[2],"rem) scale(0.5)}95%{transform:translateX(0rem) scale(1)}")],f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;font-size:",o.props.size/3,"px;width:",o.props.size,"px;height:",o.props.size,"px;background:",o.props.color,";border-radius:50%;animation:",h[e]," 1.5s  infinite;animation-fill-mode:forwards;}")},o.wrapper=function(){return(0,r.css)("{position:relative;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(0)}),i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)}),i.default.createElement("div",{className:this.style(4)}),i.default.createElement("div",{className:this.style(5)})):null}}]),t}(i.default.Component);f.propTypes={loading:a.default.bool,size:a.default.number,color:a.default.string},f.defaultProps={loading:!0,size:15,color:"#000000"};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=[(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(-44deg)}"),(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(44deg)}")],h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.ball=function(){return(0,r.keyframes)("75%{opacity:0.7}100%{transform:translate(",-4*o.props.size,"px,",-o.props.size/4,"px)}")},o.ballStyle=function(e){return(0,r.css)("{width:10px;height:10px;background-color:",o.props.color,";margin:",o.props.margin,";border-radius:100%;transform:translate(0,",-o.props.size/4,"px);position:absolute;top:25px;left:100px;animation:",o.ball()," 1s ",.25*e,"s infinite linear;animation-fill-mode:both;}")},o.s1=function(){return o.props.size+"px solid transparent"},o.s2=function(){return o.props.size+"px solid "+o.props.color},o.pacmanStyle=function(e){return(0,r.css)("{width:0;height:0;border-right:",o.s1(),";border-top:",0===e?o.s1():o.s2(),";border-left:",o.s2(),";border-bottom:",0===e?o.s2():o.s1(),";border-radius:",o.props.size,"px;position:absolute;animation:",l[e]," 0.8s infinite ease-in-out;animation-fill-mode:both;}")},o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;height:",o.props.size,"px;width:",o.props.size,"px;}")},o.pac=function(){return o.pacmanStyle(0)},o.man=function(){return(0,r.css)("composes:",o.pacmanStyle(1),";position:absolute;")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.pac()}),i.default.createElement("div",{className:this.man()}),i.default.createElement("div",{className:this.ballStyle(2)}),i.default.createElement("div",{className:this.ballStyle(3)}),i.default.createElement("div",{className:this.ballStyle(4)}),i.default.createElement("div",{className:this.ballStyle(5)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},h.defaultProps={loading:!0,color:"#000000",size:25,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("100%{transform:rotate(360deg)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.moonSize=function(){return o.props.size/7},o.ballStyle=function(e){return(0,r.css)("{width:",e,"px;height:",e,"px;border-radius:100%;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size+2*o.moonSize(),"px;height:",o.props.size+2*o.moonSize(),"px;animation:",l," 0.6s 0s infinite linear;animation-fill-mode:forwards;}")},o.ball=function(){return(0,r.css)("composes:",o.ballStyle(o.moonSize()),";background-color:",o.props.color,";opacity:0.8;position:absolute;top:",o.props.size/2-o.moonSize()/2,"px;animation:",l," 0.6s 0s infinite linear;animation-fill-mode:forwards;")},o.circle=function(){return(0,r.css)("composes:",o.ballStyle(o.props.size),";border:",o.moonSize(),"px solid ",o.props.color,";opacity:0.1;")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.ball()}),i.default.createElement("div",{className:this.circle()})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},h.defaultProps={loading:!0,color:"#000000",size:60};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9),n(48)],void 0===(i="function"==typeof(r=function(e,t,n,r,o,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var a=u(t),s=u(n);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,s=Array(a),u=0;u<a;u++)s[u]=arguments[u];return o=l(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.thickness=function(){return o.props.size/5},o.lat=function(){return(o.props.size-o.thickness())/2},o.offset=function(){return o.lat()-o.thickness()},o.color=function(){return(0,i.calculateRgba)(o.props.color,.75)},o.before=function(){return(0,r.keyframes)("0%{width:",o.thickness(),"px;box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}35%{width:",o.props.size,"px;box-shadow:0 ",-o.offset(),"px ",o.color(),",0 ",o.offset(),"px ",o.color(),"}70%{width:",o.thickness(),"px;box-shadow:",-o.lat(),"px ",-o.offset(),"px ",o.color(),",",o.lat(),"px ",o.offset(),"px ",o.color(),"}100%{box-shadow:",o.lat(),"px ",-o.offset(),"px ",o.color(),",",-o.lat(),"px ",o.offset(),"px ",o.color(),"}")},o.after=function(){return(0,r.keyframes)("0%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}35%{height:",o.props.size,"px;box-shadow:",o.offset(),"px 0 ",o.color(),",",-o.offset(),"px 0 ",o.color(),"}70%{height:",o.thickness(),"px;box-shadow:",o.offset(),"px ",-o.lat(),"px ",o.color(),",",-o.offset(),"px ",o.lat(),"px ",o.color(),"}100%{box-shadow:",o.offset(),"px ",o.lat(),"px ",o.color(),",",-o.offset(),"px ",-o.lat(),"px ",o.color(),"}")},o.style=function(e){return(0,r.css)("{position:absolute;content:'';top:50%;left:50%;display:block;width:",o.props.size/5,"px;height:",o.props.size/5,"px;border-radius:",o.props.size/10,"px;transform:translate(-50%,-50%);animation-fill-mode:none;animation:",1===e?o.before():o.after()," 2s infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;transform:rotate(165deg);}")},l(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),c(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);h.propTypes={loading:s.default.bool,size:s.default.number,color:s.default.string},h.defaultProps={loading:!0,size:50,color:"#000000"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("33%{transform:translateY(10px)}66%{transform:translateY(-10px)}100%{transform:translateY(0)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;display:inline-block;animation:",l," 0.6s ",.07*e,"s infinite ease-in-out;animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",null,i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},h.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("50%{opacity:0.3}100%{opacity:1}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;width:",o.props.width,"px;margin:",o.props.margin,";background-color:",o.props.color,";border-radius:",o.props.radius,";transition:2s;animation-fill-mode:'both';animation:",l," 1.2s ",.12*e,"s infinite ease-in-out;}")},o.radius=20,o.quarter=o.radius/2+o.radius/5.5,o.wrapper=function(){return(0,r.css)("{position:relative;font-size:0;top:",o.radius,"px;left:",o.radius,"px;width:",3*o.radius,"px;height:",3*o.radius,"px;}")},o.a=function(){return(0,r.css)("composes:",o.style(1),";top:",o.radius,";left:0;")},o.b=function(){return(0,r.css)("composes:",o.style(2),";top:",o.quarter,";left:",o.quarter,";transform:rotate(-45deg);")},o.c=function(){return(0,r.css)("composes:",o.style(3),";top:0;left:",o.radius,";transform:rotate(90deg);")},o.d=function(){return(0,r.css)("composes:",o.style(4),";top:",-o.quarter,";left:",o.quarter,";transform:rotate(45deg);")},o.e=function(){return(0,r.css)("composes:",o.style(5),";top:",-o.radius,";left:0;")},o.f=function(){return(0,r.css)("composes:",o.style(6),";top:",-o.quarter,";left:",-o.quarter,";transform:rotate(-45deg);")},o.g=function(){return(0,r.css)("composes:",o.style(7),";top:0;left:",-o.radius,";transform:rotate(90deg);")},o.h=function(){return(0,r.css)("composes:",o.style(8),";top:",o.quarter,";left:",-o.quarter,";transform:rotate(45deg);")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.a()}),i.default.createElement("div",{className:this.b()}),i.default.createElement("div",{className:this.c()}),i.default.createElement("div",{className:this.d()}),i.default.createElement("div",{className:this.e()}),i.default.createElement("div",{className:this.f()}),i.default.createElement("div",{className:this.g()}),i.default.createElement("div",{className:this.h()})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,height:a.default.number,width:a.default.number,margin:a.default.string,radius:a.default.number},h.defaultProps={loading:!0,color:"#000000",height:15,width:5,margin:"2px",radius:2};var f=(0,o.onlyUpdateForKeys)(["loading","color","height","width","margin","radius"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("100%{transform:rotate(360deg)}"),h=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),f=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;top:",e%2?"0":"auto",";bottom:",e%2?"auto":"0",";height:",o.props.size/2,"px;width:",o.props.size/2,"px;background-color:",o.props.color,";border-radius:100%;animation-fill-mode:forwards;animation:",h," 2s ",2===e?"-1s":"0s"," infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;animation-fill-mode:forwards;animation:",l," 2s 0s infinite linear;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);f.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},f.defaultProps={loading:!0,color:"#000000",size:60};var p=(0,o.onlyUpdateForKeys)(["loading","color","size"])(f);p.defaultProps=f.defaultProps,e.default=p})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:translate(0,-1em) rotate(-45deg)}5%{transform:translate(0,-1em) rotate(-50deg)}20%{transform:translate(1em,-2em) rotate(47deg)}25%{transform:translate(1em,-2em) rotate(45deg)}30%{transform:translate(1em,-2em) rotate(40deg)}45%{transform:translate(2em,-3em) rotate(137deg)}50%{transform:translate(2em,-3em) rotate(135deg)}55%{transform:translate(2em,-3em) rotate(130deg)}70%{transform:translate(3em,-4em) rotate(217deg)}75%{transform:translate(3em,-4em) rotate(220deg)}100%{transform:translate(0,-1em) rotate(-225deg)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(){return(0,r.css)("{position:absolute;left:0;bottom:-0.1em;height:1em;width:1em;background-color:transparent;border-radius:15%;border:0.25em solid ",o.props.color,";transform:translate(0,-1em) rotate(-45deg);animation-fill-mode:both;animation:",l," 2.5s infinite cubic-bezier(.79,0,.47,.97);}")},o.wrapper=function(){return(0,r.css)("{position:absolute;top:50%;left:50%;margin-top:-2.7em;margin-left:-2.7em;width:5.4em;height:5.4em;font-size:",o.props.size,";}")},o.hill=function(){return(0,r.css)("{position:absolute;width:7.1em;height:7.1em;top:1.7em;left:1.7em;border-left:0.25em solid ",o.props.color,";transform:rotate(45deg);}")},o.container=(0,r.css)("{position:relative;width:7.1em;height:7.1em;}"),c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.container},i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style()}),i.default.createElement("div",{className:this.hill()}))):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},h.defaultProps={loading:!0,color:"#000000",size:15};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:rotate(0deg) scale(1)}50%{transform:rotate(180deg) scale(0.8)}100%{transform:rotate(360deg) scale(1)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(){return(0,r.css)("{background:transparent !important;width:",o.props.size,"px;height:",o.props.size,"px;border-radius:100%;border:2px solid;border-color:",o.props.color,";border-bottom-color:transparent;display:inline-block;animation:",l," 0.75s 0s infinite linear;animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.style()}):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},h.defaultProps={loading:!0,color:"#000000",size:35};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%{transform:rotate(0deg)}50%{transform:rotate(180deg)}100%{transform:rotate(360deg)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size*(1-e/10),"px;width:",o.props.size*(1-e/10),"px;border:1px solid ",o.props.color,";border-radius:100%;transition:2s;border-bottom:none;border-right:none;top:",.7*e*2.5,"%;left:",.35*e*2.5,"%;animation-fill-mode:'';animation:",l," 1s ",.2*e,"s infinite linear;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(0)}),i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)}),i.default.createElement("div",{className:this.style(4)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},h.defaultProps={loading:!0,color:"#000000",size:50};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("0%,100%{transform:scale(0)}50%{transform:scale(1.0)}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.size,"px;width:",o.props.size,"px;background-color:",o.props.color,";border-radius:100%;opacity:0.6;top:0;left:0;animation-fill-mode:both;animation:",l," 2.1s ",1===e?"1s":"0s"," infinite ease-in-out;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.size,"px;height:",o.props.size,"px;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",{className:this.wrapper()},i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number},h.defaultProps={loading:!0,color:"#000000",size:60};var f=(0,o.onlyUpdateForKeys)(["loading","color","size"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9)],void 0===(i="function"==typeof(r=function(e,t,n,r,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=s(t),a=s(n);function s(e){return e&&e.__esModule?e:{default:e}}var u=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=(0,r.keyframes)("50%{transform:scale(0.75);opacity:0.2}100%{transform:scale(1);opacity:1}"),h=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var i=arguments.length,a=Array(i),s=0;s<i;s++)a[s]=arguments[s];return o=c(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n=o,o.style=function(e){return(0,r.css)("{display:inline-block;background-color:",o.props.color,";width:",o.props.size,"px;height:",o.props.size,"px;margin:",o.props.margin,";border-radius:100%;animation:",l," 0.7s ",e%2?"0s":"0.35s"," infinite linear;animation-fill-mode:both;}")},c(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),u(t,[{key:"render",value:function(){return this.props.loading?i.default.createElement("div",null,i.default.createElement("div",{className:this.style(1)}),i.default.createElement("div",{className:this.style(2)}),i.default.createElement("div",{className:this.style(3)})):null}}]),t}(i.default.Component);h.propTypes={loading:a.default.bool,color:a.default.string,size:a.default.number,margin:a.default.string},h.defaultProps={loading:!0,color:"#000000",size:15,margin:"2px"};var f=(0,o.onlyUpdateForKeys)(["loading","color","size","margin"])(h);f.defaultProps=h.defaultProps,e.default=f})?r.apply(t,o):r)||(e.exports=i)},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r,o,i;o=[t,n(2),n(0),n(8),n(9),n(48)],void 0===(i="function"==typeof(r=function(e,t,n,r,o,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Loader=void 0;var a=u(t),s=u(n);function u(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function l(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var h=(0,r.keyframes)("0%{left:-35%;right:100%}60%{left:100%;right:-90%}100%{left:100%;right:-90%}"),f=(0,r.keyframes)("0%{left:-200%;right:100%}60%{left:107%;right:-8%}100%{left:107%;right:-8%}"),p=e.Loader=function(e){function t(){var e,n,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var a=arguments.length,s=Array(a),u=0;u<a;u++)s[u]=arguments[u];return o=l(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(s))),n=o,o.style=function(e){return(0,r.css)("{position:absolute;height:",o.props.height,"px;overflow:hidden;background-color:",o.props.color,";background-clip:padding-box;display:block;border-radius:2px;will-change:left,right;animation-fill-mode:forwards;animation:",1===e?h:f," 2.1s ",2===e?"1.15s":""," ",1===e?"cubic-bezier(0.65, 0.815, 0.735, 0.395)":"cubic-bezier(0.165, 0.84, 0.44, 1)"," infinite;}")},o.wrapper=function(){return(0,r.css)("{position:relative;width:",o.props.width,"px;height:",o.props.height,"px;overflow:hidden;background-color:",(0,i.calculateRgba)(o.props.color,.2),";background-clip:padding-box;}")},l(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),c(t,[{key:"render",value:function(){return this.props.loading?a.default.createElement("div",{className:this.wrapper()},a.default.createElement("div",{className:this.style(1)}),a.default.createElement("div",{className:this.style(2)})):null}}]),t}(a.default.Component);p.propTypes={loading:s.default.bool,color:s.default.string,width:s.default.number,height:s.default.number},p.defaultProps={loading:!0,color:"#000000",width:100,height:4};var d=(0,o.onlyUpdateForKeys)(["loading","color","width","height"])(p);d.defaultProps=p.defaultProps,e.default=d})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){var r,o,i;o=[e,n(119),n(117),n(116),n(115),n(114),n(113),n(112),n(111),n(100),n(109),n(108),n(107),n(106),n(105),n(104),n(103),n(102),n(101),n(110)],void 0===(i="function"==typeof(r=function(e,t,n,r,o,i,a,s,u,c,l,h,f,p,d,v,y,m,g,_){"use strict";var b=U(t),w=U(n),E=U(r),C=U(o),T=U(i),S=U(a),O=U(s),P=U(u),N=U(c),I=U(l),k=U(h),R=U(f),A=U(p),x=U(d),D=U(v),L=U(y),M=U(m),F=U(g),j=U(_);function U(e){return e&&e.__esModule?e:{default:e}}e.exports={BarLoader:b.default,BeatLoader:w.default,BounceLoader:E.default,CircleLoader:C.default,ClipLoader:T.default,ClimbingBoxLoader:S.default,DotLoader:O.default,FadeLoader:P.default,GridLoader:N.default,HashLoader:I.default,MoonLoader:k.default,PacmanLoader:R.default,PropagateLoader:A.default,PulseLoader:x.default,RingLoader:D.default,RiseLoader:L.default,RotateLoader:M.default,ScaleLoader:F.default,SyncLoader:j.default}})?r.apply(t,o):r)||(e.exports=i)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.mapValues=function(e,t){var n={};return Object.keys(e).forEach(function(r){return n[r]=t(e[r],r,e)}),n},t.pickBy=function(e,t){var n={};return Object.keys(e).forEach(function(r){var o=e[r];t(o,r)&&(n[r]=o)}),n},t.createQueryRef=function(e,t){return Object.keys(t).reduce(function(e,n){var r=t[n],o=Array.isArray(r)?r:[r];return e[n].apply(e,function(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}(o))},e)},t.getDisplayName=function(e){return e.displayName||e.name||"Component"},t.mapSnapshotToValue=function(e){var t={};return e.forEach(function(e){t[e.key]=e.val()}),t}},function(e,t){e.exports=function(e,t,n,r){var o=n?n.call(r,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||!e||"object"!=typeof t||!t)return!1;var i=Object.keys(e),a=Object.keys(t);if(i.length!==a.length)return!1;for(var s=Object.prototype.hasOwnProperty.bind(t),u=0;u<i.length;u++){var c=i[u];if(!s(c))return!1;var l=e[c],h=t[c];if(!1===(o=n?n.call(r,l,h,c):void 0)||void 0===o&&l!==h)return!1}return!0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(71),o=n(55),i=n(34),a=n(53);t.DataConnection=o.PersistentConnection,o.PersistentConnection.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},o.PersistentConnection.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)},t.RealTimeConnection=a.Connection,t.hijackHash=function(e){var t=o.PersistentConnection.prototype.put;return o.PersistentConnection.prototype.put=function(n,r,o,i){void 0!==i&&(i=e()),t.call(this,n,r,o,i)},function(){o.PersistentConnection.prototype.put=t}},t.ConnectionTarget=r.RepoInfo,t.queryIdentifier=function(e){return e.queryIdentifier()},t.listens=function(e){return e.repo.persistentConnection_.listens_},t.forceRestClient=function(e){i.RepoManager.getInstance().forceRestClient(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(51),o=n(52);t.forceLongPolling=function(){r.WebSocketConnection.forceDisallow(),o.BrowserPollConnection.forceAllow()},t.forceWebSockets=function(){o.BrowserPollConnection.forceDisallow()},t.isWebSocketsAvailable=function(){return r.WebSocketConnection.isAvailable()},t.setSecurityDebugCallback=function(e,t){e.repo.persistentConnection_.securityDebugCallback_=t},t.stats=function(e,t){e.repo.stats(t)},t.statsIncrementCounter=function(e,t){e.repo.statsIncrementCounter(t)},t.dataUpdateCount=function(e){return e.repo.dataUpdateCount},t.interceptServerData=function(e,t){return e.repo.interceptServerData_(t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(6),i=n(1),a=function(){return function(){this.children={},this.childCount=0,this.value=null}}();t.TreeNode=a;var s=function(){function e(e,t,n){void 0===e&&(e=""),void 0===t&&(t=null),void 0===n&&(n=new a),this.name_=e,this.parent_=t,this.node_=n}return e.prototype.subTree=function(t){for(var n,r=t instanceof o.Path?t:new o.Path(t),s=this;null!==(n=r.getFront());){s=new e(n,s,i.safeGet(s.node_.children,n)||new a),r=r.popFront()}return s},e.prototype.getValue=function(){return this.node_.value},e.prototype.setValue=function(e){r.assert(void 0!==e,"Cannot set value to undefined"),this.node_.value=e,this.updateParents_()},e.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},e.prototype.hasChildren=function(){return this.node_.childCount>0},e.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},e.prototype.forEachChild=function(t){var n=this;i.forEach(this.node_.children,function(r,o){t(new e(r,n,o))})},e.prototype.forEachDescendant=function(e,t,n){t&&!n&&e(this),this.forEachChild(function(t){t.forEachDescendant(e,!0,n)}),t&&n&&e(this)},e.prototype.forEachAncestor=function(e,t){for(var n=t?this:this.parent();null!==n;){if(e(n))return!0;n=n.parent()}return!1},e.prototype.forEachImmediateDescendantWithValue=function(e){this.forEachChild(function(t){null!==t.getValue()?e(t):t.forEachImmediateDescendantWithValue(e)})},e.prototype.path=function(){return new o.Path(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},e.prototype.name=function(){return this.name_},e.prototype.parent=function(){return this.parent_},e.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},e.prototype.updateChild_=function(e,t){var n=t.isEmpty(),r=i.contains(this.node_.children,e);n&&r?(delete this.node_.children[e],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[e]=t.node_,this.node_.childCount++,this.updateParents_())},e}();t.Tree=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(1),i=n(39),a=n(38),s=n(6),u=n(125),c=n(10),l=n(4),h=n(62),f=n(16),p=n(1),d=n(20),v=n(11),y=n(24);!function(e){e[e.RUN=0]="RUN",e[e.SENT=1]="SENT",e[e.COMPLETED=2]="COMPLETED",e[e.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",e[e.NEEDS_ABORT=4]="NEEDS_ABORT"}(r=t.TransactionStatus||(t.TransactionStatus={})),y.Repo.MAX_TRANSACTION_RETRIES_=25,y.Repo.prototype.transactions_init_=function(){this.transactionQueueTree_=new u.Tree},y.Repo.prototype.startTransaction=function(e,t,n,s){this.log_("transaction on "+e);var u=function(){},y=new i.Reference(this,e);y.on("value",u);var m={path:e,update:t,onComplete:n,status:null,order:l.LUIDGenerator(),applyLocally:s,retryCount:0,unwatcher:function(){y.off("value",u)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},g=this.getLatestState_(e);m.currentInputSnapshot=g;var _=m.update(g.val());if(void 0===_){if(m.unwatcher(),m.currentOutputSnapshotRaw=null,m.currentOutputSnapshotResolved=null,m.onComplete){var b=new a.DataSnapshot(m.currentInputSnapshot,new i.Reference(this,m.path),c.PRIORITY_INDEX);m.onComplete(null,!1,b)}}else{f.validateFirebaseData("transaction failed: Data returned ",_,m.path),m.status=r.RUN;var w=this.transactionQueueTree_.subTree(e),E=w.getValue()||[];E.push(m),w.setValue(E);var C=void 0;if("object"==typeof _&&null!==_&&p.contains(_,".priority"))C=p.safeGet(_,".priority"),o.assert(f.isValidPriority(C),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else C=(this.serverSyncTree_.calcCompleteEventCache(e)||v.ChildrenNode.EMPTY_NODE).getPriority().val();C=C;var T=this.generateServerValues(),S=d.nodeFromJSON(_,C),O=h.resolveDeferredValueSnapshot(S,T);m.currentOutputSnapshotRaw=S,m.currentOutputSnapshotResolved=O,m.currentWriteId=this.getNextWriteId_();var P=this.serverSyncTree_.applyUserOverwrite(e,O,m.currentWriteId,m.applyLocally);this.eventQueue_.raiseEventsForChangedPath(e,P),this.sendReadyTransactions_()}},y.Repo.prototype.getLatestState_=function(e,t){return this.serverSyncTree_.calcCompleteEventCache(e,t)||v.ChildrenNode.EMPTY_NODE},y.Repo.prototype.sendReadyTransactions_=function(e){var t=this;if(void 0===e&&(e=this.transactionQueueTree_),e||this.pruneCompletedTransactionsBelowNode_(e),null!==e.getValue()){var n=this.buildTransactionQueue_(e);o.assert(n.length>0,"Sending zero length transaction queue"),n.every(function(e){return e.status===r.RUN})&&this.sendTransactionQueue_(e.path(),n)}else e.hasChildren()&&e.forEachChild(function(e){t.sendReadyTransactions_(e)})},y.Repo.prototype.sendTransactionQueue_=function(e,t){for(var n=this,u=t.map(function(e){return e.currentWriteId}),h=this.getLatestState_(e,u),f=h,p=h.hash(),d=0;d<t.length;d++){var v=t[d];o.assert(v.status===r.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),v.status=r.SENT,v.retryCount++;var y=s.Path.relativePath(e,v.path);f=f.updateChild(y,v.currentOutputSnapshotRaw)}var m=f.val(!0),g=e;this.server_.put(g.toString(),m,function(o){n.log_("transaction put response",{path:g.toString(),status:o});var s=[];if("ok"===o){for(var u=[],h=0;h<t.length;h++){if(t[h].status=r.COMPLETED,s=s.concat(n.serverSyncTree_.ackUserWrite(t[h].currentWriteId)),t[h].onComplete){var f=t[h].currentOutputSnapshotResolved,p=new i.Reference(n,t[h].path),d=new a.DataSnapshot(f,p,c.PRIORITY_INDEX);u.push(t[h].onComplete.bind(null,null,!0,d))}t[h].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(e)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(e,s);for(h=0;h<u.length;h++)l.exceptionGuard(u[h])}else{if("datastale"===o)for(h=0;h<t.length;h++)t[h].status===r.SENT_NEEDS_ABORT?t[h].status=r.NEEDS_ABORT:t[h].status=r.RUN;else{l.warn("transaction at "+g.toString()+" failed: "+o);for(h=0;h<t.length;h++)t[h].status=r.NEEDS_ABORT,t[h].abortReason=o}n.rerunTransactions_(e)}},p)},y.Repo.prototype.rerunTransactions_=function(e){var t=this.getAncestorTransactionNode_(e),n=t.path(),r=this.buildTransactionQueue_(t);return this.rerunTransactionQueue_(r,n),n},y.Repo.prototype.rerunTransactionQueue_=function(e,t){if(0!==e.length){for(var n,u=[],v=[],m=e.filter(function(e){return e.status===r.RUN}).map(function(e){return e.currentWriteId}),g=0;g<e.length;g++){var _=e[g],b=s.Path.relativePath(t,_.path),w=!1,E=void 0;if(o.assert(null!==b,"rerunTransactionsUnderNode_: relativePath should not be null."),_.status===r.NEEDS_ABORT)w=!0,E=_.abortReason,v=v.concat(this.serverSyncTree_.ackUserWrite(_.currentWriteId,!0));else if(_.status===r.RUN)if(_.retryCount>=y.Repo.MAX_TRANSACTION_RETRIES_)w=!0,E="maxretry",v=v.concat(this.serverSyncTree_.ackUserWrite(_.currentWriteId,!0));else{var C=this.getLatestState_(_.path,m);_.currentInputSnapshot=C;var T=e[g].update(C.val());if(void 0!==T){f.validateFirebaseData("transaction failed: Data returned ",T,_.path);var S=d.nodeFromJSON(T);"object"==typeof T&&null!=T&&p.contains(T,".priority")||(S=S.updatePriority(C.getPriority()));var O=_.currentWriteId,P=this.generateServerValues(),N=h.resolveDeferredValueSnapshot(S,P);_.currentOutputSnapshotRaw=S,_.currentOutputSnapshotResolved=N,_.currentWriteId=this.getNextWriteId_(),m.splice(m.indexOf(O),1),v=(v=v.concat(this.serverSyncTree_.applyUserOverwrite(_.path,N,_.currentWriteId,_.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(O,!0))}else w=!0,E="nodata",v=v.concat(this.serverSyncTree_.ackUserWrite(_.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(t,v),v=[],w&&(e[g].status=r.COMPLETED,n=e[g].unwatcher,setTimeout(n,Math.floor(0)),e[g].onComplete))if("nodata"===E){var I=new i.Reference(this,e[g].path),k=e[g].currentInputSnapshot,R=new a.DataSnapshot(k,I,c.PRIORITY_INDEX);u.push(e[g].onComplete.bind(null,null,!1,R))}else u.push(e[g].onComplete.bind(null,new Error(E),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(g=0;g<u.length;g++)l.exceptionGuard(u[g]);this.sendReadyTransactions_()}},y.Repo.prototype.getAncestorTransactionNode_=function(e){for(var t,n=this.transactionQueueTree_;null!==(t=e.getFront())&&null===n.getValue();)n=n.subTree(t),e=e.popFront();return n},y.Repo.prototype.buildTransactionQueue_=function(e){var t=[];return this.aggregateTransactionQueuesForNode_(e,t),t.sort(function(e,t){return e.order-t.order}),t},y.Repo.prototype.aggregateTransactionQueuesForNode_=function(e,t){var n=this,r=e.getValue();if(null!==r)for(var o=0;o<r.length;o++)t.push(r[o]);e.forEachChild(function(e){n.aggregateTransactionQueuesForNode_(e,t)})},y.Repo.prototype.pruneCompletedTransactionsBelowNode_=function(e){var t=this,n=e.getValue();if(n){for(var o=0,i=0;i<n.length;i++)n[i].status!==r.COMPLETED&&(n[o]=n[i],o++);n.length=o,e.setValue(n.length>0?n:null)}e.forEachChild(function(e){t.pruneCompletedTransactionsBelowNode_(e)})},y.Repo.prototype.abortTransactions_=function(e){var t=this,n=this.getAncestorTransactionNode_(e).path(),r=this.transactionQueueTree_.subTree(e);return r.forEachAncestor(function(e){t.abortTransactionsOnNode_(e)}),this.abortTransactionsOnNode_(r),r.forEachDescendant(function(e){t.abortTransactionsOnNode_(e)}),n},y.Repo.prototype.abortTransactionsOnNode_=function(e){var t=e.getValue();if(null!==t){for(var n=[],i=[],a=-1,s=0;s<t.length;s++)if(t[s].status===r.SENT_NEEDS_ABORT);else if(t[s].status===r.SENT)o.assert(a===s-1,"All SENT items should be at beginning of queue."),a=s,t[s].status=r.SENT_NEEDS_ABORT,t[s].abortReason="set";else if(o.assert(t[s].status===r.RUN,"Unexpected transaction status in abort"),t[s].unwatcher(),i=i.concat(this.serverSyncTree_.ackUserWrite(t[s].currentWriteId,!0)),t[s].onComplete){n.push(t[s].onComplete.bind(null,new Error("set"),!1,null))}-1===a?e.setValue(null):t.length=a+1,this.eventQueue_.raiseEventsForChangedPath(e.path(),i);for(s=0;s<n.length;s++)l.exceptionGuard(n[s])}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(49),o=n(11),i=n(12),a=n(1),s=n(18),u=function(){function e(e){this.rangedFilter_=new r.RangedFilter(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft()}return e.prototype.updateChild=function(e,t,n,r,a,s){return this.rangedFilter_.matches(new i.NamedNode(t,n))||(n=o.ChildrenNode.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,r,a,s):this.fullLimitUpdateChild_(e,t,n,a,s)},e.prototype.updateFullNode=function(e,t,n){var r;if(t.isLeafNode()||t.isEmpty())r=o.ChildrenNode.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){r=o.ChildrenNode.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var a=0;i.hasNext()&&a<this.limit_;){var s=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),s)<=0:this.index_.compare(s,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(s.name,s.node),a++}}else{r=(r=t.withIndex(this.index_)).updatePriority(o.ChildrenNode.EMPTY_NODE);var u=void 0,c=void 0,l=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),u=this.rangedFilter_.getEndPost(),c=this.rangedFilter_.getStartPost();var h=this.index_.getCompare();l=function(e,t){return h(t,e)}}else i=r.getIterator(this.index_),u=this.rangedFilter_.getStartPost(),c=this.rangedFilter_.getEndPost(),l=this.index_.getCompare();a=0;for(var f=!1;i.hasNext();){s=i.getNext();!f&&l(u,s)<=0&&(f=!0),f&&a<this.limit_&&l(s,c)<=0?a++:r=r.updateImmediateChild(s.name,o.ChildrenNode.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},e.prototype.getIndex=function(){return this.index_},e.prototype.fullLimitUpdateChild_=function(e,t,n,r,u){var c;if(this.reverse_){var l=this.index_.getCompare();c=function(e,t){return l(t,e)}}else c=this.index_.getCompare();var h=e;a.assert(h.numChildren()==this.limit_,"");var f=new i.NamedNode(t,n),p=this.reverse_?h.getFirstChild(this.index_):h.getLastChild(this.index_),d=this.rangedFilter_.matches(f);if(h.hasChild(t)){for(var v=h.getImmediateChild(t),y=r.getChildAfterChild(this.index_,p,this.reverse_);null!=y&&(y.name==t||h.hasChild(y.name));)y=r.getChildAfterChild(this.index_,y,this.reverse_);var m=null==y?1:c(y,f);if(d&&!n.isEmpty()&&m>=0)return null!=u&&u.trackChildChange(s.Change.childChangedChange(t,n,v)),h.updateImmediateChild(t,n);null!=u&&u.trackChildChange(s.Change.childRemovedChange(t,v));var g=h.updateImmediateChild(t,o.ChildrenNode.EMPTY_NODE);return null!=y&&this.rangedFilter_.matches(y)?(null!=u&&u.trackChildChange(s.Change.childAddedChange(y.name,y.node)),g.updateImmediateChild(y.name,y.node)):g}return n.isEmpty()?e:d&&c(p,f)>=0?(null!=u&&(u.trackChildChange(s.Change.childRemovedChange(p.name,p.node)),u.trackChildChange(s.Change.childAddedChange(t,n))),h.updateImmediateChild(t,n).updateImmediateChild(p.name,o.ChildrenNode.EMPTY_NODE)):e},e}();t.LimitedFilter=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(4),i=n(21),a=n(10),s=n(67),u=n(63),c=n(36),l=n(127),h=n(49),f=n(1),p=function(){function e(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=a.PRIORITY_INDEX}return e.prototype.hasStart=function(){return this.startSet_},e.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},e.prototype.getIndexStartValue=function(){return r.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},e.prototype.getIndexStartName=function(){return r.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:o.MIN_NAME},e.prototype.hasEnd=function(){return this.endSet_},e.prototype.getIndexEndValue=function(){return r.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},e.prototype.getIndexEndName=function(){return r.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:o.MAX_NAME},e.prototype.hasLimit=function(){return this.limitSet_},e.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},e.prototype.getLimit=function(){return r.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},e.prototype.getIndex=function(){return this.index_},e.prototype.copy_=function(){var t=new e;return t.limitSet_=this.limitSet_,t.limit_=this.limit_,t.startSet_=this.startSet_,t.indexStartValue_=this.indexStartValue_,t.startNameSet_=this.startNameSet_,t.indexStartName_=this.indexStartName_,t.endSet_=this.endSet_,t.indexEndValue_=this.indexEndValue_,t.endNameSet_=this.endNameSet_,t.indexEndName_=this.indexEndName_,t.index_=this.index_,t.viewFrom_=this.viewFrom_,t},e.prototype.limit=function(e){var t=this.copy_();return t.limitSet_=!0,t.limit_=e,t.viewFrom_="",t},e.prototype.limitToFirst=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},e.prototype.limitToLast=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},e.prototype.startAt=function(e,t){var n=this.copy_();return n.startSet_=!0,void 0===e&&(e=null),n.indexStartValue_=e,null!=t?(n.startNameSet_=!0,n.indexStartName_=t):(n.startNameSet_=!1,n.indexStartName_=""),n},e.prototype.endAt=function(e,t){var n=this.copy_();return n.endSet_=!0,void 0===e&&(e=null),n.indexEndValue_=e,void 0!==t?(n.endNameSet_=!0,n.indexEndName_=t):(n.endNameSet_=!1,n.indexEndName_=""),n},e.prototype.orderBy=function(e){var t=this.copy_();return t.index_=e,t},e.prototype.getQueryObject=function(){var t=e.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[t.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[t.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[t.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[t.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[t.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?t.VIEW_FROM_LEFT:t.VIEW_FROM_RIGHT),n[t.VIEW_FROM]=r}return this.index_!==a.PRIORITY_INDEX&&(n[t.INDEX]=this.index_.toString()),n},e.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},e.prototype.isDefault=function(){return this.loadsAllData()&&this.index_==a.PRIORITY_INDEX},e.prototype.getNodeFilter=function(){return this.loadsAllData()?new c.IndexedFilter(this.getIndex()):this.hasLimit()?new l.LimitedFilter(this):new h.RangedFilter(this)},e.prototype.toRestQueryStringParameters=function(){var t,n=e.REST_QUERY_CONSTANTS_,o={};return this.isDefault()?o:(this.index_===a.PRIORITY_INDEX?t=n.PRIORITY_INDEX:this.index_===s.VALUE_INDEX?t=n.VALUE_INDEX:this.index_===i.KEY_INDEX?t=n.KEY_INDEX:(r.assert(this.index_ instanceof u.PathIndex,"Unrecognized index type!"),t=this.index_.toString()),o[n.ORDER_BY]=f.stringify(t),this.startSet_&&(o[n.START_AT]=f.stringify(this.indexStartValue_),this.startNameSet_&&(o[n.START_AT]+=","+f.stringify(this.indexStartName_))),this.endSet_&&(o[n.END_AT]=f.stringify(this.indexEndValue_),this.endNameSet_&&(o[n.END_AT]+=","+f.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?o[n.LIMIT_TO_FIRST]=this.limit_:o[n.LIMIT_TO_LAST]=this.limit_),o)},e.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},e.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},e.DEFAULT=new e,e}();t.QueryParams=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(1),i=n(4),a=n(1),s=n(1),u=n(1),c=function(e){function t(t,n,r){var o=e.call(this)||this;return o.repoInfo_=t,o.onDataUpdate_=n,o.authTokenProvider_=r,o.log_=i.logWrapper("p:rest:"),o.listens_={},o}return r.__extends(t,e),t.prototype.reportStats=function(e){throw new Error("Method not implemented.")},t.getListenId_=function(e,t){return void 0!==t?"tag$"+t:(o.assert(e.getQueryParams().isDefault(),"should have a tag if it's not a default query."),e.path.toString())},t.prototype.listen=function(e,n,r,o){var i=this,a=e.path.toString();this.log_("Listen called for "+a+" "+e.queryIdentifier());var u=t.getListenId_(e,r),c={};this.listens_[u]=c;var l=e.getQueryParams().toRestQueryStringParameters();this.restRequest_(a+".json",l,function(e,t){var n=t;(404===e&&(n=null,e=null),null===e&&i.onDataUpdate_(a,n,!1,r),s.safeGet(i.listens_,u)===c)&&o(e?401==e?"permission_denied":"rest_error:"+e:"ok",null)})},t.prototype.unlisten=function(e,n){var r=t.getListenId_(e,n);delete this.listens_[r]},t.prototype.refreshAuthToken=function(e){},t.prototype.restRequest_=function(e,t,n){var r=this;void 0===t&&(t={}),t.format="export",this.authTokenProvider_.getToken(!1).then(function(o){var s=o&&o.accessToken;s&&(t.auth=s);var c=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+e+"?"+u.querystring(t);r.log_("Sending REST request for "+c);var l=new XMLHttpRequest;l.onreadystatechange=function(){if(n&&4===l.readyState){r.log_("REST Response for "+c+" received. status:",l.status,"response:",l.responseText);var e=null;if(l.status>=200&&l.status<300){try{e=a.jsonEval(l.responseText)}catch(e){i.warn("Failed to parse JSON response for "+c+": "+l.responseText)}n(null,e)}else 401!==l.status&&404!==l.status&&i.warn("Got unsuccessful REST response for "+c+" Status: "+l.status),n(l.status);n=null}},l.open("GET",c,!0),l.send()})},t}(n(50).ServerActions);t.ReadonlyRestClient=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return e.prototype.closeAfter=function(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},e.prototype.handleResponse=function(e,t){var n=this;this.pendingResponses[e]=t;for(var o=function(){var e=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var t=function(t){e[t]&&r.exceptionGuard(function(){n.onMessage_(e[t])})},o=0;o<e.length;++o)t(o);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===o())break}},e}();t.PacketReceiver=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(52),o=n(51),i=n(4),a=function(){function e(e){this.initTransports_(e)}return Object.defineProperty(e,"ALL_TRANSPORTS",{get:function(){return[r.BrowserPollConnection,o.WebSocketConnection]},enumerable:!0,configurable:!0}),e.prototype.initTransports_=function(t){var n=o.WebSocketConnection&&o.WebSocketConnection.isAvailable(),r=n&&!o.WebSocketConnection.previouslyFailed();if(t.webSocketOnly&&(n||i.warn("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),r=!0),r)this.transports_=[o.WebSocketConnection];else{var a=this.transports_=[];i.each(e.ALL_TRANSPORTS,function(e,t){t&&t.isAvailable()&&a.push(t)})}},e.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},e.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},e}();t.TransportManager=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(1),i=n(54),a=n(1),s=function(e){function t(){var t=e.call(this,["online"])||this;return t.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||a.isMobileCordova()||(window.addEventListener("online",function(){t.online_||(t.online_=!0,t.trigger("online",!0))},!1),window.addEventListener("offline",function(){t.online_&&(t.online_=!1,t.trigger("online",!1))},!1)),t}return r.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return o.assert("online"===e,"Unknown event type: "+e),[this.online_]},t.prototype.currentlyOnline=function(){return this.online_},t}(i.EventEmitter);t.OnlineMonitor=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(54),i=n(1),a=function(e){function t(){var t,n,r=e.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",t="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",t="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,function(){var e=!document[t];e!==r.visible_&&(r.visible_=e,r.trigger("visible",e))},!1),r}return r.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return i.assert("visible"===e,"Unknown event type: "+e),[this.visible_]},t}(o.EventEmitter);t.VisibilityMonitor=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(){this.eventLists_=[],this.recursionDepth_=0}return e.prototype.queueEvents=function(e){for(var t=null,n=0;n<e.length;n++){var r=e[n],o=r.getPath();null===t||o.equals(t.getPath())||(this.eventLists_.push(t),t=null),null===t&&(t=new i(o)),t.add(r)}t&&this.eventLists_.push(t)},e.prototype.raiseEventsAtPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_(function(t){return t.equals(e)})},e.prototype.raiseEventsForChangedPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_(function(t){return t.contains(e)||e.contains(t)})},e.prototype.raiseQueuedEventsMatchingPredicate_=function(e){this.recursionDepth_++;for(var t=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)e(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):t=!1}t&&(this.eventLists_=[]),this.recursionDepth_--},e}();t.EventQueue=o;var i=function(){function e(e){this.path_=e,this.events_=[]}return e.prototype.add=function(e){this.events_.push(e)},e.prototype.raise=function(){for(var e=0;e<this.events_.length;e++){var t=this.events_[e];if(null!==t){this.events_[e]=null;var n=t.getEventRunner();r.logger&&r.log("event: "+t.toString()),r.exceptionGuard(n)}}},e.prototype.getPath=function(){return this.path_},e}();t.EventList=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(4),i=n(56),a=1e4,s=3e4,u=function(){function e(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new i.StatsListener(e);var n=a+(s-a)*Math.random();o.setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(n))}return e.prototype.includeStat=function(e){this.statsToReport_[e]=!0},e.prototype.reportStats_=function(){var e=this,t=this.statsListener_.get(),n={},i=!1;r.forEach(t,function(t,o){o>0&&r.contains(e.statsToReport_,t)&&(n[t]=o,i=!0)}),i&&this.server_.reportStats(n),o.setTimeoutNonBlocking(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},e}();t.StatsReporter=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(1),i=function(){function e(){this.counters_={}}return e.prototype.incrementCounter=function(e,t){void 0===t&&(t=1),o.contains(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t},e.prototype.get=function(){return r.deepCopy(this.counters_)},e}();t.StatsCollection=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e){this.app_=e}return e.prototype.getToken=function(e){return this.app_.INTERNAL.getToken(e).then(null,function(e){return e&&"auth/token-not-initialized"===e.code?(r.log("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e)})},e.prototype.addTokenChangeListener=function(e){this.app_.INTERNAL.addAuthTokenListener(e)},e.prototype.removeTokenChangeListener=function(e){this.app_.INTERNAL.removeAuthTokenListener(e)},e.prototype.notifyForInvalidToken=function(){var e='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',r.warn(e)},e}();t.AuthTokenProvider=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=function(){function e(){this.rootNode_=r.ChildrenNode.EMPTY_NODE}return e.prototype.getNode=function(e){return this.rootNode_.getChild(e)},e.prototype.updateSnapshot=function(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)},e}();t.SnapshotHolder=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(37),o=n(6),i=n(1),a=n(12),s=n(10),u=n(1),c=function(){function e(e){this.writeTree_=e}return e.prototype.addWrite=function(t,n){if(t.isEmpty())return new e(new r.ImmutableTree(n));var i=this.writeTree_.findRootMostValueAndPath(t);if(null!=i){var a=i.path,s=i.value,u=o.Path.relativePath(a,t);return s=s.updateChild(u,n),new e(this.writeTree_.set(a,s))}var c=new r.ImmutableTree(n);return new e(this.writeTree_.setTree(t,c))},e.prototype.addWrites=function(e,t){var n=this;return i.forEach(t,function(t,r){n=n.addWrite(e.child(t),r)}),n},e.prototype.removeWrite=function(t){return t.isEmpty()?e.Empty:new e(this.writeTree_.setTree(t,r.ImmutableTree.Empty))},e.prototype.hasCompleteWrite=function(e){return null!=this.getCompleteNode(e)},e.prototype.getCompleteNode=function(e){var t=this.writeTree_.findRootMostValueAndPath(e);return null!=t?this.writeTree_.get(t.path).getChild(o.Path.relativePath(t.path,e)):null},e.prototype.getCompleteChildren=function(){var e=[],t=this.writeTree_.value;return null!=t?t.isLeafNode()||t.forEachChild(s.PRIORITY_INDEX,function(t,n){e.push(new a.NamedNode(t,n))}):this.writeTree_.children.inorderTraversal(function(t,n){null!=n.value&&e.push(new a.NamedNode(t,n.value))}),e},e.prototype.childCompoundWrite=function(t){if(t.isEmpty())return this;var n=this.getCompleteNode(t);return new e(null!=n?new r.ImmutableTree(n):this.writeTree_.subtree(t))},e.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},e.prototype.apply=function(t){return e.applySubtreeWrite_(o.Path.Empty,this.writeTree_,t)},e.Empty=new e(new r.ImmutableTree(null)),e.applySubtreeWrite_=function(t,n,r){if(null!=n.value)return r.updateChild(t,n.value);var o=null;return n.children.inorderTraversal(function(n,i){".priority"===n?(u.assert(null!==i.value,"Priority writes must always be leaf nodes"),o=i.value):r=e.applySubtreeWrite_(t.child(n),i,r)}),r.getChild(t).isEmpty()||null===o||(r=r.updateChild(t.child(".priority"),o)),r},e}();t.CompoundWrite=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(1),i=n(6),a=n(139),s=n(10),u=n(11),c=function(){function e(){this.visibleWrites_=a.CompoundWrite.Empty,this.allWrites_=[],this.lastWriteId_=-1}return e.prototype.childWrites=function(e){return new l(e,this)},e.prototype.addOverwrite=function(e,t,n,r){o.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:e,snap:t,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(e,t)),this.lastWriteId_=n},e.prototype.addMerge=function(e,t,n){o.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:e,children:t,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(e,t),this.lastWriteId_=n},e.prototype.getWrite=function(e){for(var t=0;t<this.allWrites_.length;t++){var n=this.allWrites_[t];if(n.writeId===e)return n}return null},e.prototype.removeWrite=function(e){var t=this,n=this.allWrites_.findIndex(function(t){return t.writeId===e});o.assert(n>=0,"removeWrite called with nonexistent writeId.");var i=this.allWrites_[n];this.allWrites_.splice(n,1);for(var a=i.visible,s=!1,u=this.allWrites_.length-1;a&&u>=0;){var c=this.allWrites_[u];c.visible&&(u>=n&&this.recordContainsPath_(c,i.path)?a=!1:i.path.contains(c.path)&&(s=!0)),u--}if(a){if(s)return this.resetTree_(),!0;if(i.snap)this.visibleWrites_=this.visibleWrites_.removeWrite(i.path);else{var l=i.children;r.forEach(l,function(e){t.visibleWrites_=t.visibleWrites_.removeWrite(i.path.child(e))})}return!0}return!1},e.prototype.getCompleteWriteData=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcCompleteEventCache=function(t,n,r,o){if(r||o){var a=this.visibleWrites_.childCompoundWrite(t);if(!o&&a.isEmpty())return n;if(o||null!=n||a.hasCompleteWrite(i.Path.Empty)){var s=e.layerTree_(this.allWrites_,function(e){return(e.visible||o)&&(!r||!~r.indexOf(e.writeId))&&(e.path.contains(t)||t.contains(e.path))},t);h=n||u.ChildrenNode.EMPTY_NODE;return s.apply(h)}return null}var c=this.visibleWrites_.getCompleteNode(t);if(null!=c)return c;var l=this.visibleWrites_.childCompoundWrite(t);if(l.isEmpty())return n;if(null!=n||l.hasCompleteWrite(i.Path.Empty)){var h=n||u.ChildrenNode.EMPTY_NODE;return l.apply(h)}return null},e.prototype.calcCompleteEventChildren=function(e,t){var n=u.ChildrenNode.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(e);if(r)return r.isLeafNode()||r.forEachChild(s.PRIORITY_INDEX,function(e,t){n=n.updateImmediateChild(e,t)}),n;if(t){var o=this.visibleWrites_.childCompoundWrite(e);return t.forEachChild(s.PRIORITY_INDEX,function(e,t){var r=o.childCompoundWrite(new i.Path(e)).apply(t);n=n.updateImmediateChild(e,r)}),o.getCompleteChildren().forEach(function(e){n=n.updateImmediateChild(e.name,e.node)}),n}return this.visibleWrites_.childCompoundWrite(e).getCompleteChildren().forEach(function(e){n=n.updateImmediateChild(e.name,e.node)}),n},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n,r){o.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=e.child(t);if(this.visibleWrites_.hasCompleteWrite(i))return null;var a=this.visibleWrites_.childCompoundWrite(i);return a.isEmpty()?r.getChild(t):a.apply(r.getChild(t))},e.prototype.calcCompleteChild=function(e,t,n){var r=e.child(t),o=this.visibleWrites_.getCompleteNode(r);return null!=o?o:n.isCompleteForChild(t)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(t)):null},e.prototype.shadowingWrite=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcIndexedSlice=function(e,t,n,r,o,a){var s,u=this.visibleWrites_.childCompoundWrite(e),c=u.getCompleteNode(i.Path.Empty);if(null!=c)s=c;else{if(null==t)return[];s=u.apply(t)}if((s=s.withIndex(a)).isEmpty()||s.isLeafNode())return[];for(var l=[],h=a.getCompare(),f=o?s.getReverseIteratorFrom(n,a):s.getIteratorFrom(n,a),p=f.getNext();p&&l.length<r;)0!==h(p,n)&&l.push(p),p=f.getNext();return l},e.prototype.recordContainsPath_=function(e,t){return e.snap?e.path.contains(t):!!r.findKey(e.children,function(n,r){return e.path.child(r).contains(t)})},e.prototype.resetTree_=function(){this.visibleWrites_=e.layerTree_(this.allWrites_,e.DefaultFilter_,i.Path.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},e.DefaultFilter_=function(e){return e.visible},e.layerTree_=function(e,t,n){for(var s=a.CompoundWrite.Empty,u=0;u<e.length;++u){var c=e[u];if(t(c)){var l=c.path,h=void 0;if(c.snap)n.contains(l)?(h=i.Path.relativePath(n,l),s=s.addWrite(h,c.snap)):l.contains(n)&&(h=i.Path.relativePath(l,n),s=s.addWrite(i.Path.Empty,c.snap.getChild(h)));else{if(!c.children)throw o.assertionError("WriteRecord should have .snap or .children");if(n.contains(l))h=i.Path.relativePath(n,l),s=s.addWrites(h,c.children);else if(l.contains(n))if((h=i.Path.relativePath(l,n)).isEmpty())s=s.addWrites(i.Path.Empty,c.children);else{var f=r.safeGet(c.children,h.getFront());if(f){var p=f.getChild(h.popFront());s=s.addWrite(i.Path.Empty,p)}}}}}return s},e}();t.WriteTree=c;var l=function(){function e(e,t){this.treePath_=e,this.writeTree_=t}return e.prototype.calcCompleteEventCache=function(e,t,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,e,t,n)},e.prototype.calcCompleteEventChildren=function(e){return this.writeTree_.calcCompleteEventChildren(this.treePath_,e)},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,e,t,n)},e.prototype.shadowingWrite=function(e){return this.writeTree_.shadowingWrite(this.treePath_.child(e))},e.prototype.calcIndexedSlice=function(e,t,n,r,o){return this.writeTree_.calcIndexedSlice(this.treePath_,e,t,n,r,o)},e.prototype.calcCompleteChild=function(e,t){return this.writeTree_.calcCompleteChild(this.treePath_,e,t)},e.prototype.child=function(t){return new e(this.treePath_.child(t),this.writeTree_)},e}();t.WriteTreeRef=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(12),o=n(18),i=n(1),a=function(){function e(e){this.query_=e,this.index_=this.query_.getQueryParams().getIndex()}return e.prototype.generateEventsForChanges=function(e,t,n){var r=this,i=[],a=[];return e.forEach(function(e){e.type===o.Change.CHILD_CHANGED&&r.index_.indexedValueChanged(e.oldSnap,e.snapshotNode)&&a.push(o.Change.childMovedChange(e.childName,e.snapshotNode))}),this.generateEventsForType_(i,o.Change.CHILD_REMOVED,e,n,t),this.generateEventsForType_(i,o.Change.CHILD_ADDED,e,n,t),this.generateEventsForType_(i,o.Change.CHILD_MOVED,a,n,t),this.generateEventsForType_(i,o.Change.CHILD_CHANGED,e,n,t),this.generateEventsForType_(i,o.Change.VALUE,e,n,t),i},e.prototype.generateEventsForType_=function(e,t,n,r,o){var i=this,a=n.filter(function(e){return e.type===t});a.sort(this.compareChanges_.bind(this)),a.forEach(function(t){var n=i.materializeSingleChange_(t,o);r.forEach(function(r){r.respondsTo(t.type)&&e.push(r.createEvent(n,i.query_))})})},e.prototype.materializeSingleChange_=function(e,t){return"value"===e.type||"child_removed"===e.type?e:(e.prevName=t.getPredecessorChildName(e.childName,e.snapshotNode,this.index_),e)},e.prototype.compareChanges_=function(e,t){if(null==e.childName||null==t.childName)throw i.assertionError("Should only compare child_ events.");var n=new r.NamedNode(e.childName,e.snapshotNode),o=new r.NamedNode(t.childName,t.snapshotNode);return this.index_.compare(n,o)},e}();t.EventGenerator=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(23),o=function(){function e(){}return e.prototype.getCompleteChild=function(e){return null},e.prototype.getChildAfterChild=function(e,t,n){return null},e}();t.NoCompleteChildSource_=o,t.NO_COMPLETE_CHILD_SOURCE=new o;var i=function(){function e(e,t,n){void 0===n&&(n=null),this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}return e.prototype.getCompleteChild=function(e){var t=this.viewCache_.getEventCache();if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);var n=null!=this.optCompleteServerCache_?new r.CacheNode(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(e,n)},e.prototype.getChildAfterChild=function(e,t,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),o=this.writes_.calcIndexedSlice(r,t,1,n,e);return 0===o.length?null:o[0]},e}();t.WriteTreeCompleteChildSource=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(18),i=n(1),a=function(){function e(){this.changeMap_={}}return e.prototype.trackChildChange=function(e){var t=e.type,n=e.childName;i.assert(t==o.Change.CHILD_ADDED||t==o.Change.CHILD_CHANGED||t==o.Change.CHILD_REMOVED,"Only child changes supported for tracking"),i.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var a=r.safeGet(this.changeMap_,n);if(a){var s=a.type;if(t==o.Change.CHILD_ADDED&&s==o.Change.CHILD_REMOVED)this.changeMap_[n]=o.Change.childChangedChange(n,e.snapshotNode,a.snapshotNode);else if(t==o.Change.CHILD_REMOVED&&s==o.Change.CHILD_ADDED)delete this.changeMap_[n];else if(t==o.Change.CHILD_REMOVED&&s==o.Change.CHILD_CHANGED)this.changeMap_[n]=o.Change.childRemovedChange(n,a.oldSnap);else if(t==o.Change.CHILD_CHANGED&&s==o.Change.CHILD_ADDED)this.changeMap_[n]=o.Change.childAddedChange(n,e.snapshotNode);else{if(t!=o.Change.CHILD_CHANGED||s!=o.Change.CHILD_CHANGED)throw i.assertionError("Illegal combination of changes: "+e+" occurred after "+a);this.changeMap_[n]=o.Change.childChangedChange(n,e.snapshotNode,a.oldSnap)}}else this.changeMap_[n]=e},e.prototype.getChanges=function(){return r.getValues(this.changeMap_)},e}();t.ChildChangeAccumulator=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=n(1),i=n(143),a=n(18),s=n(11),u=n(21),c=n(37),l=n(6),h=n(142),f=function(){return function(e,t){this.viewCache=e,this.changes=t}}();t.ProcessorResult=f;var p=function(){function e(e){this.filter_=e}return e.prototype.assertIndexed=function(e){o.assert(e.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),o.assert(e.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},e.prototype.applyOperation=function(t,n,a,s){var u,c,l=new i.ChildChangeAccumulator;if(n.type===r.OperationType.OVERWRITE){var h=n;h.source.fromUser?u=this.applyUserOverwrite_(t,h.path,h.snap,a,s,l):(o.assert(h.source.fromServer,"Unknown source."),c=h.source.tagged||t.getServerCache().isFiltered()&&!h.path.isEmpty(),u=this.applyServerOverwrite_(t,h.path,h.snap,a,s,c,l))}else if(n.type===r.OperationType.MERGE){var p=n;p.source.fromUser?u=this.applyUserMerge_(t,p.path,p.children,a,s,l):(o.assert(p.source.fromServer,"Unknown source."),c=p.source.tagged||t.getServerCache().isFiltered(),u=this.applyServerMerge_(t,p.path,p.children,a,s,c,l))}else if(n.type===r.OperationType.ACK_USER_WRITE){var d=n;u=d.revert?this.revertUserWrite_(t,d.path,a,s,l):this.ackUserWrite_(t,d.path,d.affectedTree,a,s,l)}else{if(n.type!==r.OperationType.LISTEN_COMPLETE)throw o.assertionError("Unknown operation type: "+n.type);u=this.listenComplete_(t,n.path,a,l)}var v=l.getChanges();return e.maybeAddValueEvent_(t,u,v),new f(u,v)},e.maybeAddValueEvent_=function(e,t,n){var r=t.getEventCache();if(r.isFullyInitialized()){var o=r.getNode().isLeafNode()||r.getNode().isEmpty(),i=e.getCompleteEventSnap();(n.length>0||!e.getEventCache().isFullyInitialized()||o&&!r.getNode().equals(i)||!r.getNode().getPriority().equals(i.getPriority()))&&n.push(a.Change.valueChange(t.getCompleteEventSnap()))}},e.prototype.generateEventCacheAfterServerEvent_=function(e,t,n,r,i){var a=e.getEventCache();if(null!=n.shadowingWrite(t))return e;var u=void 0,c=void 0;if(t.isEmpty())if(o.assert(e.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),e.getServerCache().isFiltered()){var l=e.getCompleteServerSnap(),h=l instanceof s.ChildrenNode?l:s.ChildrenNode.EMPTY_NODE,f=n.calcCompleteEventChildren(h);u=this.filter_.updateFullNode(e.getEventCache().getNode(),f,i)}else{var p=n.calcCompleteEventCache(e.getCompleteServerSnap());u=this.filter_.updateFullNode(e.getEventCache().getNode(),p,i)}else{var d=t.getFront();if(".priority"==d){o.assert(1==t.getLength(),"Can't have a priority with additional path components");var v=a.getNode();c=e.getServerCache().getNode();var y=n.calcEventCacheAfterServerOverwrite(t,v,c);u=null!=y?this.filter_.updatePriority(v,y):a.getNode()}else{var m=t.popFront(),g=void 0;if(a.isCompleteForChild(d)){c=e.getServerCache().getNode();var _=n.calcEventCacheAfterServerOverwrite(t,a.getNode(),c);g=null!=_?a.getNode().getImmediateChild(d).updateChild(m,_):a.getNode().getImmediateChild(d)}else g=n.calcCompleteChild(d,e.getServerCache());u=null!=g?this.filter_.updateChild(a.getNode(),d,g,m,r,i):a.getNode()}}return e.updateEventSnap(u,a.isFullyInitialized()||t.isEmpty(),this.filter_.filtersNodes())},e.prototype.applyServerOverwrite_=function(e,t,n,r,o,i,a){var s,u=e.getServerCache(),c=i?this.filter_:this.filter_.getIndexedFilter();if(t.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var l=u.getNode().updateChild(t,n);s=c.updateFullNode(u.getNode(),l,null)}else{var f=t.getFront();if(!u.isCompleteForPath(t)&&t.getLength()>1)return e;var p=t.popFront(),d=u.getNode().getImmediateChild(f).updateChild(p,n);s=".priority"==f?c.updatePriority(u.getNode(),d):c.updateChild(u.getNode(),f,d,p,h.NO_COMPLETE_CHILD_SOURCE,null)}var v=e.updateServerSnap(s,u.isFullyInitialized()||t.isEmpty(),c.filtersNodes()),y=new h.WriteTreeCompleteChildSource(r,v,o);return this.generateEventCacheAfterServerEvent_(v,t,r,y,a)},e.prototype.applyUserOverwrite_=function(e,t,n,r,o,i){var a,u,c=e.getEventCache(),l=new h.WriteTreeCompleteChildSource(r,e,o);if(t.isEmpty())u=this.filter_.updateFullNode(e.getEventCache().getNode(),n,i),a=e.updateEventSnap(u,!0,this.filter_.filtersNodes());else{var f=t.getFront();if(".priority"===f)u=this.filter_.updatePriority(e.getEventCache().getNode(),n),a=e.updateEventSnap(u,c.isFullyInitialized(),c.isFiltered());else{var p=t.popFront(),d=c.getNode().getImmediateChild(f),v=void 0;if(p.isEmpty())v=n;else{var y=l.getCompleteChild(f);v=null!=y?".priority"===p.getBack()&&y.getChild(p.parent()).isEmpty()?y:y.updateChild(p,n):s.ChildrenNode.EMPTY_NODE}if(d.equals(v))a=e;else{var m=this.filter_.updateChild(c.getNode(),f,v,p,l,i);a=e.updateEventSnap(m,c.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},e.cacheHasChild_=function(e,t){return e.getEventCache().isCompleteForChild(t)},e.prototype.applyUserMerge_=function(t,n,r,o,i,a){var s=this,u=t;return r.foreach(function(r,c){var l=n.child(r);e.cacheHasChild_(t,l.getFront())&&(u=s.applyUserOverwrite_(u,l,c,o,i,a))}),r.foreach(function(r,c){var l=n.child(r);e.cacheHasChild_(t,l.getFront())||(u=s.applyUserOverwrite_(u,l,c,o,i,a))}),u},e.prototype.applyMerge_=function(e,t){return t.foreach(function(t,n){e=e.updateChild(t,n)}),e},e.prototype.applyServerMerge_=function(e,t,n,r,o,i,a){var s=this;if(e.getServerCache().getNode().isEmpty()&&!e.getServerCache().isFullyInitialized())return e;var u,h=e;u=t.isEmpty()?n:c.ImmutableTree.Empty.setTree(t,n);var f=e.getServerCache().getNode();return u.children.inorderTraversal(function(t,n){if(f.hasChild(t)){var u=e.getServerCache().getNode().getImmediateChild(t),c=s.applyMerge_(u,n);h=s.applyServerOverwrite_(h,new l.Path(t),c,r,o,i,a)}}),u.children.inorderTraversal(function(t,n){var u=!e.getServerCache().isCompleteForChild(t)&&null==n.value;if(!f.hasChild(t)&&!u){var c=e.getServerCache().getNode().getImmediateChild(t),p=s.applyMerge_(c,n);h=s.applyServerOverwrite_(h,new l.Path(t),p,r,o,i,a)}}),h},e.prototype.ackUserWrite_=function(e,t,n,r,o,i){if(null!=r.shadowingWrite(t))return e;var a=e.getServerCache().isFiltered(),s=e.getServerCache();if(null!=n.value){if(t.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(t))return this.applyServerOverwrite_(e,t,s.getNode().getChild(t),r,o,a,i);if(t.isEmpty()){var h=c.ImmutableTree.Empty;return s.getNode().forEachChild(u.KEY_INDEX,function(e,t){h=h.set(new l.Path(e),t)}),this.applyServerMerge_(e,t,h,r,o,a,i)}return e}var f=c.ImmutableTree.Empty;return n.foreach(function(e,n){var r=t.child(e);s.isCompleteForPath(r)&&(f=f.set(e,s.getNode().getChild(r)))}),this.applyServerMerge_(e,t,f,r,o,a,i)},e.prototype.listenComplete_=function(e,t,n,r){var o=e.getServerCache(),i=e.updateServerSnap(o.getNode(),o.isFullyInitialized()||t.isEmpty(),o.isFiltered());return this.generateEventCacheAfterServerEvent_(i,t,n,h.NO_COMPLETE_CHILD_SOURCE,r)},e.prototype.revertUserWrite_=function(e,t,n,r,i){var a;if(null!=n.shadowingWrite(t))return e;var u=new h.WriteTreeCompleteChildSource(n,e,r),c=e.getEventCache().getNode(),f=void 0;if(t.isEmpty()||".priority"===t.getFront()){var p=void 0;if(e.getServerCache().isFullyInitialized())p=n.calcCompleteEventCache(e.getCompleteServerSnap());else{var d=e.getServerCache().getNode();o.assert(d instanceof s.ChildrenNode,"serverChildren would be complete if leaf node"),p=n.calcCompleteEventChildren(d)}p=p,f=this.filter_.updateFullNode(c,p,i)}else{var v=t.getFront(),y=n.calcCompleteChild(v,e.getServerCache());null==y&&e.getServerCache().isCompleteForChild(v)&&(y=c.getImmediateChild(v)),(f=null!=y?this.filter_.updateChild(c,v,y,t.popFront(),u,i):e.getEventCache().getNode().hasChild(v)?this.filter_.updateChild(c,v,s.ChildrenNode.EMPTY_NODE,t.popFront(),u,i):c).isEmpty()&&e.getServerCache().isFullyInitialized()&&(a=n.calcCompleteEventCache(e.getCompleteServerSnap())).isLeafNode()&&(f=this.filter_.updateFullNode(f,a,i))}return a=e.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(l.Path.Empty),e.updateEventSnap(f,a,this.filter_.filtersNodes())},e}();t.ViewProcessor=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(36),o=n(144),i=n(11),a=n(23),s=n(57),u=n(141),c=n(1),l=n(15),h=n(18),f=n(10),p=function(){function e(e,t){this.query_=e,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),c=new r.IndexedFilter(n.getIndex()),l=n.getNodeFilter();this.processor_=new o.ViewProcessor(l);var h=t.getServerCache(),f=t.getEventCache(),p=c.updateFullNode(i.ChildrenNode.EMPTY_NODE,h.getNode(),null),d=l.updateFullNode(i.ChildrenNode.EMPTY_NODE,f.getNode(),null),v=new a.CacheNode(p,h.isFullyInitialized(),c.filtersNodes()),y=new a.CacheNode(d,f.isFullyInitialized(),l.filtersNodes());this.viewCache_=new s.ViewCache(y,v),this.eventGenerator_=new u.EventGenerator(this.query_)}return e.prototype.getQuery=function(){return this.query_},e.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},e.prototype.getCompleteServerCache=function(e){var t=this.viewCache_.getCompleteServerSnap();return t&&(this.query_.getQueryParams().loadsAllData()||!e.isEmpty()&&!t.getImmediateChild(e.getFront()).isEmpty())?t.getChild(e):null},e.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},e.prototype.addEventRegistration=function(e){this.eventRegistrations_.push(e)},e.prototype.removeEventRegistration=function(e,t){var n=[];if(t){c.assert(null==e,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach(function(e){t=t;var o=e.createCancelEvent(t,r);o&&n.push(o)})}if(e){for(var o=[],i=0;i<this.eventRegistrations_.length;++i){var a=this.eventRegistrations_[i];if(a.matches(e)){if(e.hasAnyCallback()){o=o.concat(this.eventRegistrations_.slice(i+1));break}}else o.push(a)}this.eventRegistrations_=o}else this.eventRegistrations_=[];return n},e.prototype.applyOperation=function(e,t,n){e.type===l.OperationType.MERGE&&null!==e.source.queryId&&(c.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),c.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,o=this.processor_.applyOperation(r,e,t,n);return this.processor_.assertIndexed(o.viewCache),c.assert(o.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=o.viewCache,this.generateEventsForChanges_(o.changes,o.viewCache.getEventCache().getNode(),null)},e.prototype.getInitialEvents=function(e){var t=this.viewCache_.getEventCache(),n=[];t.getNode().isLeafNode()||t.getNode().forEachChild(f.PRIORITY_INDEX,function(e,t){n.push(h.Change.childAddedChange(e,t))});return t.isFullyInitialized()&&n.push(h.Change.valueChange(t.getNode())),this.generateEventsForChanges_(n,t.getNode(),e)},e.prototype.generateEventsForChanges_=function(e,t,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(e,t,r)},e}();t.View=p},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(15),o=n(59),i=n(6),a=n(1),s=function(){function e(e,t,n){this.source=e,this.path=t,this.children=n,this.type=r.OperationType.MERGE}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){var n=this.children.subtree(new i.Path(t));return n.isEmpty()?null:n.value?new o.Overwrite(this.source,i.Path.Empty,n.value):new e(this.source,i.Path.Empty,n)}return a.assert(this.path.getFront()===t,"Can't get a merge for a child not on the path of the operation"),new e(this.source,this.path.popFront(),this.children)},e.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},e}();t.Merge=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(15),i=function(){function e(e,t){this.source=e,this.path=t,this.type=o.OperationType.LISTEN_COMPLETE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,r.Path.Empty):new e(this.source,this.path.popFront())},e}();t.ListenComplete=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(6),i=n(15),a=function(){function e(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=i.OperationType.ACK_USER_WRITE,this.source=i.OperationSource.User}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return r.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new o.Path(t));return new e(o.Path.Empty,n,this.revert)}return r.assert(this.path.getFront()===t,"operationForChild called for unrelated child."),new e(this.path.popFront(),this.affectedTree,this.revert)},e}();t.AckUserWrite=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=n(4),i=n(148),a=n(11),s=n(1),u=n(37),c=n(147),l=n(146),h=n(15),f=n(59),p=n(6),d=n(58),v=n(140),y=function(){function e(e){this.listenProvider_=e,this.syncPointTree_=u.ImmutableTree.Empty,this.pendingWriteTree_=new v.WriteTree,this.tagToQueryMap_={},this.queryToTagMap_={}}return e.prototype.applyUserOverwrite=function(e,t,n,r){return this.pendingWriteTree_.addOverwrite(e,t,n,r),r?this.applyOperationToSyncPoints_(new f.Overwrite(h.OperationSource.User,e,t)):[]},e.prototype.applyUserMerge=function(e,t,n){this.pendingWriteTree_.addMerge(e,t,n);var r=u.ImmutableTree.fromObject(t);return this.applyOperationToSyncPoints_(new l.Merge(h.OperationSource.User,e,r))},e.prototype.ackUserWrite=function(e,t){void 0===t&&(t=!1);var n=this.pendingWriteTree_.getWrite(e);if(this.pendingWriteTree_.removeWrite(e)){var r=u.ImmutableTree.Empty;return null!=n.snap?r=r.set(p.Path.Empty,!0):s.forEach(n.children,function(e,t){r=r.set(new p.Path(e),t)}),this.applyOperationToSyncPoints_(new i.AckUserWrite(n.path,r,t))}return[]},e.prototype.applyServerOverwrite=function(e,t){return this.applyOperationToSyncPoints_(new f.Overwrite(h.OperationSource.Server,e,t))},e.prototype.applyServerMerge=function(e,t){var n=u.ImmutableTree.fromObject(t);return this.applyOperationToSyncPoints_(new l.Merge(h.OperationSource.Server,e,n))},e.prototype.applyListenComplete=function(e){return this.applyOperationToSyncPoints_(new c.ListenComplete(h.OperationSource.Server,e))},e.prototype.applyTaggedQueryOverwrite=function(t,n,r){var o=this.queryKeyForTag_(r);if(null!=o){var i=e.parseQueryKey_(o),a=i.path,s=i.queryId,u=p.Path.relativePath(a,t),c=new f.Overwrite(h.OperationSource.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},e.prototype.applyTaggedQueryMerge=function(t,n,r){var o=this.queryKeyForTag_(r);if(o){var i=e.parseQueryKey_(o),a=i.path,s=i.queryId,c=p.Path.relativePath(a,t),f=u.ImmutableTree.fromObject(n),d=new l.Merge(h.OperationSource.forServerTaggedQuery(s),c,f);return this.applyTaggedOperation_(a,d)}return[]},e.prototype.applyTaggedListenComplete=function(t,n){var r=this.queryKeyForTag_(n);if(r){var o=e.parseQueryKey_(r),i=o.path,a=o.queryId,s=p.Path.relativePath(i,t),u=new c.ListenComplete(h.OperationSource.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(i,u)}return[]},e.prototype.addEventRegistration=function(t,n){var o=t.path,i=null,s=!1;this.syncPointTree_.foreachOnPath(o,function(e,t){var n=p.Path.relativePath(e,o);i=i||t.getCompleteServerCache(n),s=s||t.hasCompleteView()});var u,c=this.syncPointTree_.get(o);(c?(s=s||c.hasCompleteView(),i=i||c.getCompleteServerCache(p.Path.Empty)):(c=new d.SyncPoint,this.syncPointTree_=this.syncPointTree_.set(o,c)),null!=i)?u=!0:(u=!1,i=a.ChildrenNode.EMPTY_NODE,this.syncPointTree_.subtree(o).foreachChild(function(e,t){var n=t.getCompleteServerCache(p.Path.Empty);n&&(i=i.updateImmediateChild(e,n))}));var l=c.viewExistsForQuery(t);if(!l&&!t.getQueryParams().loadsAllData()){var h=e.makeQueryKey_(t);r.assert(!(h in this.queryToTagMap_),"View does not exist, but we have a tag");var f=e.getNextQueryTag_();this.queryToTagMap_[h]=f,this.tagToQueryMap_["_"+f]=h}var v=this.pendingWriteTree_.childWrites(o),y=c.addEventRegistration(t,n,v,i,u);if(!l&&!s){var m=c.viewForQuery(t);y=y.concat(this.setupListener_(t,m))}return y},e.prototype.removeEventRegistration=function(t,n,r){var o=this,i=t.path,a=this.syncPointTree_.get(i),s=[];if(a&&("default"===t.queryIdentifier()||a.viewExistsForQuery(t))){var u=a.removeEventRegistration(t,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(i));var c=u.removed;s=u.events;var l=-1!==c.findIndex(function(e){return e.getQueryParams().loadsAllData()}),h=this.syncPointTree_.findOnPath(i,function(e,t){return t.hasCompleteView()});if(l&&!h){var f=this.syncPointTree_.subtree(i);if(!f.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(f),d=0;d<p.length;++d){var v=p[d],y=v.getQuery(),m=this.createListenerForView_(v);this.listenProvider_.startListening(e.queryForListening_(y),this.tagForQuery_(y),m.hashFn,m.onComplete)}}if(!h&&c.length>0&&!r)if(l){this.listenProvider_.stopListening(e.queryForListening_(t),null)}else c.forEach(function(t){var n=o.queryToTagMap_[e.makeQueryKey_(t)];o.listenProvider_.stopListening(e.queryForListening_(t),n)});this.removeTags_(c)}return s},e.prototype.calcCompleteEventCache=function(e,t){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(e,function(t,n){var r=p.Path.relativePath(t,e),o=n.getCompleteServerCache(r);if(o)return o});return n.calcCompleteEventCache(e,r,t,!0)},e.prototype.collectDistinctViewsForSubTree_=function(e){return e.fold(function(e,t,n){if(t&&t.hasCompleteView())return[t.getCompleteView()];var r=[];return t&&(r=t.getQueryViews()),s.forEach(n,function(e,t){r=r.concat(t)}),r})},e.prototype.removeTags_=function(t){for(var n=0;n<t.length;++n){var r=t[n];if(!r.getQueryParams().loadsAllData()){var o=e.makeQueryKey_(r),i=this.queryToTagMap_[o];delete this.queryToTagMap_[o],delete this.tagToQueryMap_["_"+i]}}},e.queryForListening_=function(e){return e.getQueryParams().loadsAllData()&&!e.getQueryParams().isDefault()?e.getRef():e},e.prototype.setupListener_=function(t,n){var o=t.path,i=this.tagForQuery_(t),a=this.createListenerForView_(n),u=this.listenProvider_.startListening(e.queryForListening_(t),i,a.hashFn,a.onComplete),c=this.syncPointTree_.subtree(o);if(i)r.assert(!c.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var l=c.fold(function(e,t,n){if(!e.isEmpty()&&t&&t.hasCompleteView())return[t.getCompleteView().getQuery()];var r=[];return t&&(r=r.concat(t.getQueryViews().map(function(e){return e.getQuery()}))),s.forEach(n,function(e,t){r=r.concat(t)}),r}),h=0;h<l.length;++h){var f=l[h];this.listenProvider_.stopListening(e.queryForListening_(f),this.tagForQuery_(f))}return u},e.prototype.createListenerForView_=function(e){var t=this,n=e.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(e.getServerCache()||a.ChildrenNode.EMPTY_NODE).hash()},onComplete:function(e){if("ok"===e)return r?t.applyTaggedListenComplete(n.path,r):t.applyListenComplete(n.path);var i=o.errorForServerCode(e,n);return t.removeEventRegistration(n,null,i)}}},e.makeQueryKey_=function(e){return e.path.toString()+"$"+e.queryIdentifier()},e.parseQueryKey_=function(e){var t=e.indexOf("$");return r.assert(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new p.Path(e.substr(0,t))}},e.prototype.queryKeyForTag_=function(e){return this.tagToQueryMap_["_"+e]},e.prototype.tagForQuery_=function(t){var n=e.makeQueryKey_(t);return s.safeGet(this.queryToTagMap_,n)},e.getNextQueryTag_=function(){return e.nextQueryTag_++},e.prototype.applyTaggedOperation_=function(e,t){var n=this.syncPointTree_.get(e);r.assert(n,"Missing sync point for query tag that we're tracking");var o=this.pendingWriteTree_.childWrites(e);return n.applyOperation(t,o,null)},e.prototype.applyOperationToSyncPoints_=function(e){return this.applyOperationHelper_(e,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(p.Path.Empty))},e.prototype.applyOperationHelper_=function(e,t,n,r){if(e.path.isEmpty())return this.applyOperationDescendantsHelper_(e,t,n,r);var o=t.get(p.Path.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(p.Path.Empty));var i=[],a=e.path.getFront(),s=e.operationForChild(a),u=t.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,l=r.child(a);i=i.concat(this.applyOperationHelper_(s,u,c,l))}return o&&(i=i.concat(o.applyOperation(e,r,n))),i},e.prototype.applyOperationDescendantsHelper_=function(e,t,n,r){var o=this,i=t.get(p.Path.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(p.Path.Empty));var a=[];return t.children.inorderTraversal(function(t,i){var s=n?n.getImmediateChild(t):null,u=r.child(t),c=e.operationForChild(t);c&&(a=a.concat(o.applyOperationDescendantsHelper_(c,i,s,u)))}),i&&(a=a.concat(i.applyOperation(e,r,n))),a},e.nextQueryTag_=1,e}();t.SyncTree=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e,t,n,r){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=r}return e.prototype.getPath=function(){var e=this.snapshot.getRef();return"value"===this.eventType?e.path:e.getParent().path},e.prototype.getEventType=function(){return this.eventType},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+r.stringify(this.snapshot.exportVal())},e}();t.DataEvent=o;var i=function(){function e(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}return e.prototype.getPath=function(){return this.path},e.prototype.getEventType=function(){return"cancel"},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.path.toString()+":cancel"},e}();t.CancelEvent=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(38),o=n(150),i=n(1),a=n(1),s=function(){function e(e,t,n){this.callback_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){return"value"===e},e.prototype.createEvent=function(e,t){var n=t.getQueryParams().getIndex();return new o.DataEvent("value",this,new r.DataSnapshot(e.snapshotNode,t.getRef(),n))},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callback_;return function(){r.call(t,e.snapshot)}},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new o.CancelEvent(this,e,t):null},e.prototype.matches=function(t){return t instanceof e&&(!t.callback_||!this.callback_||t.callback_===this.callback_&&t.context_===this.context_)},e.prototype.hasAnyCallback=function(){return null!==this.callback_},e}();t.ValueEventRegistration=s;var u=function(){function e(e,t,n){this.callbacks_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){var t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,i.contains(this.callbacks_,t)},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new o.CancelEvent(this,e,t):null},e.prototype.createEvent=function(e,t){a.assert(null!=e.childName,"Child events should have a childName.");var n=t.getRef().child(e.childName),i=t.getQueryParams().getIndex();return new o.DataEvent(e.type,this,new r.DataSnapshot(e.snapshotNode,n,i),e.prevName)},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){a.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callbacks_[e.eventType];return function(){r.call(t,e.snapshot,e.prevName)}},e.prototype.matches=function(t){if(t instanceof e){if(!this.callbacks_||!t.callbacks_)return!0;if(this.context_===t.context_){var n=i.getCount(t.callbacks_);if(n===i.getCount(this.callbacks_)){if(1===n){var r=i.getAnyKey(t.callbacks_),o=i.getAnyKey(this.callbacks_);return!(o!==r||t.callbacks_[r]&&this.callbacks_[o]&&t.callbacks_[r]!==this.callbacks_[o])}return i.every(this.callbacks_,function(e,n){return t.callbacks_[e]===n})}}}return!1},e.prototype.hasAnyCallback=function(){return null!==this.callbacks_},e}();t.ChildEventRegistration=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o,i,a=n(1);t.nextPushId=(r="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",o=0,i=[],function(e){var t,n=e===o;o=e;var s=new Array(8);for(t=7;t>=0;t--)s[t]=r.charAt(e%64),e=Math.floor(e/64);a.assert(0===e,"Cannot push at time == 0");var u=s.join("");if(n){for(t=11;t>=0&&63===i[t];t--)i[t]=0;i[t]++}else for(t=0;t<12;t++)i[t]=Math.floor(64*Math.random());for(t=0;t<12;t++)u+=r.charAt(i[t]);return a.assert(20===u.length,"nextPushId: Length should be 20."),u})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return r.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}();t.TransactionResult=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(){this.cache_={},this.isInMemoryStorage=!0}return e.prototype.set=function(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t},e.prototype.get=function(e){return r.contains(this.cache_,e)?this.cache_[e]:null},e.prototype.remove=function(e){delete this.cache_[e]},e}();t.MemoryStorage=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o=function(){function e(e){this.domStorage_=e,this.prefix_="firebase:"}return e.prototype.set=function(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),r.stringify(t))},e.prototype.get=function(e){var t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:r.jsonEval(t)},e.prototype.remove=function(e){this.domStorage_.removeItem(this.prefixedName_(e))},e.prototype.prefixedName_=function(e){return this.prefix_+e},e.prototype.toString=function(){return this.domStorage_.toString()},e}();t.DOMStorageWrapper=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=n(73);t.Database=o.Database;var i=n(69);t.Query=i.Query;var a=n(39);t.Reference=a.Reference;var s=n(4);t.enableLogging=s.enableLogging;var u=n(34),c=n(124),l=n(123),h=n(1),f=o.Database.ServerValue;function p(t){var n=t.INTERNAL.registerService("database",function(e,t,n){return u.RepoManager.getInstance().databaseFromApp(e,n)},{Reference:a.Reference,Query:i.Query,Database:o.Database,enableLogging:s.enableLogging,INTERNAL:c,ServerValue:f,TEST_ACCESS:l},null,!0);h.isNodeSdk()&&(e.exports=n)}t.ServerValue=f,t.registerDatabase=p,p(r.default);var d=n(38);t.DataSnapshot=d.DataSnapshot;var v=n(70);t.OnDisconnect=v.OnDisconnect},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(78);t.stringToByteArray=function(e){for(var t=[],n=0,o=0;o<e.length;o++){var i=e.charCodeAt(o);if(i>=55296&&i<=56319){var a=i-55296;o++,r.assert(o<e.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(e.charCodeAt(o)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t}},function(e,t,n){"use strict";function r(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var o=e+" failed: ";return o+=r+" argument "}Object.defineProperty(t,"__esModule",{value:!0}),t.validateArgCount=function(e,t,n,r){var o;if(r<t?o="at least "+t:r>n&&(o=0===n?"none":"no more than "+n),o)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+o+".")},t.errorPrefix=r,t.validateNamespace=function(e,t,n,o){if((!o||n)&&"string"!=typeof n)throw new Error(r(e,t,o)+"must be a valid firebase namespace.")},t.validateCallback=function(e,t,n,o){if((!o||n)&&"function"!=typeof n)throw new Error(r(e,t,o)+"must be a valid function.")},t.validateContextObject=function(e,t,n,o){if((!o||n)&&("object"!=typeof n||null===n))throw new Error(r(e,t,o)+"must be a valid context object.")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createSubscribe=function(e,t){var n=new r(e,t);return n.subscribe.bind(n)};var r=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then(function(){e(n)}).catch(function(e){n.error(e)})}return e.prototype.next=function(e){this.forEachObserver(function(t){t.next(e)})},e.prototype.error=function(e){this.forEachObserver(function(t){t.error(e)}),this.close(e)},e.prototype.complete=function(){this.forEachObserver(function(e){e.complete()}),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var o=r[n];if(o in e&&"function"==typeof e[o])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=o),void 0===r.error&&(r.error=o),void 0===r.complete&&(r.complete=o);var a=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then(function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}}),this.observers.push(r),a},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then(function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}})},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then(function(){t.observers=void 0,t.onNoObservers=void 0}))},e}();function o(){}t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then(function(){e.apply(void 0,n)}).catch(function(e){t&&t(e)})}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(){this.blockSize=-1}}();t.Hash=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=function(e){function t(){var t=e.call(this)||this;t.chain_=[],t.buf_=[],t.W_=[],t.pad_=[],t.inbuf_=0,t.total_=0,t.blockSize=64,t.pad_[0]=128;for(var n=1;n<t.blockSize;++n)t.pad_[n]=0;return t.reset(),t}return r.__extends(t,e),t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var o=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(o<<1|o>>>31)}var i,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],h=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(i=l^u&(c^l),a=1518500249):(i=u^c^l,a=1859775393):r<60?(i=u&c|l&(u|c),a=2400959708):(i=u^c^l,a=3395469782);o=(s<<5|s>>>27)+i+h+a+n[r]&4294967295;h=l,l=c,c=4294967295&(u<<30|u>>>2),u=s,s=o}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+h&4294967295},t.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,o=this.buf_,i=this.inbuf_;r<t;){if(0==i)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(o[i]=e.charCodeAt(r),++r,++i==this.blockSize){this.compress_(o),i=0;break}}else for(;r<t;)if(o[i]=e[r],++r,++i==this.blockSize){this.compress_(o),i=0;break}}this.inbuf_=i,this.total_+=t}},t.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var o=24;o>=0;o-=8)e[r]=this.chain_[n]>>o&255,++r;return e},t}(n(160).Hash);t.Sha1=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(75);t.querystring=function(e){var t=[];return r.forEach(e,function(e,n){Array.isArray(n)?n.forEach(function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))}):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))}),t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach(function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}}),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(77),o=n(76);t.decode=function(e){var t={},n={},i={},a="";try{var s=e.split(".");t=o.jsonEval(r.base64Decode(s[0])||""),n=o.jsonEval(r.base64Decode(s[1])||""),a=s[2],i=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:i,signature:a}},t.isValidTimestamp=function(e){var n,r,o=t.decode(e).claims,i=Math.floor((new Date).getTime()/1e3);return"object"==typeof o&&(o.hasOwnProperty("nbf")?n=o.nbf:o.hasOwnProperty("iat")&&(n=o.iat),r=o.hasOwnProperty("exp")?o.exp:n+86400),i&&n&&r&&i>=n&&i<=r},t.issuedAtTime=function(e){var n=t.decode(e).claims;return"object"==typeof n&&n.hasOwnProperty("iat")?n.iat:null},t.isValidFormat=function(e){var n=t.decode(e),r=n.claims;return!!n.signature&&!!r&&"object"==typeof r&&r.hasOwnProperty("iat")},t.isAdmin=function(e){var n=t.decode(e).claims;return"object"==typeof n&&!0===n.admin}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r="FirebaseError",o=Error.captureStackTrace;t.patchCapture=function(e){var t=o;return o=e,t};var i=function(){return function(e,t){if(this.code=e,this.message=t,o)o(this,a.prototype.create);else{var n=Error.apply(this,arguments);this.name=r,Object.defineProperty(this,"stack",{get:function(){return n.stack}})}}}();t.FirebaseError=i,i.prototype=Object.create(Error.prototype),i.prototype.constructor=i,i.prototype.name=r;var a=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n,this.pattern=/\{\$([^}]+)}/g}return e.prototype.create=function(e,t){void 0===t&&(t={});var n,r=this.errors[e],o=this.service+"/"+e;n=void 0===r?"Error":r.replace(this.pattern,function(e,n){var r=t[n];return void 0!==r?r.toString():"<"+n+"?>"}),n=this.serviceName+": "+n+" ("+o+").";var a=new i(o,n);for(var s in t)t.hasOwnProperty(s)&&"_"!==s.slice(-1)&&(a[s]=t[s]);return a},e}();t.ErrorFactory=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40);t.getUA=function(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(t.getUA())},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isNodeSdk=function(){return!0===r.CONSTANTS.NODE_CLIENT||!0===r.CONSTANTS.NODE_ADMIN}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){var e=this;this.promise=new Promise(function(t,n){e.resolve=t,e.reject=n})}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch(function(){}),1===e.length?e(n):e(n,r))}},e}();t.Deferred=r},function(e,t,n){"use strict";function r(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=r(e[n],t[n]));return e}Object.defineProperty(t,"__esModule",{value:!0}),t.deepCopy=function(e){return r(void 0,e)},t.deepExtend=r,t.patchProperty=function(e,t,n){e[t]=n}},function(e,t){String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return this.substr(!t||t<0?0:+t,e.length)===e})},function(e,t){Array.prototype.find||Object.defineProperty(Array.prototype,"find",{value:function(e){if(null==this)throw new TypeError('"this" is null or not defined');var t=Object(this),n=t.length>>>0;if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var r=arguments[1],o=0;o<n;){var i=t[o];if(e.call(r,i,o,t))return i;o++}}}),Array.prototype.findIndex||Object.defineProperty(Array.prototype,"findIndex",{value:function(e){if(null==this)throw new TypeError('"this" is null or not defined');var t=Object(this),n=t.length>>>0;if("function"!=typeof e)throw new TypeError("predicate must be a function");for(var r=arguments[1],o=0;o<n;){var i=t[o];if(e.call(r,i,o,t))return o;o++}return-1}})},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,a,s,u=1,c={},l=!1,h=e.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(e);f=f&&f.setTimeout?f:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick(function(){d(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){d(e.data)},r=function(e){i.port2.postMessage(e)}):h&&"onreadystatechange"in h.createElement("script")?(o=h.documentElement,r=function(e){var t=h.createElement("script");t.onreadystatechange=function(){d(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(d,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&d(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),r=function(t){e.postMessage(a+t,"*")}),f.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return c[u]=o,r(u),u++},f.clearImmediate=p}function p(e){delete c[e]}function d(e){if(l)setTimeout(d,0,e);else{var t=c[e];if(t){l=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{p(e),l=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(22),n(79))},function(e,t,n){(function(e){var r=Function.prototype.apply;function o(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new o(r.call(setTimeout,window,arguments),clearTimeout)},t.setInterval=function(){return new o(r.call(setInterval,window,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},o.prototype.unref=o.prototype.ref=function(){},o.prototype.close=function(){this._clearFn.call(window,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(170),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(22))},function(e,t,n){"use strict";(function(t){var n=setTimeout;function r(){}function o(e){if(!(this instanceof o))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(e,this)}function i(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,o._immediateFn(function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var r;try{r=n(e._value)}catch(e){return void s(t.promise,e)}a(t.promise,r)}else(1===e._state?a:s)(t.promise,e._value)})):e._deferreds.push(t)}function a(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof o)return e._state=3,e._value=t,void u(e);if("function"==typeof n)return void c((r=n,i=t,function(){r.apply(i,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){s(e,t)}var r,i}function s(e,t){e._state=2,e._value=t,u(e)}function u(e){2===e._state&&0===e._deferreds.length&&o._immediateFn(function(){e._handled||o._unhandledRejectionFn(e._value)});for(var t=0,n=e._deferreds.length;t<n;t++)i(e,e._deferreds[t]);e._deferreds=null}function c(e,t){var n=!1;try{e(function(e){n||(n=!0,a(t,e))},function(e){n||(n=!0,s(t,e))})}catch(e){if(n)return;n=!0,s(t,e)}}o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){var n=new this.constructor(r);return i(this,new function(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}(e,t,n)),n},o.prototype.finally=function(e){var t=this.constructor;return this.then(function(n){return t.resolve(e()).then(function(){return n})},function(n){return t.resolve(e()).then(function(){return t.reject(n)})})},o.all=function(e){return new o(function(t,n){if(!e||void 0===e.length)throw new TypeError("Promise.all accepts an array");var r=Array.prototype.slice.call(e);if(0===r.length)return t([]);var o=r.length;function i(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var s=a.then;if("function"==typeof s)return void s.call(a,function(t){i(e,t)},n)}r[e]=a,0==--o&&t(r)}catch(e){n(e)}}for(var a=0;a<r.length;a++)i(a,r[a])})},o.resolve=function(e){return e&&"object"==typeof e&&e.constructor===o?e:new o(function(t){t(e)})},o.reject=function(e){return new o(function(t,n){n(e)})},o.race=function(e){return new o(function(t,n){for(var r=0,o=e.length;r<o;r++)e[r].then(t,n)})},o._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){n(e,0)},o._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},e.exports=o}).call(this,n(171).setImmediate)},function(e,t,n){(function(e){var t=function(){if(void 0!==e)return e;if("undefined"!=typeof window)return window;if("undefined"!=typeof self)return self;throw new Error("unable to locate global object")}();"undefined"==typeof Promise&&(t.Promise=Promise=n(172))}).call(this,n(22))},function(e,t,n){"use strict";n.r(t);n(173),n(169),n(168)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=h(n(0)),s=n(2),u=h(n(80));n(74);var c=h(n(122)),l=n(121);function h(e){return e&&e.__esModule?e:{default:e}}var f=function(e,t){return i({},e,t)},p=function(e,t,n){return{firebaseApp:n}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:p,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:f,n=function(){if("function"!=typeof e)return e;var t=e.apply(void 0,arguments);if(null===t||"object"!==(void 0===t?"undefined":o(t)))throw new Error("react-firebase: mapFirebaseToProps must return an object. Instead received "+t+".");return t},h=function(e,t,r){var o=n(e,t,r);return(0,l.pickBy)(o,function(e){return"string"==typeof e||e&&e.path})};return function(e){var o=function(o){function a(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,e,t));return n.firebaseApp=e.firebaseApp||t.firebaseApp||u.default.app(),n.ref=function(e){return n.firebaseApp.database().ref(e)},n.state={subscriptionsState:null},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(a,s.Component),r(a,[{key:"componentDidMount",value:function(){var e=h(this.props,this.ref,this.firebaseApp);this.mounted=!0,this.subscribe(e)}},{key:"componentWillReceiveProps",value:function(e){var t=h(this.props,this.ref,this.firebaseApp),n=h(e,this.ref,this.firebaseApp),r=(0,l.pickBy)(n,function(e,n){return!t[n]}),o=(0,l.pickBy)(t,function(e,t){return!n[t]}),a=(0,l.pickBy)(n,function(e,n){return t[n]&&!(0,c.default)(t[n],e)});this.unsubscribe(i({},o,a)),this.subscribe(i({},r,a))}},{key:"componentWillUnmount",value:function(){this.mounted=!1,this.listeners&&this.unsubscribe(this.listeners)}},{key:"subscribe",value:function(e){var t=this;if(!(Object.keys(e).length<1)){var n=function(e){return(0,l.mapValues)(e,function(e){return"string"==typeof e?{path:e}:e})}(e),r=(0,l.mapValues)(n,function(e,n){var r=e.path,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["path"]),a=Object.keys(o).some(function(e){return e.startsWith("orderBy")}),s=(0,l.createQueryRef)(t.ref(r),o),u=function(e){if(t.mounted){var r=a?(0,l.mapSnapshotToValue)(e):e.val();t.setState(function(e){return{subscriptionsState:i({},e.subscriptionsState,function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},n,r))}})}};return s.on("value",u),{path:r,unsubscribe:function(){return s.off("value",u)}}});this.listeners=i({},this.listeners,r)}}},{key:"unsubscribe",value:function(e){var t=this;if(!(Object.keys(e).length<1)){var n=i({},this.listeners),r=i({},this.state.subscriptionsState);Object.keys(e).forEach(function(e){t.listeners[e].unsubscribe(),delete n[e],delete r[e]}),this.listeners=n,this.setState({subscriptionsState:r})}}},{key:"render",value:function(){var r=n(this.props,this.ref,this.firebaseApp),o=(0,l.pickBy)(r,function(e){return"function"==typeof e}),a=this.state.subscriptionsState,u=t(this.props,i({},o,a));return(0,s.createElement)(e,u)}}]),a}();return o.WrappedComponent=e,o.defaultProps=s.Component.defaultProps,o.displayName="FirebaseConnect("+(0,l.getDisplayName)(e)+")",o.contextTypes=o.propTypes={firebaseApp:a.default.shape({database:a.default.func.isRequired})},o}},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(0),a=(r=i)&&r.__esModule?r:{default:r},s=n(2);var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.Component),o(t,[{key:"getChildContext",value:function(){return{firebaseApp:this.props.firebaseApp}}},{key:"render",value:function(){return s.Children.only(this.props.children)}}]),t}();u.propTypes={firebaseApp:a.default.object.isRequired,children:a.default.element.isRequired},u.childContextTypes={firebaseApp:a.default.object},t.default=u,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r},a=n(41),s=n(19),u=n(33);t.default=(0,a.connect)({events:"/"})(function(e){var t=e.events;return t?i.default.createElement("div",null,i.default.createElement("h1",null,"Events:"),i.default.createElement("ul",null,Object.keys(t).map(function(e){return i.default.createElement("li",{key:e},i.default.createElement(s.Link,{to:"/event/"+e},e)," ",i.default.createElement(s.Link,{to:"/admin/"+e,className:"hidden-link"},"administration"))}))):i.default.createElement("div",{className:"loader"},i.default.createElement(u.RiseLoader,null))})},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,s,u){if(r(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,o,i,a,s,u],h=0;(c=new Error(t.replace(/%s/g,function(){return l[h++]}))).name="Invariant Violation"}throw c.framesToPop=1,c}}},function(e,t,n){"use strict";var r=n(30),o=n(180),i=n(179);e.exports=function(){function e(e,t,n,r,a,s){s!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=u(n(2)),o=n(19),i=u(n(177)),a=u(n(99)),s=u(n(98));function u(e){return e&&e.__esModule?e:{default:e}}t.default=function(){return r.default.createElement(o.Switch,null,r.default.createElement(o.Route,{exact:!0,path:"/",component:i.default}),r.default.createElement(o.Route,{exact:!0,path:"/event/:event_id",component:a.default}),r.default.createElement(o.Route,{exact:!0,path:"/admin/:event_id",component:s.default}))}},function(e,t,n){"use strict";e.exports=function(e){try{e.focus()}catch(e){}}},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(184);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(185);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=n(30),o={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:r}},registerDefault:function(){}};e.exports=o},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(83),o=n(82),i=n(30),a="function"==typeof Symbol&&Symbol.for,s=a?Symbol.for("react.element"):60103,u=a?Symbol.for("react.call"):60104,c=a?Symbol.for("react.return"):60105,l=a?Symbol.for("react.portal"):60106,h=a?Symbol.for("react.fragment"):60107,f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function v(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||d}function y(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||d}function m(){}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&p("85"),this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var g=y.prototype=new m;function _(e,t,n){this.props=e,this.context=t,this.refs=o,this.updater=n||d}g.constructor=y,r(g,v.prototype),g.isPureReactComponent=!0;var b=_.prototype=new m;b.constructor=_,r(b,v.prototype),b.unstable_isAsyncReactComponent=!0,b.render=function(){return this.props.children};var w={current:null},E=Object.prototype.hasOwnProperty,C={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,n){var r,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)E.call(t,r)&&!C.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var c=Array(u),l=0;l<u;l++)c[l]=arguments[l+2];o.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:s,type:e,key:i,ref:a,props:o,_owner:w.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===s}var O=/\/+/g,P=[];function N(e,t,n,r){if(P.length){var o=P.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function k(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case s:case u:case c:case l:i=!0}}if(i)return n(r,e,""===t?"."+R(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var h=t+R(o=e[a],a);i+=k(o,h,n,r)}else if(null===e||void 0===e?h=null:h="function"==typeof(h=f&&e[f]||e["@@iterator"])?h:null,"function"==typeof h)for(e=h.call(e),a=0;!(o=e.next()).done;)i+=k(o=o.value,h=t+R(o,a++),n,r);else"object"===o&&p("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function R(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function x(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,i.thatReturnsArgument):null!=e&&(S(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n,e={$$typeof:s,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function D(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(O,"$&/")+"/"),t=N(t,i,r,o),null==e||k(e,"",x,t),I(t)}var L={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=N(null,null,t,n),null==e||k(e,"",A,t),I(t)},count:function(e){return null==e?0:k(e,"",i.thatReturnsNull,null)},toArray:function(e){var t=[];return D(e,t,null,i.thatReturnsArgument),t},only:function(e){return S(e)||p("143"),e}},Component:v,PureComponent:y,unstable_AsyncComponent:_,Fragment:h,createElement:T,cloneElement:function(e,t,n){var o=r({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=w.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)E.call(t,l)&&!C.hasOwnProperty(l)&&(o[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){c=Array(l);for(var h=0;h<l;h++)c[h]=arguments[h+2];o.children=c}return{$$typeof:s,type:e.type,key:i,ref:a,props:o,_owner:u}},createFactory:function(e){var t=T.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.2.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},M=Object.freeze({default:L}),F=M&&L||M;e.exports=F.default?F.default:F},function(e,t,n){"use strict";
/** @license React v16.2.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(2),o=n(189),i=n(83),a=n(30),s=n(188),u=n(187),c=n(17),l=n(186),h=n(183),f=n(82);function p(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);throw(t=Error(n+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.")).name="Invariant Violation",t.framesToPop=1,t}r||p("227");var d={children:!0,dangerouslySetInnerHTML:!0,defaultValue:!0,defaultChecked:!0,innerHTML:!0,suppressContentEditableWarning:!0,suppressHydrationWarning:!0,style:!0};function v(e,t){return(e&t)===t}var y={MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,HAS_STRING_BOOLEAN_VALUE:64,injectDOMPropertyConfig:function(e){var t=y,n=e.Properties||{},r=e.DOMAttributeNamespaces||{},o=e.DOMAttributeNames||{};for(var i in e=e.DOMMutationMethods||{},n){m.hasOwnProperty(i)&&p("48",i);var a=i.toLowerCase(),s=n[i];1>=(a={attributeName:a,attributeNamespace:null,propertyName:i,mutationMethod:null,mustUseProperty:v(s,t.MUST_USE_PROPERTY),hasBooleanValue:v(s,t.HAS_BOOLEAN_VALUE),hasNumericValue:v(s,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:v(s,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:v(s,t.HAS_OVERLOADED_BOOLEAN_VALUE),hasStringBooleanValue:v(s,t.HAS_STRING_BOOLEAN_VALUE)}).hasBooleanValue+a.hasNumericValue+a.hasOverloadedBooleanValue||p("50",i),o.hasOwnProperty(i)&&(a.attributeName=o[i]),r.hasOwnProperty(i)&&(a.attributeNamespace=r[i]),e.hasOwnProperty(i)&&(a.mutationMethod=e[i]),m[i]=a}}},m={};function g(e,t){if(d.hasOwnProperty(e)||2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))return!1;if(null===t)return!0;switch(typeof t){case"boolean":return d.hasOwnProperty(e)?e=!0:(t=_(e))?e=t.hasBooleanValue||t.hasStringBooleanValue||t.hasOverloadedBooleanValue:e="data-"===(e=e.toLowerCase().slice(0,5))||"aria-"===e,e;case"undefined":case"number":case"string":case"object":return!0;default:return!1}}function _(e){return m.hasOwnProperty(e)?m[e]:null}var b=y,w=b.MUST_USE_PROPERTY,E=b.HAS_BOOLEAN_VALUE,C=b.HAS_NUMERIC_VALUE,T=b.HAS_POSITIVE_NUMERIC_VALUE,S=b.HAS_OVERLOADED_BOOLEAN_VALUE,O=b.HAS_STRING_BOOLEAN_VALUE,P={Properties:{allowFullScreen:E,async:E,autoFocus:E,autoPlay:E,capture:S,checked:w|E,cols:T,contentEditable:O,controls:E,default:E,defer:E,disabled:E,download:S,draggable:O,formNoValidate:E,hidden:E,loop:E,multiple:w|E,muted:w|E,noValidate:E,open:E,playsInline:E,readOnly:E,required:E,reversed:E,rows:T,rowSpan:C,scoped:E,seamless:E,selected:w|E,size:T,start:C,span:T,spellCheck:O,style:0,tabIndex:0,itemScope:E,acceptCharset:0,className:0,htmlFor:0,httpEquiv:0,value:O},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMMutationMethods:{value:function(e,t){if(null==t)return e.removeAttribute("value");"number"!==e.type||!1===e.hasAttribute("value")?e.setAttribute("value",""+t):e.validity&&!e.validity.badInput&&e.ownerDocument.activeElement!==e&&e.setAttribute("value",""+t)}}},N=b.HAS_STRING_BOOLEAN_VALUE,I="http://www.w3.org/1999/xlink",k="http://www.w3.org/XML/1998/namespace",R={Properties:{autoReverse:N,externalResourcesRequired:N,preserveAlpha:N},DOMAttributeNames:{autoReverse:"autoReverse",externalResourcesRequired:"externalResourcesRequired",preserveAlpha:"preserveAlpha"},DOMAttributeNamespaces:{xlinkActuate:I,xlinkArcrole:I,xlinkHref:I,xlinkRole:I,xlinkShow:I,xlinkTitle:I,xlinkType:I,xmlBase:k,xmlLang:k,xmlSpace:k}},A=/[\-\:]([a-z])/g;function x(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode x-height xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type xml:base xmlns:xlink xml:lang xml:space".split(" ").forEach(function(e){var t=e.replace(A,x);R.Properties[t]=0,R.DOMAttributeNames[t]=e}),b.injectDOMPropertyConfig(P),b.injectDOMPropertyConfig(R);var D={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,injection:{injectErrorUtils:function(e){"function"!=typeof e.invokeGuardedCallback&&p("197"),L=e.invokeGuardedCallback}},invokeGuardedCallback:function(e,t,n,r,o,i,a,s,u){L.apply(D,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,s,u){if(D.invokeGuardedCallback.apply(this,arguments),D.hasCaughtError()){var c=D.clearCaughtError();D._hasRethrowError||(D._hasRethrowError=!0,D._rethrowError=c)}},rethrowCaughtError:function(){return function(){if(D._hasRethrowError){var e=D._rethrowError;throw D._rethrowError=null,D._hasRethrowError=!1,e}}.apply(D,arguments)},hasCaughtError:function(){return D._hasCaughtError},clearCaughtError:function(){if(D._hasCaughtError){var e=D._caughtError;return D._caughtError=null,D._hasCaughtError=!1,e}p("198")}};function L(e,t,n,r,o,i,a,s,u){D._hasCaughtError=!1,D._caughtError=null;var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){D._caughtError=e,D._hasCaughtError=!0}}var M=null,F={};function j(){if(M)for(var e in F){var t=F[e],n=M.indexOf(e);if(-1<n||p("96",e),!V[n])for(var r in t.extractEvents||p("97",e),V[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,s=r;W.hasOwnProperty(s)&&p("99",s),W[s]=i;var u=i.phasedRegistrationNames;if(u){for(o in u)u.hasOwnProperty(o)&&U(u[o],a,s);o=!0}else i.registrationName?(U(i.registrationName,a,s),o=!0):o=!1;o||p("98",r,e)}}}function U(e,t,n){B[e]&&p("100",e),B[e]=t,H[e]=t.eventTypes[n].dependencies}var V=[],W={},B={},H={};function K(e){M&&p("101"),M=Array.prototype.slice.call(e),j()}function q(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];F.hasOwnProperty(t)&&F[t]===r||(F[t]&&p("102",t),F[t]=r,n=!0)}n&&j()}var z=Object.freeze({plugins:V,eventNameDispatchConfigs:W,registrationNameModules:B,registrationNameDependencies:H,possibleRegistrationNames:null,injectEventPluginOrder:K,injectEventPluginsByName:q}),G=null,Q=null,Y=null;function X(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=Y(r),D.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function $(e,t){return null==t&&p("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function J(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var Z=null;function ee(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)X(e,t,n[o],r[o]);else n&&X(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function te(e){return ee(e,!0)}function ne(e){return ee(e,!1)}var re={injectEventPluginOrder:K,injectEventPluginsByName:q};function oe(e,t){var n=e.stateNode;if(!n)return null;var r=G(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&p("231",t,typeof n),n)}function ie(e,t,n,r){for(var o,i=0;i<V.length;i++){var a=V[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=$(o,a))}return o}function ae(e){e&&(Z=$(Z,e))}function se(e){var t=Z;Z=null,t&&(J(t,e?te:ne),Z&&p("95"),D.rethrowCaughtError())}var ue=Object.freeze({injection:re,getListener:oe,extractEvents:ie,enqueueEvents:ae,processEventQueue:se}),ce=Math.random().toString(36).slice(2),le="__reactInternalInstance$"+ce,he="__reactEventHandlers$"+ce;function fe(e){if(e[le])return e[le];for(var t=[];!e[le];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}var n=void 0,r=e[le];if(5===r.tag||6===r.tag)return r;for(;e&&(r=e[le]);e=t.pop())n=r;return n}function pe(e){if(5===e.tag||6===e.tag)return e.stateNode;p("33")}function de(e){return e[he]||null}var ve=Object.freeze({precacheFiberNode:function(e,t){t[le]=e},getClosestInstanceFromNode:fe,getInstanceFromNode:function(e){return!(e=e[le])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:pe,getFiberCurrentPropsFromNode:de,updateFiberProps:function(e,t){e[he]=t}});function ye(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function me(e,t,n){for(var r=[];e;)r.push(e),e=ye(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function ge(e,t,n){(t=oe(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=$(n._dispatchListeners,t),n._dispatchInstances=$(n._dispatchInstances,e))}function _e(e){e&&e.dispatchConfig.phasedRegistrationNames&&me(e._targetInst,ge,e)}function be(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;me(t=t?ye(t):null,ge,e)}}function we(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=oe(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=$(n._dispatchListeners,t),n._dispatchInstances=$(n._dispatchInstances,e))}function Ee(e){e&&e.dispatchConfig.registrationName&&we(e._targetInst,null,e)}function Ce(e){J(e,_e)}function Te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,s=o;s;s=ye(s))a++;s=0;for(var u=i;u;u=ye(u))s++;for(;0<a-s;)o=ye(o),a--;for(;0<s-a;)i=ye(i),s--;for(;a--;){if(o===i||o===i.alternate)break e;o=ye(o),i=ye(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=ye(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=ye(r);for(r=0;r<o.length;r++)we(o[r],"bubbled",e);for(e=n.length;0<e--;)we(n[e],"captured",t)}var Se=Object.freeze({accumulateTwoPhaseDispatches:Ce,accumulateTwoPhaseDispatchesSkipTarget:function(e){J(e,be)},accumulateEnterLeaveDispatches:Te,accumulateDirectDispatches:function(e){J(e,Ee)}}),Oe=null;function Pe(){return!Oe&&o.canUseDOM&&(Oe="textContent"in document.documentElement?"textContent":"innerText"),Oe}var Ne={_root:null,_startText:null,_fallbackText:null};function Ie(){if(Ne._fallbackText)return Ne._fallbackText;var e,t,n=Ne._startText,r=n.length,o=ke(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Ne._fallbackText=o.slice(e,1<t?1-t:void 0),Ne._fallbackText}function ke(){return"value"in Ne._root?Ne._root.value:Ne._root[Pe()]}var Re="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),Ae={type:null,target:null,currentTarget:a.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function xe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?a.thatReturnsTrue:a.thatReturnsFalse,this.isPropagationStopped=a.thatReturnsFalse,this}function De(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function Le(e){e instanceof this||p("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Me(e){e.eventPool=[],e.getPooled=De,e.release=Le}function Fe(e,t,n,r){return xe.call(this,e,t,n,r)}function je(e,t,n,r){return xe.call(this,e,t,n,r)}i(xe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=a.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=a.thatReturnsTrue)},persist:function(){this.isPersistent=a.thatReturnsTrue},isPersistent:a.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<Re.length;t++)this[Re[t]]=null}}),xe.Interface=Ae,xe.augmentClass=function(e,t){function n(){}n.prototype=this.prototype;var r=new n;i(r,e.prototype),e.prototype=r,e.prototype.constructor=e,e.Interface=i({},this.Interface,t),e.augmentClass=this.augmentClass,Me(e)},Me(xe),xe.augmentClass(Fe,{data:null}),xe.augmentClass(je,{data:null});var Ue,Ve=[9,13,27,32],We=o.canUseDOM&&"CompositionEvent"in window,Be=null;if(o.canUseDOM&&"documentMode"in document&&(Be=document.documentMode),Ue=o.canUseDOM&&"TextEvent"in window&&!Be){var He=window.opera;Ue=!("object"==typeof He&&"function"==typeof He.version&&12>=parseInt(He.version(),10))}var Ke=Ue,qe=o.canUseDOM&&(!We||Be&&8<Be&&11>=Be),ze=String.fromCharCode(32),Ge={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},Qe=!1;function Ye(e,t){switch(e){case"topKeyUp":return-1!==Ve.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function Xe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $e=!1;var Je={eventTypes:Ge,extractEvents:function(e,t,n,r){var o;if(We)e:{switch(e){case"topCompositionStart":var i=Ge.compositionStart;break e;case"topCompositionEnd":i=Ge.compositionEnd;break e;case"topCompositionUpdate":i=Ge.compositionUpdate;break e}i=void 0}else $e?Ye(e,n)&&(i=Ge.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(i=Ge.compositionStart);return i?(qe&&($e||i!==Ge.compositionStart?i===Ge.compositionEnd&&$e&&(o=Ie()):(Ne._root=r,Ne._startText=ke(),$e=!0)),i=Fe.getPooled(i,t,n,r),o?i.data=o:null!==(o=Xe(n))&&(i.data=o),Ce(i),o=i):o=null,(e=Ke?function(e,t){switch(e){case"topCompositionEnd":return Xe(t);case"topKeyPress":return 32!==t.which?null:(Qe=!0,ze);case"topTextInput":return(e=t.data)===ze&&Qe?null:e;default:return null}}(e,n):function(e,t){if($e)return"topCompositionEnd"===e||!We&&Ye(e,t)?(e=Ie(),Ne._root=null,Ne._startText=null,Ne._fallbackText=null,$e=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return qe?null:t.data;default:return null}}(e,n))?((t=je.getPooled(Ge.beforeInput,t,n,r)).data=e,Ce(t)):t=null,[o,t]}},Ze=null,et=null,tt=null;function nt(e){if(e=Q(e)){Ze&&"function"==typeof Ze.restoreControlledState||p("194");var t=G(e.stateNode);Ze.restoreControlledState(e.stateNode,e.type,t)}}var rt={injectFiberControlledHostComponent:function(e){Ze=e}};function ot(e){et?tt?tt.push(e):tt=[e]:et=e}function it(){if(et){var e=et,t=tt;if(tt=et=null,nt(e),t)for(e=0;e<t.length;e++)nt(t[e])}}var at=Object.freeze({injection:rt,enqueueStateRestore:ot,restoreStateIfNeeded:it});function st(e,t){return e(t)}var ut=!1;function ct(e,t){if(ut)return st(e,t);ut=!0;try{return st(e,t)}finally{ut=!1,it()}}var lt,ht={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ft(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!ht[e.type]:"textarea"===t}function pt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function dt(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n=(t="on"+e)in document;return n||((n=document.createElement("div")).setAttribute(t,"return;"),n="function"==typeof n[t]),!n&&lt&&"wheel"===e&&(n=document.implementation.hasFeature("Events.wheel","3.0")),n}function vt(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function yt(e){e._valueTracker||(e._valueTracker=function(e){var t=vt(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{enumerable:n.enumerable,configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function mt(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=vt(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}o.canUseDOM&&(lt=document.implementation&&document.implementation.hasFeature&&!0!==document.implementation.hasFeature("",""));var gt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function _t(e,t,n){return(e=xe.getPooled(gt.change,e,t,n)).type="change",ot(n),Ce(e),e}var bt=null,wt=null;function Et(e){ae(e),se(!1)}function Ct(e){if(mt(pe(e)))return e}function Tt(e,t){if("topChange"===e)return t}var St=!1;function Ot(){bt&&(bt.detachEvent("onpropertychange",Pt),wt=bt=null)}function Pt(e){"value"===e.propertyName&&Ct(wt)&&ct(Et,e=_t(wt,e,pt(e)))}function Nt(e,t,n){"topFocus"===e?(Ot(),wt=n,(bt=t).attachEvent("onpropertychange",Pt)):"topBlur"===e&&Ot()}function It(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Ct(wt)}function kt(e,t){if("topClick"===e)return Ct(t)}function Rt(e,t){if("topInput"===e||"topChange"===e)return Ct(t)}o.canUseDOM&&(St=dt("input")&&(!document.documentMode||9<document.documentMode));var At={eventTypes:gt,_isInputEventSupported:St,extractEvents:function(e,t,n,r){var o=t?pe(t):window,i=o.nodeName&&o.nodeName.toLowerCase();if("select"===i||"input"===i&&"file"===o.type)var a=Tt;else if(ft(o))if(St)a=Rt;else{a=It;var s=Nt}else!(i=o.nodeName)||"input"!==i.toLowerCase()||"checkbox"!==o.type&&"radio"!==o.type||(a=kt);if(a&&(a=a(e,t)))return _t(a,n,r);s&&s(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&(e=""+o.value,o.getAttribute("value")!==e&&o.setAttribute("value",e))}};function xt(e,t,n,r){return xe.call(this,e,t,n,r)}xe.augmentClass(xt,{view:null,detail:null});var Dt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Lt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Dt[e])&&!!t[e]}function Mt(){return Lt}function Ft(e,t,n,r){return xe.call(this,e,t,n,r)}xt.augmentClass(Ft,{screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Mt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}});var jt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Ut={eventTypes:jt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?fe(t):null):e=null,e===t)return null;var i=null==e?o:pe(e);o=null==t?o:pe(t);var a=Ft.getPooled(jt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Ft.getPooled(jt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,Te(a,n,e,t),[a,n]}},Vt=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;function Wt(e){return"string"==typeof(e=e.type)?e:"function"==typeof e?e.displayName||e.name:null}function Bt(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Ht(e){return!!(e=e._reactInternalFiber)&&2===Bt(e)}function Kt(e){2!==Bt(e)&&p("188")}function qt(e){var t=e.alternate;if(!t)return 3===(t=Bt(e))&&p("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Kt(o),e;if(a===r)return Kt(o),t;a=a.sibling}p("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var s=o.child;s;){if(s===n){a=!0,n=o,r=i;break}if(s===r){a=!0,r=o,n=i;break}s=s.sibling}if(!a){for(s=i.child;s;){if(s===n){a=!0,n=i,r=o;break}if(s===r){a=!0,r=i,n=o;break}s=s.sibling}a||p("189")}}n.alternate!==r&&p("190")}return 3!==n.tag&&p("188"),n.stateNode.current===n?e:t}var zt=[];function Gt(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=fe(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],Yt(e.topLevelType,t,e.nativeEvent,pt(e.nativeEvent))}var Qt=!0,Yt=void 0;function Xt(e){Qt=!!e}function $t(e,t,n){return n?s.listen(n,t,Zt.bind(null,e)):null}function Jt(e,t,n){return n?s.capture(n,t,Zt.bind(null,e)):null}function Zt(e,t){if(Qt){var n=pt(t);if(null===(n=fe(n))||"number"!=typeof n.tag||2===Bt(n)||(n=null),zt.length){var r=zt.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{ct(Gt,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>zt.length&&zt.push(e)}}}var en=Object.freeze({get _enabled(){return Qt},get _handleTopLevel(){return Yt},setHandleTopLevel:function(e){Yt=e},setEnabled:Xt,isEnabled:function(){return Qt},trapBubbledEvent:$t,trapCapturedEvent:Jt,dispatchEvent:Zt});function tn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var nn={animationend:tn("Animation","AnimationEnd"),animationiteration:tn("Animation","AnimationIteration"),animationstart:tn("Animation","AnimationStart"),transitionend:tn("Transition","TransitionEnd")},rn={},on={};function an(e){if(rn[e])return rn[e];if(!nn[e])return e;var t,n=nn[e];for(t in n)if(n.hasOwnProperty(t)&&t in on)return rn[e]=n[t];return""}o.canUseDOM&&(on=document.createElement("div").style,"AnimationEvent"in window||(delete nn.animationend.animation,delete nn.animationiteration.animation,delete nn.animationstart.animation),"TransitionEvent"in window||delete nn.transitionend.transition);var sn={topAbort:"abort",topAnimationEnd:an("animationend")||"animationend",topAnimationIteration:an("animationiteration")||"animationiteration",topAnimationStart:an("animationstart")||"animationstart",topBlur:"blur",topCancel:"cancel",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoad:"load",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:an("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},un={},cn=0,ln="_reactListenersID"+(""+Math.random()).slice(2);function hn(e){return Object.prototype.hasOwnProperty.call(e,ln)||(e[ln]=cn++,un[e[ln]]={}),un[e[ln]]}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function dn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var vn=o.canUseDOM&&"documentMode"in document&&11>=document.documentMode,yn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},mn=null,gn=null,_n=null,bn=!1;function wn(e,t){if(bn||null==mn||mn!==u())return null;var n=mn;return"selectionStart"in n&&dn(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,_n&&c(_n,n)?null:(_n=n,(e=xe.getPooled(yn.select,gn,e,t)).type="select",e.target=mn,Ce(e),e)}var En={eventTypes:yn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=hn(i),o=H.onSelect;for(var a=0;a<o.length;a++){var s=o[a];if(!i.hasOwnProperty(s)||!i[s]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?pe(t):window,e){case"topFocus":(ft(i)||"true"===i.contentEditable)&&(mn=i,gn=t,_n=null);break;case"topBlur":_n=gn=mn=null;break;case"topMouseDown":bn=!0;break;case"topContextMenu":case"topMouseUp":return bn=!1,wn(n,r);case"topSelectionChange":if(vn)break;case"topKeyDown":case"topKeyUp":return wn(n,r)}return null}};function Cn(e,t,n,r){return xe.call(this,e,t,n,r)}function Tn(e,t,n,r){return xe.call(this,e,t,n,r)}function Sn(e,t,n,r){return xe.call(this,e,t,n,r)}function On(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,32<=e||13===e?e:0}xe.augmentClass(Cn,{animationName:null,elapsedTime:null,pseudoElement:null}),xe.augmentClass(Tn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),xt.augmentClass(Sn,{relatedTarget:null});var Pn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};function In(e,t,n,r){return xe.call(this,e,t,n,r)}function kn(e,t,n,r){return xe.call(this,e,t,n,r)}function Rn(e,t,n,r){return xe.call(this,e,t,n,r)}function An(e,t,n,r){return xe.call(this,e,t,n,r)}function xn(e,t,n,r){return xe.call(this,e,t,n,r)}xt.augmentClass(In,{key:function(e){if(e.key){var t=Pn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=On(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Nn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Mt,charCode:function(e){return"keypress"===e.type?On(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?On(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Ft.augmentClass(kn,{dataTransfer:null}),xt.augmentClass(Rn,{touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Mt}),xe.augmentClass(An,{propertyName:null,elapsedTime:null,pseudoElement:null}),Ft.augmentClass(xn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null});var Dn={},Ln={};"abort animationEnd animationIteration animationStart blur cancel canPlay canPlayThrough click close contextMenu copy cut doubleClick drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error focus input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing progress rateChange reset scroll seeked seeking stalled submit suspend timeUpdate toggle touchCancel touchEnd touchMove touchStart transitionEnd volumeChange waiting wheel".split(" ").forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t;n={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[t="top"+t]},Dn[e]=n,Ln[t]=n});var Mn={eventTypes:Dn,extractEvents:function(e,t,n,r){var o=Ln[e];if(!o)return null;switch(e){case"topKeyPress":if(0===On(n))return null;case"topKeyDown":case"topKeyUp":e=In;break;case"topBlur":case"topFocus":e=Sn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Ft;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=kn;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=Rn;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Cn;break;case"topTransitionEnd":e=An;break;case"topScroll":e=xt;break;case"topWheel":e=xn;break;case"topCopy":case"topCut":case"topPaste":e=Tn;break;default:e=xe}return Ce(t=e.getPooled(o,t,n,r)),t}};Yt=function(e,t,n,r){ae(e=ie(e,t,n,r)),se(!1)},re.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),G=ve.getFiberCurrentPropsFromNode,Q=ve.getInstanceFromNode,Y=ve.getNodeFromInstance,re.injectEventPluginsByName({SimpleEventPlugin:Mn,EnterLeaveEventPlugin:Ut,ChangeEventPlugin:At,SelectEventPlugin:En,BeforeInputEventPlugin:Je});var Fn=[],jn=-1;function Un(e){0>jn||(e.current=Fn[jn],Fn[jn]=null,jn--)}function Vn(e,t){Fn[++jn]=e.current,e.current=t}new Set;var Wn={current:f},Bn={current:!1},Hn=f;function Kn(e){return zn(e)?Hn:Wn.current}function qn(e,t){var n=e.type.contextTypes;if(!n)return f;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function zn(e){return 2===e.tag&&null!=e.type.childContextTypes}function Gn(e){zn(e)&&(Un(Bn),Un(Wn))}function Qn(e,t,n){null!=Wn.cursor&&p("168"),Vn(Wn,t),Vn(Bn,n)}function Yn(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||p("108",Wt(e)||"Unknown",o);return i({},t,n)}function Xn(e){if(!zn(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,Hn=Wn.current,Vn(Wn,t),Vn(Bn,Bn.current),!0}function $n(e,t){var n=e.stateNode;if(n||p("169"),t){var r=Yn(e,Hn);n.__reactInternalMemoizedMergedChildContext=r,Un(Bn),Un(Wn),Vn(Wn,r)}else Un(Bn);Vn(Bn,t)}function Jn(e,t,n){this.tag=e,this.key=t,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.memoizedState=this.updateQueue=this.memoizedProps=this.pendingProps=this.ref=null,this.internalContextTag=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function Zn(e,t,n){var r=e.alternate;return null===r?((r=new Jn(e.tag,e.key,e.internalContextTag)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.pendingProps=t,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function er(e,t,n){var r=void 0,o=e.type,i=e.key;return"function"==typeof o?((r=o.prototype&&o.prototype.isReactComponent?new Jn(2,i,t):new Jn(0,i,t)).type=o,r.pendingProps=e.props):"string"==typeof o?((r=new Jn(5,i,t)).type=o,r.pendingProps=e.props):"object"==typeof o&&null!==o&&"number"==typeof o.tag?(r=o).pendingProps=e.props:p("130",null==o?o:typeof o,""),r.expirationTime=n,r}function tr(e,t,n,r){return(t=new Jn(10,r,t)).pendingProps=e,t.expirationTime=n,t}function nr(e,t,n){return(t=new Jn(6,null,t)).pendingProps=e,t.expirationTime=n,t}function rr(e,t,n){return(t=new Jn(7,e.key,t)).type=e.handler,t.pendingProps=e,t.expirationTime=n,t}function or(e,t,n){return(e=new Jn(9,null,t)).expirationTime=n,e}function ir(e,t,n){return(t=new Jn(4,e.key,t)).pendingProps=e.children||[],t.expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}var ar=null,sr=null;function ur(e){return function(t){try{return e(t)}catch(e){}}}function cr(e){"function"==typeof ar&&ar(e)}function lr(e){"function"==typeof sr&&sr(e)}function hr(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1}}function fr(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}function pr(e,t){var n=e.alternate,r=e.updateQueue;null===r&&(r=e.updateQueue=hr(null)),null!==n?null===(e=n.updateQueue)&&(e=n.updateQueue=hr(null)):e=null,null===(e=e!==r?e:null)?fr(r,t):null===r.last||null===e.last?(fr(r,t),fr(e,t)):(fr(r,t),e.last=t)}function dr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function vr(e,t,n,r,o,a){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var s=!0,u=n.first,c=!1;null!==u;){var l=u.expirationTime;if(l>a){var h=n.expirationTime;(0===h||h>l)&&(n.expirationTime=l),c||(c=!0,n.baseState=e)}else c||(n.first=u.next,null===n.first&&(n.last=null)),u.isReplace?(e=dr(u,r,e,o),s=!0):(l=dr(u,r,e,o))&&(e=s?i({},e,l):i(e,l),s=!1),u.isForced&&(n.hasForceUpdate=!0),null!==u.callback&&(null===(l=n.callbackList)&&(l=n.callbackList=[]),l.push(u));u=u.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||(t.updateQueue=null),c||(n.baseState=e),e}function yr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&p("191",o),o.call(t)}}var mr="function"==typeof Symbol&&Symbol.for,gr=mr?Symbol.for("react.element"):60103,_r=mr?Symbol.for("react.call"):60104,br=mr?Symbol.for("react.return"):60105,wr=mr?Symbol.for("react.portal"):60106,Er=mr?Symbol.for("react.fragment"):60107,Cr="function"==typeof Symbol&&Symbol.iterator;function Tr(e){return null===e||void 0===e?null:"function"==typeof(e=Cr&&e[Cr]||e["@@iterator"])?e:null}var Sr=Array.isArray;function Or(e,t){var n=t.ref;if(null!==n&&"function"!=typeof n){if(t._owner){var r=void 0;(t=t._owner)&&(2!==t.tag&&p("110"),r=t.stateNode),r||p("147",n);var o=""+n;return null!==e&&null!==e.ref&&e.ref._stringRef===o?e.ref:((e=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,e)}"string"!=typeof n&&p("148"),t._owner||p("149",n)}return n}function Pr(e,t){"textarea"!==e.type&&p("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function Nr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Zn(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=nr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function u(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Or(t,n),r.return=e,r):((r=er(n,e.internalContextTag,r)).ref=Or(t,n),r.return=e,r)}function c(e,t,n,r){return null===t||7!==t.tag?((t=rr(n,e.internalContextTag,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null===t||9!==t.tag?((t=or(n,e.internalContextTag,r)).type=n.value,t.return=e,t):((t=o(t,null,r)).type=n.value,t.return=e,t)}function h(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=ir(n,e.internalContextTag,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,i){return null===t||10!==t.tag?((t=tr(n,e.internalContextTag,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=nr(""+t,e.internalContextTag,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case gr:return t.type===Er?((t=tr(t.props.children,e.internalContextTag,n,t.key)).return=e,t):((n=er(t,e.internalContextTag,n)).ref=Or(null,t),n.return=e,n);case _r:return(t=rr(t,e.internalContextTag,n)).return=e,t;case br:return(n=or(t,e.internalContextTag,n)).type=t.value,n.return=e,n;case wr:return(t=ir(t,e.internalContextTag,n)).return=e,t}if(Sr(t)||Tr(t))return(t=tr(t,e.internalContextTag,n,null)).return=e,t;Pr(e,t)}return null}function v(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case gr:return n.key===o?n.type===Er?f(e,t,n.props.children,r,o):u(e,t,n,r):null;case _r:return n.key===o?c(e,t,n,r):null;case br:return null===o?l(e,t,n,r):null;case wr:return n.key===o?h(e,t,n,r):null}if(Sr(n)||Tr(n))return null!==o?null:f(e,t,n,r,null);Pr(e,n)}return null}function y(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case gr:return e=e.get(null===r.key?n:r.key)||null,r.type===Er?f(t,e,r.props.children,o,r.key):u(t,e,r,o);case _r:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case br:return l(t,e=e.get(n)||null,r,o);case wr:return h(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Sr(r)||Tr(r))return f(t,e=e.get(n)||null,r,o,null);Pr(t,r)}return null}function m(o,a,s,u){for(var c=null,l=null,h=a,f=a=0,p=null;null!==h&&f<s.length;f++){h.index>f?(p=h,h=null):p=h.sibling;var m=v(o,h,s[f],u);if(null===m){null===h&&(h=p);break}e&&h&&null===m.alternate&&t(o,h),a=i(m,a,f),null===l?c=m:l.sibling=m,l=m,h=p}if(f===s.length)return n(o,h),c;if(null===h){for(;f<s.length;f++)(h=d(o,s[f],u))&&(a=i(h,a,f),null===l?c=h:l.sibling=h,l=h);return c}for(h=r(o,h);f<s.length;f++)(p=y(h,o,f,s[f],u))&&(e&&null!==p.alternate&&h.delete(null===p.key?f:p.key),a=i(p,a,f),null===l?c=p:l.sibling=p,l=p);return e&&h.forEach(function(e){return t(o,e)}),c}function g(o,a,s,u){var c=Tr(s);"function"!=typeof c&&p("150"),null==(s=c.call(s))&&p("151");for(var l=c=null,h=a,f=a=0,m=null,g=s.next();null!==h&&!g.done;f++,g=s.next()){h.index>f?(m=h,h=null):m=h.sibling;var _=v(o,h,g.value,u);if(null===_){h||(h=m);break}e&&h&&null===_.alternate&&t(o,h),a=i(_,a,f),null===l?c=_:l.sibling=_,l=_,h=m}if(g.done)return n(o,h),c;if(null===h){for(;!g.done;f++,g=s.next())null!==(g=d(o,g.value,u))&&(a=i(g,a,f),null===l?c=g:l.sibling=g,l=g);return c}for(h=r(o,h);!g.done;f++,g=s.next())null!==(g=y(h,o,f,g.value,u))&&(e&&null!==g.alternate&&h.delete(null===g.key?f:g.key),a=i(g,a,f),null===l?c=g:l.sibling=g,l=g);return e&&h.forEach(function(e){return t(o,e)}),c}return function(e,r,i,s){"object"==typeof i&&null!==i&&i.type===Er&&null===i.key&&(i=i.props.children);var u="object"==typeof i&&null!==i;if(u)switch(i.$$typeof){case gr:e:{var c=i.key;for(u=r;null!==u;){if(u.key===c){if(10===u.tag?i.type===Er:u.type===i.type){n(e,u.sibling),(r=o(u,i.type===Er?i.props.children:i.props,s)).ref=Or(u,i),r.return=e,e=r;break e}n(e,u);break}t(e,u),u=u.sibling}i.type===Er?((r=tr(i.props.children,e.internalContextTag,s,i.key)).return=e,e=r):((s=er(i,e.internalContextTag,s)).ref=Or(r,i),s.return=e,e=s)}return a(e);case _r:e:{for(u=i.key;null!==r;){if(r.key===u){if(7===r.tag){n(e,r.sibling),(r=o(r,i,s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=rr(i,e.internalContextTag,s)).return=e,e=r}return a(e);case br:e:{if(null!==r){if(9===r.tag){n(e,r.sibling),(r=o(r,null,s)).type=i.value,r.return=e,e=r;break e}n(e,r)}(r=or(i,e.internalContextTag,s)).type=i.value,r.return=e,e=r}return a(e);case wr:e:{for(u=i.key;null!==r;){if(r.key===u){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],s)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=ir(i,e.internalContextTag,s)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),r=o(r,i,s)):(n(e,r),r=nr(i,e.internalContextTag,s)),r.return=e,a(e=r);if(Sr(i))return m(e,r,i,s);if(Tr(i))return g(e,r,i,s);if(u&&Pr(e,i),void 0===i)switch(e.tag){case 2:case 1:p("152",(s=e.type).displayName||s.name||"Component")}return n(e,r)}}var Ir=Nr(!0),kr=Nr(!1);function Rr(e,t,n,r,o){function i(e,t,n){var r=t.expirationTime;t.child=null===e?kr(t,null,n,r):Ir(t,e.child,n,r)}function a(e,t){var n=t.ref;null===n||e&&e.ref===n||(t.effectTag|=128)}function s(e,t,n,r){if(a(e,t),!n)return r&&$n(t,!1),l(e,t);n=t.stateNode,Vt.current=t;var o=n.render();return t.effectTag|=1,i(e,t,o),t.memoizedState=n.state,t.memoizedProps=n.props,r&&$n(t,!0),t.child}function u(e){var t=e.stateNode;t.pendingContext?Qn(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Qn(0,t.context,!1),g(e,t.containerInfo)}function l(e,t){if(null!==e&&t.child!==e.child&&p("153"),null!==t.child){var n=Zn(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Zn(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function h(e,t){switch(t.tag){case 3:u(t);break;case 2:Xn(t);break;case 4:g(t,t.stateNode.containerInfo)}return null}var d=e.shouldSetTextContent,v=e.useSyncScheduling,y=e.shouldDeprioritizeSubtree,m=t.pushHostContext,g=t.pushHostContainer,_=n.enterHydrationState,b=n.resetHydrationState,w=n.tryToClaimNextHydratableInstance,E=(e=function(e,t,n,r){function o(e,t){t.updater=i,e.stateNode=t,t._reactInternalFiber=e}var i={isMounted:Ht,enqueueSetState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var i=t(n);pr(n,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,nextCallback:null,next:null}),e(n,i)},enqueueReplaceState:function(n,r,o){n=n._reactInternalFiber,o=void 0===o?null:o;var i=t(n);pr(n,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,nextCallback:null,next:null}),e(n,i)},enqueueForceUpdate:function(n,r){n=n._reactInternalFiber,r=void 0===r?null:r;var o=t(n);pr(n,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,nextCallback:null,next:null}),e(n,o)}};return{adoptClassInstance:o,constructClassInstance:function(e,t){var n=e.type,r=Kn(e),i=2===e.tag&&null!=e.type.contextTypes,a=i?qn(e,r):f;return o(e,t=new n(t,a)),i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,e.__reactInternalMemoizedMaskedChildContext=a),t},mountClassInstance:function(e,t){var n=e.alternate,r=e.stateNode,o=r.state||null,a=e.pendingProps;a||p("158");var s=Kn(e);r.props=a,r.state=e.memoizedState=o,r.refs=f,r.context=qn(e,s),null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent&&(e.internalContextTag|=1),"function"==typeof r.componentWillMount&&(o=r.state,r.componentWillMount(),o!==r.state&&i.enqueueReplaceState(r,r.state,null),null!==(o=e.updateQueue)&&(r.state=vr(n,e,o,r,a,t))),"function"==typeof r.componentDidMount&&(e.effectTag|=4)},updateClassInstance:function(e,t,o){var a=t.stateNode;a.props=t.memoizedProps,a.state=t.memoizedState;var s=t.memoizedProps,u=t.pendingProps;u||null==(u=s)&&p("159");var l=a.context,h=Kn(t);if(h=qn(t,h),"function"!=typeof a.componentWillReceiveProps||s===u&&l===h||(l=a.state,a.componentWillReceiveProps(u,h),a.state!==l&&i.enqueueReplaceState(a,a.state,null)),l=t.memoizedState,o=null!==t.updateQueue?vr(e,t,t.updateQueue,a,u,o):l,!(s!==u||l!==o||Bn.current||null!==t.updateQueue&&t.updateQueue.hasForceUpdate))return"function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),!1;var f=u;if(null===s||null!==t.updateQueue&&t.updateQueue.hasForceUpdate)f=!0;else{var d=t.stateNode,v=t.type;f="function"==typeof d.shouldComponentUpdate?d.shouldComponentUpdate(f,o,h):!(v.prototype&&v.prototype.isPureReactComponent&&c(s,f)&&c(l,o))}return f?("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(u,o,h),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),n(t,u),r(t,o)),a.props=u,a.state=o,a.context=h,f}}}(r,o,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,C=e.constructClassInstance,T=e.mountClassInstance,S=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n)return h(0,t);switch(t.tag){case 0:null!==e&&p("155");var r=t.type,o=t.pendingProps,c=Kn(t);return r=r(o,c=qn(t,c)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render?(t.tag=2,o=Xn(t),E(t,r),T(t,n),t=s(e,t,!0,o)):(t.tag=1,i(e,t,r),t.memoizedProps=o,t=t.child),t;case 1:e:{if(o=t.type,n=t.pendingProps,r=t.memoizedProps,Bn.current)null===n&&(n=r);else if(null===n||r===n){t=l(e,t);break e}o=o(n,r=qn(t,r=Kn(t))),t.effectTag|=1,i(e,t,o),t.memoizedProps=n,t=t.child}return t;case 2:return o=Xn(t),r=void 0,null===e?t.stateNode?p("153"):(C(t,t.pendingProps),T(t,n),r=!0):r=S(e,t,n),s(e,t,r,o);case 3:return u(t),null!==(o=t.updateQueue)?(r=t.memoizedState)===(o=vr(e,t,o,null,null,n))?(b(),t=l(e,t)):(r=o.element,c=t.stateNode,(null===e||null===e.child)&&c.hydrate&&_(t)?(t.effectTag|=2,t.child=kr(t,null,r,n)):(b(),i(e,t,r)),t.memoizedState=o,t=t.child):(b(),t=l(e,t)),t;case 5:m(t),null===e&&w(t),o=t.type;var f=t.memoizedProps;return null===(r=t.pendingProps)&&(null===(r=f)&&p("154")),c=null!==e?e.memoizedProps:null,Bn.current||null!==r&&f!==r?(f=r.children,d(o,r)?f=null:c&&d(o,c)&&(t.effectTag|=16),a(e,t),2147483647!==n&&!v&&y(o,r)?(t.expirationTime=2147483647,t=null):(i(e,t,f),t.memoizedProps=r,t=t.child)):t=l(e,t),t;case 6:return null===e&&w(t),null===(e=t.pendingProps)&&(e=t.memoizedProps),t.memoizedProps=e,null;case 8:t.tag=7;case 7:return o=t.pendingProps,Bn.current?null===o&&(null===(o=e&&e.memoizedProps)&&p("154")):null!==o&&t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?kr(t,t.stateNode,r,n):Ir(t,t.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:e:{if(g(t,t.stateNode.containerInfo),o=t.pendingProps,Bn.current)null===o&&(null==(o=e&&e.memoizedProps)&&p("154"));else if(null===o||t.memoizedProps===o){t=l(e,t);break e}null===e?t.child=Ir(t,null,o,n):i(e,t,o),t.memoizedProps=o,t=t.child}return t;case 10:e:{if(n=t.pendingProps,Bn.current)null===n&&(n=t.memoizedProps);else if(null===n||t.memoizedProps===n){t=l(e,t);break e}i(e,t,n),t.memoizedProps=n,t=t.child}return t;default:p("156")}},beginFailedWork:function(e,t,n){switch(t.tag){case 2:Xn(t);break;case 3:u(t);break;default:p("157")}return t.effectTag|=64,null===e?t.child=null:t.child!==e.child&&(t.child=e.child),0===t.expirationTime||t.expirationTime>n?h(0,t):(t.firstEffect=null,t.lastEffect=null,t.child=null===e?kr(t,null,null,n):Ir(t,e.child,null,n),2===t.tag&&(e=t.stateNode,t.memoizedProps=e.props,t.memoizedState=e.state),t.child)}}}var Ar={};function xr(e){function t(e){ae=X=!0;var t=e.stateNode;if(t.current===e&&p("177"),t.isReadyForCommit=!1,Vt.current=null,1<e.effectTag)if(null!==e.lastEffect){e.lastEffect.nextEffect=e;var n=e.firstEffect}else n=e;else n=e.firstEffect;for(q(),ee=n;null!==ee;){var r=!1,o=void 0;try{for(;null!==ee;){var i=ee.effectTag;if(16&i&&D(ee),128&i){var a=ee.alternate;null!==a&&V(a)}switch(-242&i){case 2:L(ee),ee.effectTag&=-3;break;case 6:L(ee),ee.effectTag&=-3,F(ee.alternate,ee);break;case 4:F(ee.alternate,ee);break;case 8:se=!0,M(ee),se=!1}ee=ee.nextEffect}}catch(e){r=!0,o=e}r&&(null===ee&&p("178"),s(ee,o),null!==ee&&(ee=ee.nextEffect))}for(z(),t.current=e,ee=n;null!==ee;){n=!1,r=void 0;try{for(;null!==ee;){var u=ee.effectTag;if(36&u&&j(ee.alternate,ee),128&u&&U(ee),64&u)switch(o=ee,i=void 0,null!==te&&(i=te.get(o),te.delete(o),null==i&&null!==o.alternate&&(o=o.alternate,i=te.get(o),te.delete(o))),null==i&&p("184"),o.tag){case 2:o.stateNode.componentDidCatch(i.error,{componentStack:i.componentStack});break;case 3:null===oe&&(oe=i.error);break;default:p("157")}var c=ee.nextEffect;ee.nextEffect=null,ee=c}}catch(e){n=!0,r=e}n&&(null===ee&&p("178"),s(ee,r),null!==ee&&(ee=ee.nextEffect))}return X=ae=!1,cr(e.stateNode),re&&(re.forEach(y),re=null),null!==oe&&(e=oe,oe=null,T(e)),0===(t=t.current.expirationTime)&&(ne=te=null),t}function n(e){for(;;){var t=x(e.alternate,e,Z),n=e.return,r=e.sibling,o=e;if(2147483647===Z||2147483647!==o.expirationTime){if(2!==o.tag&&3!==o.tag)var i=0;else i=null===(i=o.updateQueue)?0:i.expirationTime;for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){e.stateNode.isReadyForCommit=!0;break}e=n}return null}function r(e){var t=R(e.alternate,e,Z);return null===t&&(t=n(e)),Vt.current=null,t}function o(e){var t=A(e.alternate,e,Z);return null===t&&(t=n(e)),Vt.current=null,t}function i(e){if(null!==te){if(!(0===Z||Z>e))if(Z<=Q)for(;null!==$;)$=u($)?o($):r($);else for(;null!==$&&!C();)$=u($)?o($):r($)}else if(!(0===Z||Z>e))if(Z<=Q)for(;null!==$;)$=r($);else for(;null!==$&&!C();)$=r($)}function a(e,t){if(X&&p("243"),X=!0,e.isReadyForCommit=!1,e!==J||t!==Z||null===$){for(;-1<jn;)Fn[jn]=null,jn--;Hn=f,Wn.current=f,Bn.current=!1,I(),Z=t,$=Zn((J=e).current,null,t)}var n=!1,r=null;try{i(t)}catch(e){n=!0,r=e}for(;n;){if(ie){oe=r;break}var a=$;if(null===a)ie=!0;else{var u=s(a,r);if(null===u&&p("183"),!ie){try{for(r=t,u=n=u;null!==a;){switch(a.tag){case 2:Gn(a);break;case 5:N(a);break;case 3:P(a);break;case 4:P(a)}if(a===u||a.alternate===u)break;a=a.return}$=o(n),i(r)}catch(e){n=!0,r=e;continue}break}}}return t=oe,ie=X=!1,oe=null,null!==t&&T(t),e.isReadyForCommit?e.current.alternate:null}function s(e,t){var n=Vt.current=null,r=!1,o=!1,i=null;if(3===e.tag)n=e,c(e)&&(ie=!0);else for(var a=e.return;null!==a&&null===n;){if(2===a.tag?"function"==typeof a.stateNode.componentDidCatch&&(r=!0,i=Wt(a),n=a,o=!0):3===a.tag&&(n=a),c(a)){if(se||null!==re&&(re.has(a)||null!==a.alternate&&re.has(a.alternate)))return null;n=null,o=!1}a=a.return}if(null!==n){null===ne&&(ne=new Set),ne.add(n);var s="";a=e;do{e:switch(a.tag){case 0:case 1:case 2:case 5:var u=a._debugOwner,l=a._debugSource,h=Wt(a),f=null;u&&(f=Wt(u)),u=l,h="\n    in "+(h||"Unknown")+(u?" (at "+u.fileName.replace(/^.*[\\\/]/,"")+":"+u.lineNumber+")":f?" (created by "+f+")":"");break e;default:h=""}s+=h,a=a.return}while(a);a=s,e=Wt(e),null===te&&(te=new Map),t={componentName:e,componentStack:a,error:t,errorBoundary:r?n.stateNode:null,errorBoundaryFound:r,errorBoundaryName:i,willRetry:o},te.set(n,t);try{var p=t.error;p&&p.suppressReactErrorLogging||console.error(p)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}return ae?(null===re&&(re=new Set),re.add(n)):y(n),n}return null===oe&&(oe=t),null}function u(e){return null!==te&&(te.has(e)||null!==e.alternate&&te.has(e.alternate))}function c(e){return null!==ne&&(ne.has(e)||null!==e.alternate&&ne.has(e.alternate))}function l(){return 20*(1+((m()+100)/20|0))}function h(e){return 0!==Y?Y:X?ae?1:Z:!K||1&e.internalContextTag?l():1}function d(e,t){return v(e,t)}function v(e,t){for(;null!==e;){if((0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>t)&&(e.alternate.expirationTime=t),null===e.return){if(3!==e.tag)break;var n=e.stateNode;!X&&n===J&&t<Z&&($=J=null,Z=0);var r=n,o=t;if(Ee>we&&p("185"),null===r.nextScheduledRoot)r.remainingExpirationTime=o,null===ce?(ue=ce=r,r.nextScheduledRoot=r):(ce=ce.nextScheduledRoot=r).nextScheduledRoot=ue;else{var i=r.remainingExpirationTime;(0===i||o<i)&&(r.remainingExpirationTime=o)}fe||(_e?be&&E(pe=r,de=1):1===o?w(1,null):g(o)),!X&&n===J&&t<Z&&($=J=null,Z=0)}e=e.return}}function y(e){v(e,1)}function m(){return Q=2+((W()-G)/10|0)}function g(e){if(0!==le){if(e>le)return;H(he)}var t=W()-G;le=e,he=B(b,{timeout:10*(e-2)-t})}function _(){var e=0,t=null;if(null!==ce)for(var n=ce,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===ce)&&p("244"),r===r.nextScheduledRoot){ue=ce=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,ce.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ce){(ce=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ce)break;n=r,r=r.nextScheduledRoot}}null!==(n=pe)&&n===t?Ee++:Ee=0,pe=t,de=e}function b(e){w(0,e)}function w(e,t){for(ge=t,_();null!==pe&&0!==de&&(0===e||de<=e)&&!ve;)E(pe,de),_();if(null!==ge&&(le=0,he=-1),0!==de&&g(de),ge=null,ve=!1,Ee=0,ye)throw e=me,me=null,ye=!1,e}function E(e,n){if(fe&&p("245"),fe=!0,n<=m()){var r=e.finishedWork;null!==r?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=a(e,n))&&(e.remainingExpirationTime=t(r)))}else null!==(r=e.finishedWork)?(e.finishedWork=null,e.remainingExpirationTime=t(r)):(e.finishedWork=null,null!==(r=a(e,n))&&(C()?e.finishedWork=r:e.remainingExpirationTime=t(r)));fe=!1}function C(){return!(null===ge||ge.timeRemaining()>Ce)&&(ve=!0)}function T(e){null===pe&&p("246"),pe.remainingExpirationTime=0,ye||(ye=!0,me=e)}var S=function(e){function t(e){return e===Ar&&p("174"),e}var n=e.getChildHostContext,r=e.getRootHostContext,o={current:Ar},i={current:Ar},a={current:Ar};return{getHostContext:function(){return t(o.current)},getRootHostContainer:function(){return t(a.current)},popHostContainer:function(e){Un(o),Un(i),Un(a)},popHostContext:function(e){i.current===e&&(Un(o),Un(i))},pushHostContainer:function(e,t){Vn(a,t),t=r(t),Vn(i,e),Vn(o,t)},pushHostContext:function(e){var r=t(a.current),s=t(o.current);s!==(r=n(s,e.type,r))&&(Vn(i,e),Vn(o,r))},resetHostContainer:function(){o.current=Ar,a.current=Ar}}}(e),O=function(e){function t(e,t){var n=new Jn(5,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;h=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){p("175")},prepareToHydrateHostTextInstance:function(){p("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,s=e.getNextHydratableSibling,u=e.getFirstHydratableChild,c=e.hydrateInstance,l=e.hydrateTextInstance,h=null,f=null,d=!1;return{enterHydrationState:function(e){return f=u(e.stateNode.containerInfo),h=e,d=!0},resetHydrationState:function(){f=h=null,d=!1},tryToClaimNextHydratableInstance:function(e){if(d){var r=f;if(r){if(!n(e,r)){if(!(r=s(r))||!n(e,r))return e.effectTag|=2,d=!1,void(h=e);t(h,f)}h=e,f=u(r)}else e.effectTag|=2,d=!1,h=e}},prepareToHydrateHostInstance:function(e,t,n){return t=c(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return l(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==h)return!1;if(!d)return r(e),d=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=f;n;)t(e,n),n=s(n);return r(e),f=h?s(e.stateNode):null,!0}}}(e),P=S.popHostContainer,N=S.popHostContext,I=S.resetHostContainer,k=Rr(e,S,O,d,h),R=k.beginWork,A=k.beginFailedWork,x=function(e,t,n){function r(e){e.effectTag|=4}var o=e.createInstance,i=e.createTextInstance,a=e.appendInitialChild,s=e.finalizeInitialChildren,u=e.prepareUpdate,c=e.persistence,l=t.getRootHostContainer,h=t.popHostContext,f=t.getHostContext,d=t.popHostContainer,v=n.prepareToHydrateHostInstance,y=n.prepareToHydrateHostTextInstance,m=n.popHydrationState,g=void 0,_=void 0,b=void 0;return e.mutation?(g=function(){},_=function(e,t,n){(t.updateQueue=n)&&r(t)},b=function(e,t,n,o){n!==o&&r(t)}):p(c?"235":"236"),{completeWork:function(e,t,n){var c=t.pendingProps;switch(null===c?c=t.memoizedProps:2147483647===t.expirationTime&&2147483647!==n||(t.pendingProps=null),t.tag){case 1:return null;case 2:return Gn(t),null;case 3:return d(t),Un(Bn),Un(Wn),(c=t.stateNode).pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==e&&null!==e.child||(m(t),t.effectTag&=-3),g(t),null;case 5:h(t),n=l();var w=t.type;if(null!==e&&null!=t.stateNode){var E=e.memoizedProps,C=t.stateNode,T=f();C=u(C,w,E,c,n,T),_(e,t,C,w,E,c,n),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!c)return null===t.stateNode&&p("166"),null;if(e=f(),m(t))v(t,n,e)&&r(t);else{e=o(w,c,n,e,t);e:for(E=t.child;null!==E;){if(5===E.tag||6===E.tag)a(e,E.stateNode);else if(4!==E.tag&&null!==E.child){E.child.return=E,E=E.child;continue}if(E===t)break;for(;null===E.sibling;){if(null===E.return||E.return===t)break e;E=E.return}E.sibling.return=E.return,E=E.sibling}s(e,w,c,n)&&r(t),t.stateNode=e}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)b(e,t,e.memoizedProps,c);else{if("string"!=typeof c)return null===t.stateNode&&p("166"),null;e=l(),n=f(),m(t)?y(t)&&r(t):t.stateNode=i(c,e,n,t)}return null;case 7:(c=t.memoizedProps)||p("165"),t.tag=8,w=[];e:for((E=t.stateNode)&&(E.return=t);null!==E;){if(5===E.tag||6===E.tag||4===E.tag)p("247");else if(9===E.tag)w.push(E.type);else if(null!==E.child){E.child.return=E,E=E.child;continue}for(;null===E.sibling;){if(null===E.return||E.return===t)break e;E=E.return}E.sibling.return=E.return,E=E.sibling}return c=(E=c.handler)(c.props,w),t.child=Ir(t,null!==e?e.child:null,c,n),t.child;case 8:return t.tag=7,null;case 9:case 10:return null;case 4:return d(t),g(t),null;case 0:p("167");default:p("156")}}}}(e,S,O).completeWork,D=(S=function(e,t){function n(e){var n=e.ref;if(null!==n)try{n(null)}catch(n){t(e,n)}}function r(e){switch(lr(e),e.tag){case 2:n(e);var r=e.stateNode;if("function"==typeof r.componentWillUnmount)try{r.props=e.memoizedProps,r.state=e.memoizedState,r.componentWillUnmount()}catch(n){t(e,n)}break;case 5:n(e);break;case 7:o(e.stateNode);break;case 4:u&&a(e)}}function o(e){for(var t=e;;)if(r(t),null===t.child||u&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function i(e){return 5===e.tag||3===e.tag||4===e.tag}function a(e){for(var t=e,n=!1,i=void 0,a=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&p("160"),n.tag){case 5:i=n.stateNode,a=!1;break e;case 3:case 4:i=n.stateNode.containerInfo,a=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)o(t),a?_(i,t.stateNode):g(i,t.stateNode);else if(4===t.tag?i=t.stateNode.containerInfo:r(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var s=e.getPublicInstance,u=e.mutation;e=e.persistence,u||p(e?"235":"236");var c=u.commitMount,l=u.commitUpdate,h=u.resetTextContent,f=u.commitTextUpdate,d=u.appendChild,v=u.appendChildToContainer,y=u.insertBefore,m=u.insertInContainerBefore,g=u.removeChild,_=u.removeChildFromContainer;return{commitResetTextContent:function(e){h(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(i(t)){var n=t;break e}t=t.return}p("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:p("161")}16&n.effectTag&&(h(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||i(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?m(t,o.stateNode,n):y(t,o.stateNode,n):r?v(t,o.stateNode):d(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){a(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&l(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&p("162"),n=t.memoizedProps,f(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:p("163")}},commitLifeCycles:function(e,t){switch(t.tag){case 2:var n=t.stateNode;if(4&t.effectTag)if(null===e)n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidMount();else{var r=e.memoizedProps;e=e.memoizedState,n.props=t.memoizedProps,n.state=t.memoizedState,n.componentDidUpdate(r,e)}null!==(t=t.updateQueue)&&yr(t,n);break;case 3:null!==(n=t.updateQueue)&&yr(n,null!==t.child?t.child.stateNode:null);break;case 5:n=t.stateNode,null===e&&4&t.effectTag&&c(n,t.type,t.memoizedProps,t);break;case 6:case 4:break;default:p("163")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:t(s(n));break;default:t(n)}}},commitDetachRef:function(e){null!==(e=e.ref)&&e(null)}}}(e,s)).commitResetTextContent,L=S.commitPlacement,M=S.commitDeletion,F=S.commitWork,j=S.commitLifeCycles,U=S.commitAttachRef,V=S.commitDetachRef,W=e.now,B=e.scheduleDeferredCallback,H=e.cancelDeferredCallback,K=e.useSyncScheduling,q=e.prepareForCommit,z=e.resetAfterCommit,G=W(),Q=2,Y=0,X=!1,$=null,J=null,Z=0,ee=null,te=null,ne=null,re=null,oe=null,ie=!1,ae=!1,se=!1,ue=null,ce=null,le=0,he=-1,fe=!1,pe=null,de=0,ve=!1,ye=!1,me=null,ge=null,_e=!1,be=!1,we=1e3,Ee=0,Ce=1;return{computeAsyncExpiration:l,computeExpirationForFiber:h,scheduleWork:d,batchedUpdates:function(e,t){var n=_e;_e=!0;try{return e(t)}finally{(_e=n)||fe||w(1,null)}},unbatchedUpdates:function(e){if(_e&&!be){be=!0;try{return e()}finally{be=!1}}return e()},flushSync:function(e){var t=_e;_e=!0;try{e:{var n=Y;Y=1;try{var r=e();break e}finally{Y=n}r=void 0}return r}finally{_e=t,fe&&p("187"),w(1,null)}},deferredUpdates:function(e){var t=Y;Y=l();try{return e()}finally{Y=t}}}}function Dr(e){function t(e){return null===(e=function(e){if(!(e=qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode}var n=e.getPublicInstance,r=(e=xr(e)).computeAsyncExpiration,o=e.computeExpirationForFiber,a=e.scheduleWork;return{createContainer:function(e,t){var n=new Jn(3,null,0);return e={current:n,containerInfo:e,pendingChildren:null,remainingExpirationTime:0,isReadyForCommit:!1,finishedWork:null,context:null,pendingContext:null,hydrate:t,nextScheduledRoot:null},n.stateNode=e},updateContainer:function(e,t,n,i){var s=t.current;if(n){var u;n=n._reactInternalFiber;e:{for(2===Bt(n)&&2===n.tag||p("170"),u=n;3!==u.tag;){if(zn(u)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break e}(u=u.return)||p("171")}u=u.stateNode.context}n=zn(n)?Yn(n,u):u}else n=f;null===t.context?t.context=n:t.pendingContext=n,t=void 0===(t=i)?null:t,pr(s,{expirationTime:i=null!=e&&null!=e.type&&null!=e.type.prototype&&!0===e.type.prototype.unstable_isAsyncReactComponent?r():o(s),partialState:{element:e},callback:t,isReplace:!1,isForced:!1,nextCallback:null,next:null}),a(s,i)},batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:t,findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=qt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var n=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);ar=ur(function(e){return t.onCommitFiberRoot(n,e)}),sr=ur(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(i({},e,{findHostInstanceByFiber:function(e){return t(e)},findFiberByHostInstance:function(e){return n?n(e):null}}))}}}var Lr=Object.freeze({default:Dr}),Mr=Lr&&Dr||Lr,Fr=Mr.default?Mr.default:Mr;var jr="object"==typeof performance&&"function"==typeof performance.now,Ur=void 0;Ur=jr?function(){return performance.now()}:function(){return Date.now()};var Vr=void 0,Wr=void 0;if(o.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Br,Hr=null,Kr=!1,qr=-1,zr=!1,Gr=0,Qr=33,Yr=33;Br=jr?{didTimeout:!1,timeRemaining:function(){var e=Gr-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Gr-Date.now();return 0<e?e:0}};var Xr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Xr){if(Kr=!1,e=Ur(),0>=Gr-e){if(!(-1!==qr&&qr<=e))return void(zr||(zr=!0,requestAnimationFrame($r)));Br.didTimeout=!0}else Br.didTimeout=!1;qr=-1,e=Hr,Hr=null,null!==e&&e(Br)}},!1);var $r=function(e){zr=!1;var t=e-Gr+Yr;t<Yr&&Qr<Yr?(8>t&&(t=8),Yr=t<Qr?Qr:t):Qr=t,Gr=e+Yr,Kr||(Kr=!0,window.postMessage(Xr,"*"))};Vr=function(e,t){return Hr=e,null!=t&&"number"==typeof t.timeout&&(qr=Ur()+t.timeout),zr||(zr=!0,requestAnimationFrame($r)),0},Wr=function(){Hr=null,Kr=!1,qr=-1}}else Vr=window.requestIdleCallback,Wr=window.cancelIdleCallback;else Vr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0}})})},Wr=function(e){clearTimeout(e)};var Jr=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Zr={},eo={};function to(e,t,n){var r=_(t);if(r&&g(t,n)){var o=r.mutationMethod;o?o(e,n):null==n||r.hasBooleanValue&&!n||r.hasNumericValue&&isNaN(n)||r.hasPositiveNumericValue&&1>n||r.hasOverloadedBooleanValue&&!1===n?ro(e,t):r.mustUseProperty?e[r.propertyName]=n:(t=r.attributeName,(o=r.attributeNamespace)?e.setAttributeNS(o,t,""+n):r.hasBooleanValue||r.hasOverloadedBooleanValue&&!0===n?e.setAttribute(t,""):e.setAttribute(t,""+n))}else no(e,t,g(t,n)?n:null)}function no(e,t,n){(function(e){return!!eo.hasOwnProperty(e)||!Zr.hasOwnProperty(e)&&(Jr.test(e)?eo[e]=!0:(Zr[e]=!0,!1))})(t)&&(null==n?e.removeAttribute(t):e.setAttribute(t,""+n))}function ro(e,t){var n=_(t);n?(t=n.mutationMethod)?t(e,void 0):n.mustUseProperty?e[n.propertyName]=!n.hasBooleanValue&&"":e.removeAttribute(n.attributeName):e.removeAttribute(t)}function oo(e,t){var n=t.value,r=t.checked;return i({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=r?r:e._wrapperState.initialChecked})}function io(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ao(e,t){null!=(t=t.checked)&&to(e,"checked",t)}function so(e,t){ao(e,t);var n=t.value;null!=n?0===n&&""===e.value?e.value="0":"number"===t.type?(n!=(t=parseFloat(e.value)||0)||n==t&&e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n):(null==t.value&&null!=t.defaultValue&&e.defaultValue!==""+t.defaultValue&&(e.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked))}function uo(e,t){switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":e.value="",e.value=e.defaultValue;break;default:e.value=e.value}""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function co(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function lo(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function ho(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function fo(e,t){return null!=t.dangerouslySetInnerHTML&&p("91"),i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function po(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&p("92"),Array.isArray(t)&&(1>=t.length||p("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function vo(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function yo(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var mo="http://www.w3.org/1999/xhtml",go="http://www.w3.org/2000/svg";function _o(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function bo(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?_o(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var wo,Eo=void 0,Co=(wo=function(e,t){if(e.namespaceURI!==go||"innerHTML"in e)e.innerHTML=t;else{for((Eo=Eo||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Eo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return wo(e,t)})}:wo);function To(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var So={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Oo=["Webkit","ms","Moz","O"];function Po(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||So.hasOwnProperty(o)&&So[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(So).forEach(function(e){Oo.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),So[t]=So[e]})});var No=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Io(e,t,n){t&&(No[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&p("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&p("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||p("61")),null!=t.style&&"object"!=typeof t.style&&p("62",n()))}function ko(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Ro=mo,Ao=a.thatReturns("");function xo(e,t){var n=hn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=H[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Jt("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Jt("topFocus","focus",e),Jt("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(dt("cancel",!0)&&Jt("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(dt("close",!0)&&Jt("topClose","close",e),n.topClose=!0):sn.hasOwnProperty(o)&&$t(o,sn[o],e),n[o]=!0)}}var Do={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"};function Lo(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===Ro&&(r=_o(e)),r===Ro?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function Mo(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function Fo(e,t,n,r){var o=ko(t,n);switch(t){case"iframe":case"object":$t("topLoad","load",e);var s=n;break;case"video":case"audio":for(s in Do)Do.hasOwnProperty(s)&&$t(s,Do[s],e);s=n;break;case"source":$t("topError","error",e),s=n;break;case"img":case"image":$t("topError","error",e),$t("topLoad","load",e),s=n;break;case"form":$t("topReset","reset",e),$t("topSubmit","submit",e),s=n;break;case"details":$t("topToggle","toggle",e),s=n;break;case"input":io(e,n),s=oo(e,n),$t("topInvalid","invalid",e),xo(r,"onChange");break;case"option":s=co(e,n);break;case"select":ho(e,n),s=i({},n,{value:void 0}),$t("topInvalid","invalid",e),xo(r,"onChange");break;case"textarea":po(e,n),s=fo(e,n),$t("topInvalid","invalid",e),xo(r,"onChange");break;default:s=n}Io(t,s,Ao);var u,c=s;for(u in c)if(c.hasOwnProperty(u)){var l=c[u];"style"===u?Po(e,l):"dangerouslySetInnerHTML"===u?null!=(l=l?l.__html:void 0)&&Co(e,l):"children"===u?"string"==typeof l?("textarea"!==t||""!==l)&&To(e,l):"number"==typeof l&&To(e,""+l):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(B.hasOwnProperty(u)?null!=l&&xo(r,u):o?no(e,u,l):null!=l&&to(e,u,l))}switch(t){case"input":yt(e),uo(e,n);break;case"textarea":yt(e),yo(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?lo(e,!!n.multiple,t,!1):null!=n.defaultValue&&lo(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof s.onClick&&(e.onclick=a)}}function jo(e,t,n,r,o){var s,u,c=null;switch(t){case"input":n=oo(e,n),r=oo(e,r),c=[];break;case"option":n=co(e,n),r=co(e,r),c=[];break;case"select":n=i({},n,{value:void 0}),r=i({},r,{value:void 0}),c=[];break;case"textarea":n=fo(e,n),r=fo(e,r),c=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=a)}for(s in Io(t,r,Ao),e=null,n)if(!r.hasOwnProperty(s)&&n.hasOwnProperty(s)&&null!=n[s])if("style"===s)for(u in t=n[s])t.hasOwnProperty(u)&&(e||(e={}),e[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(B.hasOwnProperty(s)?c||(c=[]):(c=c||[]).push(s,null));for(s in r){var l=r[s];if(t=null!=n?n[s]:void 0,r.hasOwnProperty(s)&&l!==t&&(null!=l||null!=t))if("style"===s)if(t){for(u in t)!t.hasOwnProperty(u)||l&&l.hasOwnProperty(u)||(e||(e={}),e[u]="");for(u in l)l.hasOwnProperty(u)&&t[u]!==l[u]&&(e||(e={}),e[u]=l[u])}else e||(c||(c=[]),c.push(s,e)),e=l;else"dangerouslySetInnerHTML"===s?(l=l?l.__html:void 0,t=t?t.__html:void 0,null!=l&&t!==l&&(c=c||[]).push(s,""+l)):"children"===s?t===l||"string"!=typeof l&&"number"!=typeof l||(c=c||[]).push(s,""+l):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(B.hasOwnProperty(s)?(null!=l&&xo(o,s),c||t===l||(c=[])):(c=c||[]).push(s,l))}return e&&(c=c||[]).push("style",e),c}function Uo(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&ao(e,o),ko(n,r),r=ko(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],s=t[i+1];"style"===a?Po(e,s):"dangerouslySetInnerHTML"===a?Co(e,s):"children"===a?To(e,s):r?null!=s?no(e,a,s):e.removeAttribute(a):null!=s?to(e,a,s):ro(e,a)}switch(n){case"input":so(e,o);break;case"textarea":vo(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?lo(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?lo(e,!!o.multiple,o.defaultValue,!0):lo(e,!!o.multiple,o.multiple?[]:"",!1))}}function Vo(e,t,n,r,o){switch(t){case"iframe":case"object":$t("topLoad","load",e);break;case"video":case"audio":for(var i in Do)Do.hasOwnProperty(i)&&$t(i,Do[i],e);break;case"source":$t("topError","error",e);break;case"img":case"image":$t("topError","error",e),$t("topLoad","load",e);break;case"form":$t("topReset","reset",e),$t("topSubmit","submit",e);break;case"details":$t("topToggle","toggle",e);break;case"input":io(e,n),$t("topInvalid","invalid",e),xo(o,"onChange");break;case"select":ho(e,n),$t("topInvalid","invalid",e),xo(o,"onChange");break;case"textarea":po(e,n),$t("topInvalid","invalid",e),xo(o,"onChange")}for(var s in Io(t,n,Ao),r=null,n)n.hasOwnProperty(s)&&(i=n[s],"children"===s?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):B.hasOwnProperty(s)&&null!=i&&xo(o,s));switch(t){case"input":yt(e),uo(e,n);break;case"textarea":yt(e),yo(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=a)}return r}function Wo(e,t){return e.nodeValue!==t}var Bo=Object.freeze({createElement:Lo,createTextNode:Mo,setInitialProperties:Fo,diffProperties:jo,updateProperties:Uo,diffHydratedProperties:Vo,diffHydratedText:Wo,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(so(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=de(r);o||p("90"),mt(r),so(r,o)}}}break;case"textarea":vo(e,n);break;case"select":null!=(t=n.value)&&lo(e,!!n.multiple,t,!1)}}});rt.injectFiberControlledHostComponent(Bo);var Ho=null,Ko=null;function qo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}var zo=Fr({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:bo(null,"");break;default:e=bo(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return bo(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){Ho=Qt;var e=u();if(dn(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,s=-1,c=0,l=0,h=e,f=null;t:for(;;){for(var p;h!==t||0!==r&&3!==h.nodeType||(a=i+r),h!==o||0!==n&&3!==h.nodeType||(s=i+n),3===h.nodeType&&(i+=h.nodeValue.length),null!==(p=h.firstChild);)f=h,h=p;for(;;){if(h===e)break t;if(f===t&&++c===r&&(a=i),f===o&&++l===n&&(s=i),null!==(p=h.nextSibling))break;f=(h=f).parentNode}h=p}t=-1===a||-1===s?null:{start:a,end:s}}else t=null}t=t||{start:0,end:0}}else t=null;Ko={focusedElem:e,selectionRange:t},Xt(!1)},resetAfterCommit:function(){var e=Ko,t=u(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&l(document.documentElement,n)){if(dn(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[Pe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=pn(n,e);var i=pn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(h(n),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}Ko=null,Xt(Ho),Ho=null},createInstance:function(e,t,n,r,o){return(e=Lo(e,t,n,r))[le]=o,e[he]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){Fo(e,t,n,r);e:{switch(t){case"button":case"input":case"select":case"textarea":e=!!n.autoFocus;break e}e=!1}return e},prepareUpdate:function(e,t,n,r,o){return jo(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=Mo(e,t))[le]=r,e},now:Ur,mutation:{commitMount:function(e){e.focus()},commitUpdate:function(e,t,n,r,o){e[he]=o,Uo(e,t,n,r,o)},resetTextContent:function(e){e.textContent=""},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[le]=i,e[he]=n,Vo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[le]=n,Wo(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:Vr,cancelDeferredCallback:Wr,useSyncScheduling:!0});function Go(e,t,n,r,o){qo(n)||p("200");var i=n._reactRootContainer;if(i)zo.updateContainer(t,i,e,o);else{if(!(r=r||function(e){return!(!(e=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))}(n)))for(i=void 0;i=n.lastChild;)n.removeChild(i);var a=zo.createContainer(n,r);i=n._reactRootContainer=a,zo.unbatchedUpdates(function(){zo.updateContainer(t,a,e,o)})}return zo.getPublicRootInstance(i)}function Qo(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return qo(t)||p("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wr,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}function Yo(e,t){this._reactRootContainer=zo.createContainer(e,t)}st=zo.batchedUpdates,Yo.prototype.render=function(e,t){zo.updateContainer(e,this._reactRootContainer,null,t)},Yo.prototype.unmount=function(e){zo.updateContainer(null,this._reactRootContainer,null,e)};var Xo={createPortal:Qo,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(t)return zo.findHostInstance(t);"function"==typeof e.render?p("188"):p("213",Object.keys(e))},hydrate:function(e,t,n){return Go(null,e,t,!0,n)},render:function(e,t,n){return Go(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&p("38"),Go(e,t,n,!1,r)},unmountComponentAtNode:function(e){return qo(e)||p("40"),!!e._reactRootContainer&&(zo.unbatchedUpdates(function(){Go(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:Qo,unstable_batchedUpdates:ct,unstable_deferredUpdates:zo.deferredUpdates,flushSync:zo.flushSync,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:ue,EventPluginRegistry:z,EventPropagators:Se,ReactControlledComponent:at,ReactDOMComponentTree:ve,ReactDOMEventListener:en}};zo.injectIntoDevTools({findFiberByHostInstance:fe,bundleType:0,version:"16.2.0",rendererPackageName:"react-dom"});var $o=Object.freeze({default:Xo}),Jo=$o&&Xo||$o;e.exports=Jo.default?Jo.default:Jo},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(191)},function(e,t,n){"use strict";var r=u(n(192)),o=u(n(2)),i=u(n(182)),a=u(n(47)),s=n(19);function u(e){return e&&e.__esModule?e:{default:e}}a.default.initializeApp({apiKey:"AIzaSyAD98USTaFV6BOidsqgh1eqPNJFt2g-SuU",authDomain:"code-reatreat.firebaseapp.com",databaseURL:"https://code-reatreat.firebaseio.com",storageBucket:"code-reatreat.appspot.com",messagingSenderId:"260899568163"});var c=document.getElementById("app");r.default.render(o.default.createElement(s.HashRouter,null,o.default.createElement(i.default,null)),c)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,